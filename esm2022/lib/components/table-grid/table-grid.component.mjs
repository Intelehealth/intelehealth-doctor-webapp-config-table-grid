import { Component, ElementRef, ViewChild, Input } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { AppointmentService } from '../../services/appointment.service';
import { VisitService } from '../../services/visit.service';
// import * as moment from 'moment';
import moment from 'moment';
import { CoreService } from '../../services/core.service';
import { ToastrService } from 'ngx-toastr';
import { TranslateService } from '@ngx-translate/core';
import { getCacheData, checkIfDateOldThanOneDay } from '../../utils/utility-functions';
import { doctorDetails, languages, visitTypes } from '../../config/constant';
// import { AppConfigService } from '../services/app-config.service';
import { MindmapService } from '../../services/mindmap.service';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { MatMenuTrigger } from '@angular/material/menu';
import { DomSanitizer } from '@angular/platform-browser';
import { formatDate } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../../services/appointment.service";
import * as i2 from "../../services/visit.service";
import * as i3 from "../../services/core.service";
import * as i4 from "ngx-toastr";
import * as i5 from "@ngx-translate/core";
import * as i6 from "../../services/mindmap.service";
import * as i7 from "@angular/platform-browser";
import * as i8 from "@angular/router";
import * as i9 from "@angular/common";
import * as i10 from "@angular/material/paginator";
import * as i11 from "@angular/material/tooltip";
import * as i12 from "@angular/material/form-field";
import * as i13 from "@angular/material/expansion";
import * as i14 from "@angular/material/menu";
import * as i15 from "@angular/material/table";
import * as i16 from "@angular/material/icon";
import * as i17 from "@angular/material/datepicker";
import * as i18 from "@angular/forms";
export class TableGridComponent {
    appointmentService;
    visitService;
    coreService;
    toastr;
    translateService;
    mindmapService;
    sanitizer;
    pluginConfigObs;
    displayedAppointmentColumns = [];
    displayedColumns = [];
    dataSource = new MatTableDataSource();
    patientRegFields = [];
    isMCCUser = false;
    paginator;
    searchElement;
    filteredDateAndRangeForm;
    tempPaginator;
    menuTrigger;
    panelExpanded = true;
    mode = 'date';
    maxDate;
    appointments = [];
    priorityVisits = [];
    awaitingVisits = [];
    inProgressVisits = [];
    completedVisits = [];
    followUpVisits = [];
    specialization = '';
    visitsLengthCount = 0;
    isFilterApplied = false;
    ngAfterViewInit() {
        this.dataSource.paginator = this.paginator;
    }
    constructor(appointmentService, visitService, coreService, toastr, translateService, mindmapService, sanitizer
    // private appConfigService: AppConfigService
    ) {
        this.appointmentService = appointmentService;
        this.visitService = visitService;
        this.coreService = coreService;
        this.toastr = toastr;
        this.translateService = translateService;
        this.mindmapService = mindmapService;
        this.sanitizer = sanitizer;
        // Object.keys(this.appConfigService.patient_registration).forEach(obj=>{
        //   this.patientRegFields.push(...this.appConfigService.patient_registration[obj].filter(e=>e.is_enabled).map(e=>e.name));
        // }); 
        this.filteredDateAndRangeForm = this.createFilteredDateRangeForm();
        this.displayedColumns = this.displayedColumns.filter(col => (col !== 'age' || this.checkPatientRegField('Age')));
    }
    /**
     * Creates a filtered date range form with required date fields
     * @return {FormGroup} - The created form group
     */
    createFilteredDateRangeForm() {
        return new FormGroup({
            date: new FormControl('', [Validators.required]),
            startDate: new FormControl(null, Validators.required),
            endDate: new FormControl(null, Validators.required),
        });
    }
    ngOnInit() {
        this.translateService.use(getCacheData(false, languages.SELECTED_LANGUAGE));
        let provider = getCacheData(true, doctorDetails.PROVIDER);
        if (provider) {
            if (provider.attributes.length) {
                this.specialization = this.getSpecialization(provider.attributes);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Appointment") {
                this.getAppointments();
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Awaiting") {
                this.getAwaitingVisits(1);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Priority") {
                this.getPriorityVisits(1);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "InProgress") {
                this.getInProgressVisits(1);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Completed") {
                this.getCompletedVisits();
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "FollowUp") {
                this.getFollowUpVisit();
            }
        }
        this.maxDate = this.pluginConfigObs.filterObs.filterDateMax;
    }
    /**
     * Dynmaic label Display
     * @param changes pluginConfigObs
     */
    ngOnChanges(changes) {
        if (changes["pluginConfigObs"] && changes["pluginConfigObs"].currentValue) {
            this.displayedAppointmentColumns = this.pluginConfigObs.tableColumns || [];
            this.displayedColumns = this.displayedAppointmentColumns.map((column) => column.key);
        }
    }
    /**
     * Get the patient type style
     * @param type
     */
    getPatientTypeStyle(type) {
        const typeConfig = this.pluginConfigObs.patientType.find((t) => t.key === type);
        return typeConfig
            ? typeConfig.style
            : { color: "#000", backgroundColor: "#ccc" }; // Default fallback styling
    }
    /**
     * Get the patient type either new or old
     * @param type
     */
    getPatientTypeLabel(type) {
        const typeConfig = this.pluginConfigObs.patientType.find((t) => t.key === type);
        return typeConfig ? typeConfig.label : "Unknown"; // Default fallback label
    }
    getVisitTypeStyle(type) {
        const visitType = this.pluginConfigObs.visitType.find((v) => v.type === type);
        return visitType?.[type]?.style || { color: "#000", backgroundColor: "#ccc" }; // Default style
    }
    getVisitTypeLabel(type) {
        const visitType = this.pluginConfigObs.visitType.find((v) => v.type === type);
        return visitType?.[type]?.label || "Unknown"; // Default label
    }
    getVisitTypeIcon(type) {
        const visitType = this.pluginConfigObs.visitType.find((v) => v.type === type);
        return visitType?.[type]?.style?.icon || ""; // Default empty icon
    }
    formatVisitDate(date) {
        return date ? formatDate(date, 'dd MMM, yyyy', 'en-US') : '';
    }
    /**
    * Retreive the chief complaints for the visit
    * @param {CustomVisitModel} visit - Visit
    * @return {string[]} - Chief complaints array
    */
    getCheifComplaint(visit) {
        let recent = [];
        const encounters = visit.encounters;
        encounters.forEach((encounter) => {
            const display = encounter.type?.name;
            if (display.match(visitTypes.ADULTINITIAL) !== null) {
                const obs = encounter.obs;
                obs.forEach((currentObs) => {
                    if (currentObs.concept_id == 163212) {
                        const currentComplaint = this.visitService.getData2(currentObs)?.value_text.replace(new RegExp('â–º', 'g'), '').split('<b>');
                        for (let i = 1; i < currentComplaint.length; i++) {
                            const obs1 = currentComplaint[i].split('<');
                            if (!obs1[0].match(visitTypes.ASSOCIATED_SYMPTOMS)) {
                                recent.push(obs1[0]);
                            }
                        }
                    }
                });
            }
        });
        return recent;
    }
    /**
    * Check how old the date is from now
    * @param {string} data - Date in string format
    * @return {string} - Returns how old the date is from now
    */
    checkIfDateOldThanOneDay(data) {
        let hours = moment(data).diff(moment(), 'hours');
        let minutes = moment(data).diff(moment(), 'minutes');
        if (hours > 24) {
            return moment(data).format('DD MMM, YYYY hh:mm A');
        }
        ;
        if (hours < 1) {
            if (minutes < 0)
                return `Due : ${moment(data).format('DD MMM, YYYY hh:mm A')}`;
            return `${minutes} minutes`;
        }
        return `${hours} hrs`;
    }
    /**
    * Reschedule appointment
    * @param {AppointmentModel} appointment - Appointment to be rescheduled
    * @return {void}
    */
    reschedule(appointment) {
        const len = appointment.visit.encounters.filter((e) => {
            return (e.type.name == visitTypes.PATIENT_EXIT_SURVEY || e.type.name == visitTypes.VISIT_COMPLETE);
        }).length;
        const isCompleted = Boolean(len);
        if (isCompleted) {
            this.toastr.error(this.translateService.instant("Visit is already completed, it can't be rescheduled."), this.translateService.instant('Rescheduling failed!'));
        }
        else if (appointment.visitStatus == 'Visit In Progress') {
            this.toastr.error(this.translateService.instant("Visit is in progress, it can't be rescheduled."), this.translateService.instant('Rescheduling failed!'));
        }
        else {
            this.coreService.openRescheduleAppointmentModal(this.pluginConfigObs.mindmapURL, appointment).subscribe((res) => {
                if (res) {
                    let newSlot = res;
                    this.coreService.openRescheduleAppointmentConfirmModal({ appointment, newSlot }).subscribe((result) => {
                        if (result) {
                            appointment.appointmentId = appointment.id;
                            appointment.slotDate = moment(newSlot.date, "YYYY-MM-DD").format('DD/MM/YYYY');
                            appointment.slotTime = newSlot.slot;
                            this.appointmentService.rescheduleAppointment(this.pluginConfigObs.mindmapURL, appointment).subscribe((res) => {
                                const message = res.message;
                                if (res.status) {
                                    this.mindmapService.notifyHwForRescheduleAppointment(this.pluginConfigObs.mindmapURL, appointment);
                                    this.getAppointments();
                                    this.toastr.success(this.translateService.instant("The appointment has been rescheduled successfully!"), this.translateService.instant('Rescheduling successful!'));
                                }
                                else {
                                    this.toastr.success(message, this.translateService.instant('Rescheduling failed!'));
                                }
                            });
                        }
                    });
                }
            });
        }
    }
    /**
    * Cancel appointment
    * @param {AppointmentModel} appointment - Appointment to be rescheduled
    * @return {void}
    */
    cancel(appointment) {
        if (appointment.visitStatus == 'Visit In Progress') {
            this.toastr.error(this.translateService.instant("Visit is in progress, it can't be cancelled."), this.translateService.instant('Canceling failed!'));
            return;
        }
        this.coreService.openConfirmCancelAppointmentModal(this.pluginConfigObs?.mindmapURL, appointment).subscribe((res) => {
            if (res) {
                this.toastr.success(this.translateService.instant('The Appointment has been successfully canceled.'), this.translateService.instant('Canceling successful'));
                this.getAppointments();
            }
        });
    }
    /**
    * Get user uuid from localstorage user
    * @return {string} - User uuid
    */
    get userId() {
        return getCacheData(true, doctorDetails.USER).uuid;
    }
    /**
    * Apply filter on a datasource
    * @param {Event} event - Input's change event
    * @return {void}
    */
    applyFilter(event) {
        const filterValue = event.target.value;
        this.dataSource.filter = filterValue.trim().toLowerCase();
        this.isFilterApplied = true;
    }
    /**
    * Clear filter from a datasource
    * @return {void}
    */
    clearFilter() {
        this.dataSource.filter = null;
        this.searchElement.nativeElement.value = "";
        this.isFilterApplied = false;
    }
    /**
     * Checks if the field is in patient registration fields
     * @param {string} fieldName - The field name
     * @return {boolean} - True if present, else false
     */
    checkPatientRegField(fieldName) {
        return this.patientRegFields.indexOf(fieldName) !== -1;
    }
    /**
    * Returns the WhatsApp link for a given telephone number
    * @param {string} telephoneNumber - The telephone number to generate the link for
    * @return {string} - The WhatsApp link
    */
    getWhatsAppLink(telephoneNumber) {
        return this.visitService.getWhatsappLink(telephoneNumber);
    }
    /**
     * Retrieves the telephone number from the person's attributes
     * @param {AppointmentModel['visit']['person']} person - The person object containing attributes
     * @return {string | undefined} - The person's telephone number or undefined if not found
     */
    getTelephoneNumber(person) {
        return person?.person_attribute.find((v) => v.person_attribute_type_id == 8)?.value;
    }
    /**
     * Closes the menu if it's open
     */
    closeMenu() {
        if (this.menuTrigger) {
            this.menuTrigger.closeMenu();
        }
    }
    /**
     * Sets the mode for the component (either 'date' or 'range')
     * @param {'date' | 'range'} mode - The mode to set
     */
    setMode(mode) {
        this.mode = mode;
    }
    /**
     * Formats a date into 'YYYY-MM-DD' format
     * @param {any} date - The date to format
     * @return {string} - The formatted date
     */
    formatDate(date) {
        const localDate = new Date(date);
        const year = localDate.getFullYear();
        const month = String(localDate.getMonth() + 1).padStart(2, '0');
        const day = String(localDate.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
    /**
     * Converts a relative time string (e.g., "2 hours", "1 day") to a date string
     * @param {string} relativeTime - The relative time string
     * @return {string} - The resulting date in 'YYYY-MM-DD' format
     * @throws {Error} - Throws error for invalid time units
     */
    convertToDate(relativeTime) {
        const now = new Date();
        const [value, unit] = relativeTime.split(' ');
        const amount = parseInt(value, 10);
        if (['hour', 'hours'].includes(unit.toLowerCase()))
            now.setHours(now.getHours() - amount);
        else if (['minute', 'minutes'].includes(unit.toLowerCase()))
            now.setMinutes(now.getMinutes() - amount);
        else if (['day', 'days'].includes(unit.toLowerCase()))
            now.setDate(now.getDate() - amount);
        else
            throw new Error('Invalid time unit. Only "hours", "minutes", or "days" are supported.');
        return now.toISOString().split('T')[0];
    }
    /**
     * Converts a follow-up date string to ISO format
     * @param {string} followUp - The follow-up date string
     * @return {string} - The follow-up date in ISO string format
     */
    convertToISO(followUp) {
        const date = new Date(followUp);
        date.setDate(date.getDate());
        return date.toISOString();
    }
    /**
     * Applies date or range filter to the data source based on selected date(s)
     * @param {string} dateField - The field name for the date to filter
     */
    applyDateOrRangeFilter(dateField) {
        const selectedDate = this.filteredDateAndRangeForm.get('date')?.value;
        const startDate = this.filteredDateAndRangeForm.get('startDate')?.value;
        const endDate = this.filteredDateAndRangeForm.get('endDate')?.value;
        if (selectedDate) {
            const formattedDate = this.formatDate(selectedDate);
            this.dataSource.filterPredicate = (data, filter) => {
                const itemDate = dateField !== "followUp" ? data[dateField].includes(',') ? this.formatDate(data[dateField]) : this.convertToDate(data[dateField]) : this.formatDate(this.convertToISO(data.followUp));
                return itemDate === filter;
            };
            this.dataSource.filter = formattedDate;
        }
        else if (startDate && endDate) {
            const formattedStartDate = this.formatDate(startDate);
            const formattedEndDate = this.formatDate(endDate);
            this.dataSource.filterPredicate = (data, filter) => {
                const itemDate = dateField !== "followUp" ? data[dateField].includes(',') ? this.formatDate(data[dateField]) : this.convertToDate(data[dateField]) : this.formatDate(this.convertToISO(data.followUp));
                return itemDate >= formattedStartDate && itemDate <= formattedEndDate;
            };
            this.dataSource.filter = `${formattedStartDate}:${formattedEndDate}`;
        }
        else {
            this.dataSource.filter = '';
        }
        this.tempPaginator.firstPage();
        this.closeMenu();
    }
    /**
     * Resets the date filter form and clears the data source filter
     * @param {boolean} flag - If true, doesn't close the menu
     */
    resetDate(flag = false) {
        this.filteredDateAndRangeForm.reset();
        this.dataSource.filter = '';
        this.dataSource.filterPredicate = (data, filter) => true;
        if (!flag) {
            this.closeMenu();
        }
    }
    /**
     * Retrieves a specific attribute data from the person's attributes
     * @param {any} data - The data object containing person attributes
     * @param {string} attributeName - The name of the attribute to retrieve
     * @return {Object | null} - The attribute name and value, or null if not found
     */
    getAttributeData(data, attributeName) {
        if (Array.isArray(data.person_attribute)) {
            const attribute = data.person_attribute.find((attr) => attr.person_attribute_type?.name === attributeName);
            if (attribute) {
                return {
                    name: attribute.person_attribute_type.name,
                    value: attribute.value
                };
            }
        }
        return null;
    }
    /**
    * Get booked appointments for a logged-in doctor in a current year
    * @return {void}
    */
    getAppointments() {
        this.appointments = [];
        this.appointmentService.getUserSlots(this.pluginConfigObs?.mindmapURL, getCacheData(true, doctorDetails.USER).uuid, moment().startOf('year').format('DD/MM/YYYY'), moment().endOf('year').format('DD/MM/YYYY'))
            .subscribe((res) => {
            this.visitsLengthCount = res.data?.length;
            let appointmentsdata = res.data;
            appointmentsdata.forEach((appointment) => {
                if (appointment.status == 'booked' && (appointment.visitStatus == 'Awaiting Consult' || appointment.visitStatus == 'Visit In Progress')) {
                    if (appointment.visit) {
                        appointment.cheif_complaint = this.getCheifComplaint(appointment.visit);
                        appointment.starts_in = checkIfDateOldThanOneDay(appointment.slotJsDate);
                        appointment.telephone = this.getTelephoneNumber(appointment?.visit?.person);
                        appointment.TMH_patient_id = this.getAttributeData(appointment.visit, "TMH Case Number");
                        appointment.uuid = appointment.visitUuid;
                        this.appointments.push(appointment);
                    }
                }
            });
            this.dataSource.data = [...this.appointments];
            this.dataSource.paginator = this.paginator;
            this.dataSource.filterPredicate = (data, filter) => data?.openMrsId.toLowerCase().indexOf(filter) != -1 || data?.patientName.toLowerCase().indexOf(filter) != -1;
        });
    }
    /**
    * Get doctor speciality
    * @param {ProviderAttributeModel[]} attr - Array of provider attributes
    * @return {string} - Doctor speciality
    */
    getSpecialization(attr) {
        let specialization = '';
        attr.forEach((a) => {
            if (a.attributeType.uuid == 'ed1715f5-93e2-404e-b3c9-2a2d9600f062' && !a.voided) {
                specialization = a.value;
            }
        });
        return specialization;
    }
    /**
    * Returns the age in years from the birthdate
    * @param {string} birthdate - Date in string format
    * @return {number} - Age
    */
    calculateAge(birthdate) {
        return moment().diff(birthdate, 'years');
    }
    /**
    * Returns the created time in words from the date
    * @param {string} data - Date
    * @return {string} - Created time in words from the date
    */
    getCreatedAt(data) {
        let hours = moment().diff(moment(data), 'hours');
        let minutes = moment().diff(moment(data), 'minutes');
        if (hours > 24) {
            return moment(data).format('DD MMM, YYYY');
        }
        ;
        if (hours < 1) {
            return `${minutes} ${this.translateService.instant("Minutes ago")}`;
        }
        return `${hours} ${this.translateService.instant("Hours ago")}`;
    }
    /**
    * Get encounter datetime for a given encounter type
    * @param {CustomVisitModel} visit - Visit
    * @param {string} encounterName - Encounter type
    * @return {string} - Encounter datetime
    */
    getEncounterCreated(visit, encounterName) {
        let created_at = '';
        const encounters = visit.encounters;
        encounters.forEach((encounter) => {
            const display = encounter.type?.name;
            if (display.match(encounterName) !== null) {
                created_at = this.getCreatedAt(encounter.encounter_datetime.replace('Z', '+0530'));
            }
        });
        return created_at;
    }
    /**
     * Determines if the encounter is a follow-up or new visit
     * @param {any} enc - Encounter data
     * @return {string} - 'FOLLOW_UP' or 'NEW'
     */
    getDemarcation(enc) {
        let isFollowUp = false;
        const adlIntl = enc?.find?.(e => e?.type?.name === visitTypes.ADULTINITIAL);
        if (Array.isArray(adlIntl?.obs)) {
            adlIntl?.obs.forEach(obs => {
                if (!isFollowUp)
                    isFollowUp = obs?.value_text?.toLowerCase?.()?.includes?.("follow up");
            });
        }
        return isFollowUp ? visitTypes.FOLLOW_UP : visitTypes.NEW;
    }
    /**
    * Get awaiting visits for a given page number
    * @param {number} page - Page number
    * @return {void}
    */
    getAwaitingVisits(page = 1) {
        if (page == 1) {
            this.awaitingVisits = [];
            // this.awatingRecordsFetched = 0;
        }
        this.visitService.getAwaitingVisits(this.pluginConfigObs?.mindmapURL, this.specialization, page).subscribe((res) => {
            if (res.success) {
                this.visitsLengthCount = res.totalCount;
                // this.awatingRecordsFetched += this.offset;
                for (let i = 0; i < res.data.length; i++) {
                    let visit = res.data[i];
                    visit.cheif_complaint = this.getCheifComplaint(visit);
                    visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.ADULTINITIAL);
                    visit.person.age = this.calculateAge(visit.person.birthdate);
                    visit.patient_type = this.getDemarcation(visit?.encounters);
                    this.awaitingVisits.push(visit);
                }
                this.dataSource.data = [...this.awaitingVisits];
                if (page == 1) {
                    this.dataSource.paginator = this.tempPaginator;
                    this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                }
                else {
                    this.tempPaginator.length = this.awaitingVisits.length;
                    this.tempPaginator.nextPage();
                }
            }
        });
    }
    /**
    * Get inprogress visits for a given page number
    * @param {number} page - Page number
    * @return {void}
    */
    getInProgressVisits(page = 1) {
        if (page == 1) {
            this.inProgressVisits = [];
            // this.inprogressRecordsFetched = 0;
        }
        this.visitService.getInProgressVisits(this.pluginConfigObs?.mindmapURL, this.specialization, page).subscribe((res) => {
            if (res.success) {
                this.visitsLengthCount = res.totalCount;
                // this.inprogressVisitsCount = iv.totalCount;
                // this.inprogressRecordsFetched += this.offset;
                for (let i = 0; i < res.data.length; i++) {
                    let visit = res.data[i];
                    visit.cheif_complaint = this.getCheifComplaint(visit);
                    visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.ADULTINITIAL);
                    visit.prescription_started = this.getEncounterCreated(visit, visitTypes.VISIT_NOTE);
                    visit.person.age = this.calculateAge(visit.person.birthdate);
                    visit.TMH_patient_id = this.getAttributeData(visit, "TMH Case Number");
                    this.inProgressVisits.push(visit);
                }
                this.dataSource.data = [...this.inProgressVisits];
                if (page == 1) {
                    this.dataSource.paginator = this.tempPaginator;
                    this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                }
                else {
                    this.tempPaginator.length = this.inProgressVisits.length;
                    this.tempPaginator.nextPage();
                }
            }
        });
    }
    /**
    * Get priority visits for a given page number
    * @param {number} page - Page number
    * @return {void}
    */
    getPriorityVisits(page = 1) {
        if (page == 1) {
            this.priorityVisits = [];
            // this.priorityRecordsFetched = 0;
        }
        this.visitService.getPriorityVisits(this.pluginConfigObs?.mindmapURL, this.specialization, page).subscribe((res) => {
            if (res.success) {
                this.visitsLengthCount = res.totalCount;
                // this.priorityVisitsCount = res.totalCount;
                // this.priorityRecordsFetched += this.offset;
                for (let i = 0; i < res.data.length; i++) {
                    let visit = res.data[i];
                    visit.cheif_complaint = this.getCheifComplaint(visit);
                    visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.FLAGGED);
                    visit.person.age = this.calculateAge(visit.person.birthdate);
                    this.priorityVisits.push(visit);
                }
                this.dataSource.data = [...this.priorityVisits];
                if (page == 1) {
                    this.dataSource.paginator = this.tempPaginator;
                    this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                }
                else {
                    this.tempPaginator.length = this.priorityVisits.length;
                    this.tempPaginator.nextPage();
                }
            }
        });
    }
    /**
     * Get completed visits count
     * @return {void}
     */
    getCompletedVisits(page = 1) {
        this.visitService.getEndedVisits(this.pluginConfigObs?.mindmapURL, this.specialization, page).subscribe((res) => {
            if (res.success) {
                this.visitsLengthCount = res.totalCount;
                // this.completedVisitsCount = res.totalCount;
                // this.completedRecordsFetched += this.offset;
                for (let i = 0; i < res.data.length; i++) {
                    let visit = res.data[i];
                    visit.cheif_complaint = this.getCheifComplaint(visit);
                    visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.COMPLETED_VISIT);
                    visit.person.age = this.calculateAge(visit.person.birthdate);
                    visit.completed = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.VISIT_COMPLETE);
                    visit.TMH_patient_id = this.getAttributeData(visit, "TMH Case Number");
                    this.completedVisits.push(visit);
                }
                this.dataSource.data = [...this.completedVisits];
                if (page == 1) {
                    this.dataSource.paginator = this.tempPaginator;
                    this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                }
                else {
                    this.tempPaginator.length = this.completedVisits.length;
                    this.tempPaginator.nextPage();
                }
            }
        });
    }
    /**
  * Get follow-up visits for a logged-in doctor
  * @return {void}
  */
    getFollowUpVisit(page = 1) {
        this.visitService.getFollowUpVisits(this.pluginConfigObs?.mindmapURL, this.specialization).subscribe({
            next: (res) => {
                if (res.success) {
                    // this.followUpVisitsCount = 0;
                    // this.completedRecordsFetched += this.offset;
                    for (let i = 0; i < res.data.length; i++) {
                        let visit = res.data[i];
                        if (visit?.encounters?.length) {
                            // this.followUpVisitsCount += 1;
                            this.visitsLengthCount += 1;
                            visit.cheif_complaint = this.getCheifComplaint(visit);
                            visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.COMPLETED_VISIT);
                            visit.person.age = this.calculateAge(visit.person.birthdate);
                            visit.completed = this.getEncounterCreated(visit, visitTypes.VISIT_COMPLETE);
                            visit.followUp = this.processFollowUpDate(this.getEncounterObs(visit.encounters, visitTypes.VISIT_NOTE, 163345 /*Follow-up*/)?.value_text);
                            this.followUpVisits.push(visit);
                        }
                    }
                    this.dataSource.data = [...this.followUpVisits];
                    if (page == 1) {
                        this.dataSource.paginator = this.tempPaginator;
                        this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                    }
                    else {
                        this.tempPaginator.length = this.followUpVisits.length;
                        this.tempPaginator.nextPage();
                    }
                }
            }
        });
    }
    /**
    * Get encounter datetime for a given encounter type
    * @param {CustomVisitModel} visit - Visit
    * @param {string} encounterName - Encounter type
    * @return {string} - Encounter datetime
    */
    getEncounterObs(encounters, encounterName, conceptId) {
        let obs;
        encounters.forEach((encounter) => {
            if (encounter.type?.name === encounterName) {
                obs = encounter?.obs?.find((o) => o.concept_id == conceptId);
            }
        });
        return obs;
    }
    /**
     * Renders HTML content for a column, sanitized for security
     * @param {any} column - Column definition
     * @param {any} element - Data element to render
     * @return {string} - Formatted HTML or element value
     */
    renderHtmlContent(column, element) {
        return typeof column.formatHtml === 'function' ? this.sanitizer.bypassSecurityTrustHtml(column.formatHtml(element)) : element[column.key];
    }
    /**
     * Returns a string of CSS classes for the column
     * @param {any} column - Column definition
     * @return {string} - Space-separated class names
     */
    getClasses(column) {
        return column.classList ? column.classList.join(" ") : "";
    }
    /**
     * Formats the follow-up date by cleaning up time details
     * @param {string} value - Follow-up date string
     * @return {string} - Formatted date
     */
    processFollowUpDate(value) {
        return value.split(',').length > 1 ? `${value.split(',')[0]}${value.split(',')[1].replace("Time:", "")}` : value;
    }
    ;
    /**
     * Executes the action based on its label (Reschedule or Cancel)
     * @param {any} action - Action object
     * @param {any} element - Element to perform the action on
     */
    handleAction(action, element) {
        if (action.label === 'Reschedule') {
            this.reschedule(element);
        }
        else if (action.label === 'Cancel') {
            this.cancel(element);
        }
    }
    /**
     * Opens a WhatsApp chat with the given phone number
     * @param {MouseEvent} event - The click event to prevent row navigation
     * @param {string} telephone - Phone number for WhatsApp
     */
    openWhatsApp(event, telephone) {
        event.stopPropagation(); // Prevent row navigation
        const whatsappLink = `https://wa.me/${telephone}`;
        window.open(whatsappLink, '_blank', 'noopener,noreferrer');
    }
    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableGridComponent, deps: [{ token: i1.AppointmentService }, { token: i2.VisitService }, { token: i3.CoreService }, { token: i4.ToastrService }, { token: i5.TranslateService }, { token: i6.MindmapService }, { token: i7.DomSanitizer }], target: i0.ÉµÉµFactoryTarget.Component });
    static Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TableGridComponent, selector: "lib-table-grid", inputs: { pluginConfigObs: "pluginConfigObs" }, viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }, { propertyName: "searchElement", first: true, predicate: ["searchInput"], descendants: true, static: true }, { propertyName: "tempPaginator", first: true, predicate: ["tempPaginator"], descendants: true }, { propertyName: "menuTrigger", first: true, predicate: MatMenuTrigger, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"row mt-3\">\r\n    <div class=\"col-md-12 p-0\">\r\n      <div class=\"text-right my-2\">\r\n        <mat-accordion class=\"intel-accordion-con\" multi data-test-id=\"matAccAppointment\">\r\n          <mat-expansion-panel [expanded]=\"true\" data-test-id=\"matExpAppointment\">\r\n            <mat-expansion-panel-header data-test-id=\"matExpHeaderAppointment\">\r\n              <mat-panel-title>\r\n                <div id=\"{{pluginConfigObs.anchorId}}\" class=\"anchor-con\"></div>\r\n                <div class=\"intel-accordion-title\">\r\n                  <img src=\"{{ pluginConfigObs.tableHeaderIcon }}\" alt=\"\" width=\"44px\">\r\n                  <h6 class=\"mb-0 ml-2\">{{ pluginConfigObs.tableHeader | translate }} ({{ visitsLengthCount }})</h6>\r\n                  <mat-icon aria-hidden=\"false\" aria-label=\"help icon\" matTooltip=\"{{ (pluginConfigObs.tooltipLabel | translate) }}\" matTooltipPosition=\"right\" data-test-id=\"matIcoHelpAppointment\">help_outline</mat-icon>\r\n                  <div class=\"ml-auto filter-search-container\">\r\n                    <button *ngIf=\"pluginConfigObs.filterObs.filterFlag\" class=\"mat-stroked-button\"[matMenuTriggerFor]=\"filterMenu1\" class=\"filter-btn\" (click)=\"$event.stopPropagation();\">\r\n                      <img src=\"{{pluginConfigObs.filterObs.filterIcon}}\" alt=\"\"> {{( pluginConfigObs.filterObs.filterLabel| translate)}}\r\n                    </button>\r\n                    <mat-menu #filterMenu1=\"matMenu\" class=\"custom-menu\" [hasBackdrop]=\"true\" xPosition=\"before\">\r\n                      <div class=\"toggle-buttons\">\r\n                        <button class=\"mat-focus-indicator mat-button mat-button-base\" class=\"mat-focus-indicator mat-button mat-button-base\" mat-button [class.active]=\"mode === 'date'\" (click)=\"setMode('date'); $event.stopPropagation(); resetDate(true)\"><span class=\"mat-button-wrapper\"><span class=\"mat-button-wrapper\">{{'Date' | translate}}</span></span></button>\r\n                        <button class=\"mat-focus-indicator mat-button mat-button-base\" class=\"mat-focus-indicator mat-button mat-button-base\" mat-button [class.active]=\"mode === 'range'\" (click)=\"setMode('range'); $event.stopPropagation(); resetDate(true)\"><span class=\"mat-button-wrapper\"><span class=\"mat-button-wrapper\">{{'Range' | translate}}</span></span></button>\r\n                      </div>\r\n                      <div *ngIf=\"mode === 'date'\" class=\"date-view\" (click)=\"$event.stopPropagation()\">\r\n                        <form [formGroup]=\"filteredDateAndRangeForm\">\r\n                          <div class=\"form-date\">\r\n                            <div class=\"input-date\">\r\n                              <label class=\"label-text\">{{ 'Select date' | translate}}</label>\r\n                              <div class=\"input-wrapper\">\r\n                                <input type=\"text\" class=\"form-control\" [max]=\"maxDate\" formControlName=\"date\" [matDatepicker]=\"dobdp\" placeholder=\"{{'Select date' | translate}}\" aria-label=\"Date\" aria-describedby=\"basic-addon1\" readonly data-test-id=\"etDate\"/>\r\n                                <mat-datepicker #dobdp></mat-datepicker>\r\n                                <mat-datepicker-toggle matSuffix [for]=\"dobdp\" data-test-id=\"dpDate\" class=\"datepicker-icon\">\r\n                                  <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                                </mat-datepicker-toggle>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </form>\r\n                        </div>\r\n                        <div *ngIf=\"mode === 'range'\" class=\"range-view\" (click)=\" $event.stopPropagation()\">\r\n                          <form [formGroup]=\"filteredDateAndRangeForm\">\r\n                            <div class=\"form-date\">\r\n                              <div class=\"input-date\">\r\n                                <label class=\"label-text\">{{ 'Start date' | translate }}</label>\r\n                                <div class=\"input-wrapper\">\r\n                                  <input type=\"text\" class=\"form-control\" [max]=\"maxDate\" formControlName=\"startDate\" [matDatepicker]=\"picker1\" placeholder=\"{{'Select start date'|translate}}\" aria-label=\"Start date\" aria-describedby=\"basic-addon1\" readonly data-test-id=\"etSelStartDate\">\r\n                                  <mat-datepicker #picker1></mat-datepicker>\r\n                                  <mat-datepicker-toggle matSuffix [for]=\"picker1\" class=\"datepicker-icon\">\r\n                                    <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                                  </mat-datepicker-toggle>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"form-date\">\r\n                              <div class=\"input-date\">\r\n                                <label class=\"label-text\">{{ 'End date' | translate }}</label>\r\n                                <div class=\"input-wrapper\">\r\n                                  <input type=\"text\" class=\"form-control\" [max]=\"maxDate\" formControlName=\"endDate\" [matDatepicker]=\"picker2\" placeholder=\"{{'Select end date'|translate}}\" aria-label=\"End date\" aria-describedby=\"basic-addon2\" readonly data-test-id=\"etSelEndDate\">\r\n                                  <mat-datepicker #picker2></mat-datepicker>\r\n                                  <mat-datepicker-toggle matSuffix [for]=\"picker2\" class=\"datepicker-icon\">\r\n                                    <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                                  </mat-datepicker-toggle>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                      <div class=\"action-buttons\">\r\n                        <button mat-button class=\"mat-focus-indicator reset-btn mat-button mat-button-base\" (click)=\"resetDate();\"><span class=\"mat-button-wrapper\">{{ 'Reset'| translate }}</span></button>\r\n                        <button mat-button class=\"mat-focus-indicator apply-btn mat-button mat-button-base\" (click)=\"applyDateOrRangeFilter(pluginConfigObs.filterObs.filterDateField)\"><span class=\"mat-button-wrapper\">{{ 'Apply'| translate }}</span></button>\r\n                      </div>\r\n                    </mat-menu>\r\n                    <div class=\"input-group search-bar ml-auto\" (click)=\"$event.stopPropagation();\">\r\n                      <input type=\"text\" #searchInput class=\"form-control\" placeholder=\"{{ pluginConfigObs.searchPlaceHolder | translate }}\" aria-label=\"search1\" aria-describedby=\"basic-addon1\" (keyup)=\"applyFilter($event)\" (keydown.Space)=\"$event.stopPropagation()\" (keydown.Enter)=\"$event.stopPropagation()\" data-test-id=\"etSearchAppointmentDashboard\">\r\n                      <div class=\"input-group-append\">\r\n                        <span class=\"input-group-text\" id=\"basic-addon1\"  *ngIf=\"!isFilterApplied\">\r\n                          <img src=\"assets/svgs/search-icon.svg\" alt=\"\" width=\"20px\" height=\"20px\">\r\n                        </span>\r\n                        <button data-test-id=\"btnResetApSerach\"  class=\"btnResetApSerach\" class=\"btnResetApSerach\" class=\"mat-icon-button\" aria-label=\"Reset appointment search\"  (click)=\"clearFilter()\"  *ngIf=\"isFilterApplied\">\r\n                          <mat-icon class=\"ml-0\" style=\"line-height: normal;\">close</mat-icon>\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <div class=\"mat-elevation-z8\">\r\n              <table mat-table [dataSource]=\"dataSource\">\r\n\r\n                <ng-container *ngFor=\"let column of displayedAppointmentColumns\" [matColumnDef]=\"column.key\">\r\n                  <th mat-header-cell *matHeaderCellDef>{{ column.label | translate }}</th>\r\n\r\n                  <td mat-cell *matCellDef=\"let element; let j = index;\" [attr.data-test-id]=\"'td' + j\">\r\n                    <ng-container *ngIf=\"column.key\">\r\n                      <div class=\"float-left\" [innerHTML]=\"renderHtmlContent(column, element)\" [ngClass]=\"getClasses(column)\"></div>\r\n                    </ng-container>\r\n\r\n                    <!-- Starts In Column -->\r\n                    <ng-container *ngIf=\"column.key === 'telephone' && element.telephone\">\r\n                      <a (click)=\"openWhatsApp($event, element.telephone)\" class=\"float-left icon-btn m-0\" [attr.data-test-id]=\"'linkPatientWhatsApp' + j\">\r\n                        <img src=\"assets/svgs/whatsapp-green.svg\" alt=\"WhatsApp\" />\r\n                      </a>\r\n                    </ng-container>\r\n\r\n                    <!-- Actions In Column -->\r\n                    <ng-container *ngIf=\"column.key === 'actions'\">\r\n                      <div class=\"actions-btn-wrap d-flex align-items-center\">\r\n                        <button\r\n                          *ngFor=\"let action of column.actionButtons\"\r\n                          [ngStyle]=\"{\r\n                            color: action.style?.color,\r\n                            backgroundColor: action.style?.backgroundColor\r\n                          }\"\r\n                          class=\"action-btn mr-2\"\r\n                          type=\"button\"\r\n                          (click)=\"$event.stopPropagation(); handleAction(action, element)\"\r\n                        >\r\n                          {{ action.label | translate }}\r\n                        </button>\r\n                      </div>\r\n                    </ng-container>\r\n                  </td>\r\n                </ng-container>\r\n    \r\n\r\n                <!-- No Data Row -->\r\n                <tr class=\"mat-row\" *matNoDataRow>\r\n                  <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumns.length\">\r\n                    {{ pluginConfigObs.noRecordFound | translate }}\r\n                  </td>\r\n                </tr>\r\n\r\n                <!-- Row Definitions -->\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; let x = index; columns: displayedColumns;\" [attr.data-test-id]=\"'tr' + x\" [routerLink]=\"['/dashboard/visit-summary', row.uuid]\"></tr>\r\n                \r\n              </table>\r\n              <mat-paginator #tempPaginator hidePageSize [pageSizeOptions]=\"[5, 10, 20]\" aria-label=\"Select page of periodic elements\"></mat-paginator>\r\n            </div>\r\n          </mat-expansion-panel>\r\n        </mat-accordion>\r\n      </div>\r\n    </div>\r\n</div>\r\n", styles: [".mat-elevation-z8{box-shadow:none;width:100%;overflow-x:auto}table{width:100%;font-family:DM Sans}th.mat-header-cell{border:none;font-size:14px!important;font-weight:700;color:var(--color-gray);height:21px}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{border:none;min-width:60px;white-space:nowrap;padding-right:24px}th.mat-header-cell span.alert-danger,td.mat-cell span.alert-danger,td.mat-footer-cell span.alert-danger{color:var(--color-red);font-weight:700;background:transparent;border:none}th.mat-header-cell span.alert-success,td.mat-cell span.alert-success,td.mat-footer-cell span.alert-success{color:var(--color-green);font-weight:700;background:transparent;border:none}td.mat-cell{font-size:16px}tr.mat-row,tr.mat-footer-row{height:88px;border-radius:8px;cursor:pointer}tr.mat-row.upcoming{background:#e6fff3!important}tr.mat-row:nth-child(odd){background:#f7f7fa}td:first-child,th:first-child{border-radius:8px 0 0 8px}td:last-child,th:last-child{border-radius:0 8px 8px 0}.actions-btn-wrap .action-btn{outline:none;border:none;height:36px;min-width:102px;padding:6px 8px;background:#fff;border-radius:4px;color:var(--color-black);font-family:DM Sans;font-size:16px}.actions-btn-wrap .blue-btn{background:var(--color-lightGray);color:var(--color-darkBlue)}.actions-btn-wrap .pink-btn{background:var(--color-lightPink);color:var(--color-red)}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header.mat-expanded .input-group{display:flex}.input-group{background:var(--color-white);border:1px solid rgba(127,123,146,.5);border-radius:6px;height:46px;align-items:center;max-width:60vw;width:300px;display:none}.input-group .input-group-text{background:none;border:none;cursor:default}.input-group .form-control{border:none;outline:none;background:transparent;font-size:16px;line-height:150%;padding-left:16px}.input-group .form-control:focus{box-shadow:none}.intel-accordion-con .mat-expansion-panel{background:#fff;box-shadow:0 4px 24px #1f1c3a14;border-radius:20px!important;padding:24px;margin-bottom:24px}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header{padding:0}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header .mat-content{align-items:center}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:48px}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header:hover{background:transparent!important}.intel-accordion-con .mat-expansion-panel .intel-accordion-title{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;flex-wrap:wrap;width:100%}.intel-accordion-con .mat-expansion-panel .intel-accordion-title .mat-icon{height:20px;width:20px;font-size:20px;color:#461d90;margin-left:8px}.intel-accordion-con .mat-expansion-panel .intel-accordion-title h6{font-size:18px;font-weight:700;color:#000}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body{padding:0;margin-top:24px;position:relative}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body:after{content:\"\";position:absolute;top:0;height:1px;left:0;right:0;background:#efe8ff}.anchor-con{position:absolute;top:-120px;left:0}@media (max-width: 768px){.input-group{width:100%;max-width:100%;margin:10px 0}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header,.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:-moz-fit-content;height:fit-content}.info-icon{display:none}.anchor-con{top:-100px}}.matIconButton{border:none;background:transparent}::ng-deep .custom-menu{background:var(--color-white);border-radius:8px!important;padding:16px;width:352px;box-shadow:0 4px 8px #7f7b9229}.mat-expansion-panel.mat-expanded .mat-expansion-panel-header .filter-btn{display:flex!important}.btnResetApSerach{display:none}.filter-btn{background:none;align-items:center;border:1px solid rgba(127,123,146,.5);border-radius:6px;color:#2e1e91;font-weight:500;padding:4px 12px;white-space:nowrap;height:46px;display:none;gap:4px}.toggle-buttons{display:flex;justify-content:space-between;margin-bottom:16px;gap:16px}button.mat-button,.action-buttons button.mat-button{flex:1;color:#2e1e91;background:#fff;border-radius:8px;font-family:DM Sans;font-size:14px;font-weight:500;border:1.33px solid #EFE8FF}.action-buttons button.mat-button.reset-btn{font-size:12px;font-weight:700;margin:0 0 0 20px;width:96px}.action-buttons button.mat-button.apply-btn{color:#fff;background:var(--color-darkBlue);font-size:12px;font-weight:700;width:96px}button.mat-button.active{background:#efe8ff;color:#2e1e91}button.mat-button .reset-btn{color:var(--color-darkBlue)}.action-buttons{display:flex;justify-content:space-between;gap:16px}.reset-btn{color:var(--color-darkBlue);background:#f5f5f5;border-radius:8px}.filter-search-container{display:flex;align-items:center;gap:1rem}.form-date{margin-bottom:16px}.input-wrapper{position:relative;display:flex;align-items:center}.input-wrapper .form-control{width:100%;padding-right:40px;border:1px solid rgba(178,175,190,.2);background:transparent;border-radius:8px;height:48px;font-size:16px;color:var(--color-darkestBlue)}.datepicker-icon{position:absolute;right:4px;top:50%;transform:translateY(-50%);cursor:pointer;background:transparent;border:none}.form-control:focus{box-shadow:none}.label-text{font-size:14px;margin-bottom:8px;color:#7f7b92}.userImage{width:32px;height:32px;border-radius:50%}.red-pill{display:flex;flex-direction:row;align-items:center;background:#ffe8e8;border-radius:4px;height:32px;color:#ea315b;padding:4px 6px;width:-moz-fit-content;width:fit-content}.left{text-align:left}.chip{display:flex;flex-direction:row;align-items:center;border-radius:4px;height:32px;padding:4px 6px;width:-moz-fit-content;width:fit-content}.chip.green{color:#0fd197}.chip.blue{color:#2e1e91}.chip-item-blue{background:var(--color-lightGray)}.chip-item-green{background:#e6fff3}\n"], dependencies: [{ kind: "directive", type: i8.RouterLink, selector: "[routerLink]" }, { kind: "directive", type: i9.NgClass, selector: "[ngClass]" }, { kind: "directive", type: i9.NgForOf, selector: "[ngFor][ngForOf]" }, { kind: "directive", type: i9.NgIf, selector: "[ngIf]" }, { kind: "directive", type: i9.NgStyle, selector: "[ngStyle]" }, { kind: "component", type: i10.MatPaginator, selector: "mat-paginator", outputs: ["page"], exportAs: ["matPaginator"] }, { kind: "directive", type: i11.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i12.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]" }, { kind: "directive", type: i13.MatAccordion, selector: "mat-accordion", exportAs: ["matAccordion"] }, { kind: "component", type: i13.MatExpansionPanel, selector: "mat-expansion-panel", outputs: ["afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { kind: "component", type: i13.MatExpansionPanelHeader, selector: "mat-expansion-panel-header" }, { kind: "directive", type: i13.MatExpansionPanelTitle, selector: "mat-panel-title" }, { kind: "component", type: i14.MatMenu, selector: "mat-menu", outputs: ["closed", "close"], exportAs: ["matMenu"] }, { kind: "directive", type: i14.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", outputs: ["menuOpened", "onMenuOpen", "menuClosed", "onMenuClose"], exportAs: ["matMenuTrigger"] }, { kind: "component", type: i15.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i15.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i15.MatHeaderRowDef, selector: "[matHeaderRowDef]" }, { kind: "directive", type: i15.MatColumnDef, selector: "[matColumnDef]" }, { kind: "directive", type: i15.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i15.MatRowDef, selector: "[matRowDef]" }, { kind: "directive", type: i15.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i15.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i15.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i15.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "directive", type: i15.MatNoDataRow, selector: "ng-template[matNoDataRow]" }, { kind: "component", type: i16.MatIcon, selector: "mat-icon", exportAs: ["matIcon"] }, { kind: "component", type: i17.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { kind: "directive", type: i17.MatDatepickerInput, selector: "input[matDatepicker]", exportAs: ["matDatepickerInput"] }, { kind: "component", type: i17.MatDatepickerToggle, selector: "mat-datepicker-toggle", exportAs: ["matDatepickerToggle"] }, { kind: "directive", type: i17.MatDatepickerToggleIcon, selector: "[matDatepickerToggleIcon]" }, { kind: "directive", type: i18.ÉµNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i18.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i18.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i18.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i18.FormGroupDirective, selector: "[formGroup]", outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i18.FormControlName, selector: "[formControlName]", outputs: ["ngModelChange"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }] });
}
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-table-grid', template: "<div class=\"row mt-3\">\r\n    <div class=\"col-md-12 p-0\">\r\n      <div class=\"text-right my-2\">\r\n        <mat-accordion class=\"intel-accordion-con\" multi data-test-id=\"matAccAppointment\">\r\n          <mat-expansion-panel [expanded]=\"true\" data-test-id=\"matExpAppointment\">\r\n            <mat-expansion-panel-header data-test-id=\"matExpHeaderAppointment\">\r\n              <mat-panel-title>\r\n                <div id=\"{{pluginConfigObs.anchorId}}\" class=\"anchor-con\"></div>\r\n                <div class=\"intel-accordion-title\">\r\n                  <img src=\"{{ pluginConfigObs.tableHeaderIcon }}\" alt=\"\" width=\"44px\">\r\n                  <h6 class=\"mb-0 ml-2\">{{ pluginConfigObs.tableHeader | translate }} ({{ visitsLengthCount }})</h6>\r\n                  <mat-icon aria-hidden=\"false\" aria-label=\"help icon\" matTooltip=\"{{ (pluginConfigObs.tooltipLabel | translate) }}\" matTooltipPosition=\"right\" data-test-id=\"matIcoHelpAppointment\">help_outline</mat-icon>\r\n                  <div class=\"ml-auto filter-search-container\">\r\n                    <button *ngIf=\"pluginConfigObs.filterObs.filterFlag\" class=\"mat-stroked-button\"[matMenuTriggerFor]=\"filterMenu1\" class=\"filter-btn\" (click)=\"$event.stopPropagation();\">\r\n                      <img src=\"{{pluginConfigObs.filterObs.filterIcon}}\" alt=\"\"> {{( pluginConfigObs.filterObs.filterLabel| translate)}}\r\n                    </button>\r\n                    <mat-menu #filterMenu1=\"matMenu\" class=\"custom-menu\" [hasBackdrop]=\"true\" xPosition=\"before\">\r\n                      <div class=\"toggle-buttons\">\r\n                        <button class=\"mat-focus-indicator mat-button mat-button-base\" class=\"mat-focus-indicator mat-button mat-button-base\" mat-button [class.active]=\"mode === 'date'\" (click)=\"setMode('date'); $event.stopPropagation(); resetDate(true)\"><span class=\"mat-button-wrapper\"><span class=\"mat-button-wrapper\">{{'Date' | translate}}</span></span></button>\r\n                        <button class=\"mat-focus-indicator mat-button mat-button-base\" class=\"mat-focus-indicator mat-button mat-button-base\" mat-button [class.active]=\"mode === 'range'\" (click)=\"setMode('range'); $event.stopPropagation(); resetDate(true)\"><span class=\"mat-button-wrapper\"><span class=\"mat-button-wrapper\">{{'Range' | translate}}</span></span></button>\r\n                      </div>\r\n                      <div *ngIf=\"mode === 'date'\" class=\"date-view\" (click)=\"$event.stopPropagation()\">\r\n                        <form [formGroup]=\"filteredDateAndRangeForm\">\r\n                          <div class=\"form-date\">\r\n                            <div class=\"input-date\">\r\n                              <label class=\"label-text\">{{ 'Select date' | translate}}</label>\r\n                              <div class=\"input-wrapper\">\r\n                                <input type=\"text\" class=\"form-control\" [max]=\"maxDate\" formControlName=\"date\" [matDatepicker]=\"dobdp\" placeholder=\"{{'Select date' | translate}}\" aria-label=\"Date\" aria-describedby=\"basic-addon1\" readonly data-test-id=\"etDate\"/>\r\n                                <mat-datepicker #dobdp></mat-datepicker>\r\n                                <mat-datepicker-toggle matSuffix [for]=\"dobdp\" data-test-id=\"dpDate\" class=\"datepicker-icon\">\r\n                                  <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                                </mat-datepicker-toggle>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </form>\r\n                        </div>\r\n                        <div *ngIf=\"mode === 'range'\" class=\"range-view\" (click)=\" $event.stopPropagation()\">\r\n                          <form [formGroup]=\"filteredDateAndRangeForm\">\r\n                            <div class=\"form-date\">\r\n                              <div class=\"input-date\">\r\n                                <label class=\"label-text\">{{ 'Start date' | translate }}</label>\r\n                                <div class=\"input-wrapper\">\r\n                                  <input type=\"text\" class=\"form-control\" [max]=\"maxDate\" formControlName=\"startDate\" [matDatepicker]=\"picker1\" placeholder=\"{{'Select start date'|translate}}\" aria-label=\"Start date\" aria-describedby=\"basic-addon1\" readonly data-test-id=\"etSelStartDate\">\r\n                                  <mat-datepicker #picker1></mat-datepicker>\r\n                                  <mat-datepicker-toggle matSuffix [for]=\"picker1\" class=\"datepicker-icon\">\r\n                                    <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                                  </mat-datepicker-toggle>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"form-date\">\r\n                              <div class=\"input-date\">\r\n                                <label class=\"label-text\">{{ 'End date' | translate }}</label>\r\n                                <div class=\"input-wrapper\">\r\n                                  <input type=\"text\" class=\"form-control\" [max]=\"maxDate\" formControlName=\"endDate\" [matDatepicker]=\"picker2\" placeholder=\"{{'Select end date'|translate}}\" aria-label=\"End date\" aria-describedby=\"basic-addon2\" readonly data-test-id=\"etSelEndDate\">\r\n                                  <mat-datepicker #picker2></mat-datepicker>\r\n                                  <mat-datepicker-toggle matSuffix [for]=\"picker2\" class=\"datepicker-icon\">\r\n                                    <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                                  </mat-datepicker-toggle>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                      <div class=\"action-buttons\">\r\n                        <button mat-button class=\"mat-focus-indicator reset-btn mat-button mat-button-base\" (click)=\"resetDate();\"><span class=\"mat-button-wrapper\">{{ 'Reset'| translate }}</span></button>\r\n                        <button mat-button class=\"mat-focus-indicator apply-btn mat-button mat-button-base\" (click)=\"applyDateOrRangeFilter(pluginConfigObs.filterObs.filterDateField)\"><span class=\"mat-button-wrapper\">{{ 'Apply'| translate }}</span></button>\r\n                      </div>\r\n                    </mat-menu>\r\n                    <div class=\"input-group search-bar ml-auto\" (click)=\"$event.stopPropagation();\">\r\n                      <input type=\"text\" #searchInput class=\"form-control\" placeholder=\"{{ pluginConfigObs.searchPlaceHolder | translate }}\" aria-label=\"search1\" aria-describedby=\"basic-addon1\" (keyup)=\"applyFilter($event)\" (keydown.Space)=\"$event.stopPropagation()\" (keydown.Enter)=\"$event.stopPropagation()\" data-test-id=\"etSearchAppointmentDashboard\">\r\n                      <div class=\"input-group-append\">\r\n                        <span class=\"input-group-text\" id=\"basic-addon1\"  *ngIf=\"!isFilterApplied\">\r\n                          <img src=\"assets/svgs/search-icon.svg\" alt=\"\" width=\"20px\" height=\"20px\">\r\n                        </span>\r\n                        <button data-test-id=\"btnResetApSerach\"  class=\"btnResetApSerach\" class=\"btnResetApSerach\" class=\"mat-icon-button\" aria-label=\"Reset appointment search\"  (click)=\"clearFilter()\"  *ngIf=\"isFilterApplied\">\r\n                          <mat-icon class=\"ml-0\" style=\"line-height: normal;\">close</mat-icon>\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <div class=\"mat-elevation-z8\">\r\n              <table mat-table [dataSource]=\"dataSource\">\r\n\r\n                <ng-container *ngFor=\"let column of displayedAppointmentColumns\" [matColumnDef]=\"column.key\">\r\n                  <th mat-header-cell *matHeaderCellDef>{{ column.label | translate }}</th>\r\n\r\n                  <td mat-cell *matCellDef=\"let element; let j = index;\" [attr.data-test-id]=\"'td' + j\">\r\n                    <ng-container *ngIf=\"column.key\">\r\n                      <div class=\"float-left\" [innerHTML]=\"renderHtmlContent(column, element)\" [ngClass]=\"getClasses(column)\"></div>\r\n                    </ng-container>\r\n\r\n                    <!-- Starts In Column -->\r\n                    <ng-container *ngIf=\"column.key === 'telephone' && element.telephone\">\r\n                      <a (click)=\"openWhatsApp($event, element.telephone)\" class=\"float-left icon-btn m-0\" [attr.data-test-id]=\"'linkPatientWhatsApp' + j\">\r\n                        <img src=\"assets/svgs/whatsapp-green.svg\" alt=\"WhatsApp\" />\r\n                      </a>\r\n                    </ng-container>\r\n\r\n                    <!-- Actions In Column -->\r\n                    <ng-container *ngIf=\"column.key === 'actions'\">\r\n                      <div class=\"actions-btn-wrap d-flex align-items-center\">\r\n                        <button\r\n                          *ngFor=\"let action of column.actionButtons\"\r\n                          [ngStyle]=\"{\r\n                            color: action.style?.color,\r\n                            backgroundColor: action.style?.backgroundColor\r\n                          }\"\r\n                          class=\"action-btn mr-2\"\r\n                          type=\"button\"\r\n                          (click)=\"$event.stopPropagation(); handleAction(action, element)\"\r\n                        >\r\n                          {{ action.label | translate }}\r\n                        </button>\r\n                      </div>\r\n                    </ng-container>\r\n                  </td>\r\n                </ng-container>\r\n    \r\n\r\n                <!-- No Data Row -->\r\n                <tr class=\"mat-row\" *matNoDataRow>\r\n                  <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumns.length\">\r\n                    {{ pluginConfigObs.noRecordFound | translate }}\r\n                  </td>\r\n                </tr>\r\n\r\n                <!-- Row Definitions -->\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; let x = index; columns: displayedColumns;\" [attr.data-test-id]=\"'tr' + x\" [routerLink]=\"['/dashboard/visit-summary', row.uuid]\"></tr>\r\n                \r\n              </table>\r\n              <mat-paginator #tempPaginator hidePageSize [pageSizeOptions]=\"[5, 10, 20]\" aria-label=\"Select page of periodic elements\"></mat-paginator>\r\n            </div>\r\n          </mat-expansion-panel>\r\n        </mat-accordion>\r\n      </div>\r\n    </div>\r\n</div>\r\n", styles: [".mat-elevation-z8{box-shadow:none;width:100%;overflow-x:auto}table{width:100%;font-family:DM Sans}th.mat-header-cell{border:none;font-size:14px!important;font-weight:700;color:var(--color-gray);height:21px}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{border:none;min-width:60px;white-space:nowrap;padding-right:24px}th.mat-header-cell span.alert-danger,td.mat-cell span.alert-danger,td.mat-footer-cell span.alert-danger{color:var(--color-red);font-weight:700;background:transparent;border:none}th.mat-header-cell span.alert-success,td.mat-cell span.alert-success,td.mat-footer-cell span.alert-success{color:var(--color-green);font-weight:700;background:transparent;border:none}td.mat-cell{font-size:16px}tr.mat-row,tr.mat-footer-row{height:88px;border-radius:8px;cursor:pointer}tr.mat-row.upcoming{background:#e6fff3!important}tr.mat-row:nth-child(odd){background:#f7f7fa}td:first-child,th:first-child{border-radius:8px 0 0 8px}td:last-child,th:last-child{border-radius:0 8px 8px 0}.actions-btn-wrap .action-btn{outline:none;border:none;height:36px;min-width:102px;padding:6px 8px;background:#fff;border-radius:4px;color:var(--color-black);font-family:DM Sans;font-size:16px}.actions-btn-wrap .blue-btn{background:var(--color-lightGray);color:var(--color-darkBlue)}.actions-btn-wrap .pink-btn{background:var(--color-lightPink);color:var(--color-red)}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header.mat-expanded .input-group{display:flex}.input-group{background:var(--color-white);border:1px solid rgba(127,123,146,.5);border-radius:6px;height:46px;align-items:center;max-width:60vw;width:300px;display:none}.input-group .input-group-text{background:none;border:none;cursor:default}.input-group .form-control{border:none;outline:none;background:transparent;font-size:16px;line-height:150%;padding-left:16px}.input-group .form-control:focus{box-shadow:none}.intel-accordion-con .mat-expansion-panel{background:#fff;box-shadow:0 4px 24px #1f1c3a14;border-radius:20px!important;padding:24px;margin-bottom:24px}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header{padding:0}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header .mat-content{align-items:center}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:48px}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header:hover{background:transparent!important}.intel-accordion-con .mat-expansion-panel .intel-accordion-title{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;flex-wrap:wrap;width:100%}.intel-accordion-con .mat-expansion-panel .intel-accordion-title .mat-icon{height:20px;width:20px;font-size:20px;color:#461d90;margin-left:8px}.intel-accordion-con .mat-expansion-panel .intel-accordion-title h6{font-size:18px;font-weight:700;color:#000}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body{padding:0;margin-top:24px;position:relative}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body:after{content:\"\";position:absolute;top:0;height:1px;left:0;right:0;background:#efe8ff}.anchor-con{position:absolute;top:-120px;left:0}@media (max-width: 768px){.input-group{width:100%;max-width:100%;margin:10px 0}.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header,.intel-accordion-con .mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:-moz-fit-content;height:fit-content}.info-icon{display:none}.anchor-con{top:-100px}}.matIconButton{border:none;background:transparent}::ng-deep .custom-menu{background:var(--color-white);border-radius:8px!important;padding:16px;width:352px;box-shadow:0 4px 8px #7f7b9229}.mat-expansion-panel.mat-expanded .mat-expansion-panel-header .filter-btn{display:flex!important}.btnResetApSerach{display:none}.filter-btn{background:none;align-items:center;border:1px solid rgba(127,123,146,.5);border-radius:6px;color:#2e1e91;font-weight:500;padding:4px 12px;white-space:nowrap;height:46px;display:none;gap:4px}.toggle-buttons{display:flex;justify-content:space-between;margin-bottom:16px;gap:16px}button.mat-button,.action-buttons button.mat-button{flex:1;color:#2e1e91;background:#fff;border-radius:8px;font-family:DM Sans;font-size:14px;font-weight:500;border:1.33px solid #EFE8FF}.action-buttons button.mat-button.reset-btn{font-size:12px;font-weight:700;margin:0 0 0 20px;width:96px}.action-buttons button.mat-button.apply-btn{color:#fff;background:var(--color-darkBlue);font-size:12px;font-weight:700;width:96px}button.mat-button.active{background:#efe8ff;color:#2e1e91}button.mat-button .reset-btn{color:var(--color-darkBlue)}.action-buttons{display:flex;justify-content:space-between;gap:16px}.reset-btn{color:var(--color-darkBlue);background:#f5f5f5;border-radius:8px}.filter-search-container{display:flex;align-items:center;gap:1rem}.form-date{margin-bottom:16px}.input-wrapper{position:relative;display:flex;align-items:center}.input-wrapper .form-control{width:100%;padding-right:40px;border:1px solid rgba(178,175,190,.2);background:transparent;border-radius:8px;height:48px;font-size:16px;color:var(--color-darkestBlue)}.datepicker-icon{position:absolute;right:4px;top:50%;transform:translateY(-50%);cursor:pointer;background:transparent;border:none}.form-control:focus{box-shadow:none}.label-text{font-size:14px;margin-bottom:8px;color:#7f7b92}.userImage{width:32px;height:32px;border-radius:50%}.red-pill{display:flex;flex-direction:row;align-items:center;background:#ffe8e8;border-radius:4px;height:32px;color:#ea315b;padding:4px 6px;width:-moz-fit-content;width:fit-content}.left{text-align:left}.chip{display:flex;flex-direction:row;align-items:center;border-radius:4px;height:32px;padding:4px 6px;width:-moz-fit-content;width:fit-content}.chip.green{color:#0fd197}.chip.blue{color:#2e1e91}.chip-item-blue{background:var(--color-lightGray)}.chip-item-green{background:#e6fff3}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.AppointmentService }, { type: i2.VisitService }, { type: i3.CoreService }, { type: i4.ToastrService }, { type: i5.TranslateService }, { type: i6.MindmapService }, { type: i7.DomSanitizer }]; }, propDecorators: { pluginConfigObs: [{
                type: Input
            }], paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }], searchElement: [{
                type: ViewChild,
                args: ['searchInput', { static: true }]
            }], tempPaginator: [{
                type: ViewChild,
                args: ['tempPaginator']
            }], menuTrigger: [{
                type: ViewChild,
                args: [MatMenuTrigger]
            }] } });
//# sourceMappingURL=data:application/json;base64,