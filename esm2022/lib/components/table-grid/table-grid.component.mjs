import { Component, ElementRef, ViewChild, Input, ChangeDetectionStrategy, Inject, Output, EventEmitter } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { AppointmentService } from '../../services/appointment.service';
import { VisitService } from '../../services/visit.service';
import moment from 'moment';
import { CoreService } from '../../services/core.service';
import { ToastrService } from 'ngx-toastr';
import { TranslateService } from '@ngx-translate/core';
import { getCacheData, checkIfDateOldThanOneDay } from '../../utils/utility-functions';
import { doctorDetails, languages, visitTypes } from '../../config/constant';
import { MindmapService } from '../../services/mindmap.service';
import { AppConfigService } from '../../services/app-config.service';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { MatMenuTrigger } from '@angular/material/menu';
import { DomSanitizer } from '@angular/platform-browser';
import { NgxRolesService } from 'ngx-permissions';
import { MatSort } from '@angular/material/sort';
import * as i0 from "@angular/core";
import * as i1 from "../../services/appointment.service";
import * as i2 from "../../services/visit.service";
import * as i3 from "../../services/core.service";
import * as i4 from "ngx-toastr";
import * as i5 from "@ngx-translate/core";
import * as i6 from "../../services/mindmap.service";
import * as i7 from "@angular/platform-browser";
import * as i8 from "../../services/app-config.service";
import * as i9 from "ngx-permissions";
import * as i10 from "@angular/router";
import * as i11 from "@angular/common";
import * as i12 from "@angular/material/paginator";
import * as i13 from "@angular/material/tooltip";
import * as i14 from "@angular/material/form-field";
import * as i15 from "@angular/material/expansion";
import * as i16 from "@angular/material/menu";
import * as i17 from "@angular/material/table";
import * as i18 from "@angular/material/icon";
import * as i19 from "@angular/material/datepicker";
import * as i20 from "@angular/forms";
import * as i21 from "@angular/material/sort";
import * as i22 from "../../core/directives/default-image.directive";
export class TableGridComponent {
    appointmentService;
    visitService;
    coreService;
    toastr;
    translateService;
    mindmapService;
    sanitizer;
    appConfigService;
    rolesService;
    pluginConfigObs;
    displayedAppointmentColumns = [];
    displayedColumns = [];
    dataSource = new MatTableDataSource();
    patientRegFields = [];
    isMCCUser = false;
    pageSizeOptions = [5, 10, 20];
    paginator;
    searchElement;
    filteredDateAndRangeForm;
    tempPaginator;
    menuTrigger;
    tableMatSort;
    panelExpanded = true;
    mode = 'date';
    maxDate;
    appointments = [];
    priorityVisits = [];
    awaitingVisits = [];
    inProgressVisits = [];
    completedVisits = [];
    followUpVisits = [];
    specialization = '';
    visitsCountDate = new EventEmitter();
    visitsLengthCount = 0;
    isFilterApplied = false;
    pvs;
    baseURL;
    isBrandName;
    ngAfterViewInit() {
        this.dataSource.paginator = this.paginator;
        // this.dataSource.sort = this.tableMatSort;
    }
    constructor(appointmentService, visitService, coreService, toastr, translateService, mindmapService, sanitizer, appConfigService, rolesService, environment) {
        this.appointmentService = appointmentService;
        this.visitService = visitService;
        this.coreService = coreService;
        this.toastr = toastr;
        this.translateService = translateService;
        this.mindmapService = mindmapService;
        this.sanitizer = sanitizer;
        this.appConfigService = appConfigService;
        this.rolesService = rolesService;
        this.baseURL = environment.baseURL;
        this.filteredDateAndRangeForm = this.createFilteredDateRangeForm();
        this.isBrandName = environment.brandName;
    }
    /**
     * Creates a filtered date range form with required date fields
     * @return {FormGroup} - The created form group
     */
    createFilteredDateRangeForm() {
        return new FormGroup({
            date: new FormControl('', [Validators.required]),
            startDate: new FormControl(null, Validators.required),
            endDate: new FormControl(null, Validators.required),
        });
    }
    ngOnInit() {
        this.isMCCUser = !!this.rolesService.getRole('ORGANIZATIONAL:MCC');
        this.appConfigService.load().then(() => {
            this.displayedColumns = this.displayedColumns.filter(col => (col !== 'age' || this.checkPatientRegField('Age')));
            Object.keys(this.appConfigService.patient_registration).forEach(obj => {
                this.patientRegFields.push(...this.appConfigService.patient_registration[obj].filter((e) => e.is_enabled).map((e) => e.name));
            });
            this.pvs = { ...this.appConfigService.patient_visit_summary };
            this.pvs.appointment_button = this.pvs.appointment_button;
            this.displayedColumns = this.displayedColumns.filter(col => {
                if (col === 'drName' && !this.isMCCUser)
                    return false;
                if (col === 'age')
                    return this.checkPatientRegField('Age');
                return true;
            });
            if (!this.pvs.awaiting_visits_patient_type_demarcation) {
                this.displayedColumns = this.displayedColumns.filter(col => (col !== 'patient_type'));
            }
        }).catch((error) => {
            console.error('Error loading app config', error);
        });
        this.translateService.use(getCacheData(false, languages.SELECTED_LANGUAGE));
        let provider = getCacheData(true, doctorDetails.PROVIDER);
        if (provider) {
            if (provider.attributes.length) {
                this.specialization = this.getSpecialization(provider.attributes);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Appointment") {
                this.getAppointments();
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Awaiting") {
                this.getAwaitingVisits(1);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Priority") {
                this.getPriorityVisits(1);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "InProgress") {
                this.getInProgressVisits(1);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Completed") {
                this.getCompletedVisits();
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "FollowUp") {
                this.getFollowUpVisit();
            }
        }
        this.maxDate = this.pluginConfigObs.filterObs.filterDateMax;
        if (this.pluginConfigObs.hasOwnProperty("pageSizeOptions")) {
            this.pageSizeOptions = this.pluginConfigObs.pageSizeOptions;
        }
    }
    /**
     * Dynmaic label Display
     * @param changes pluginConfigObs
     */
    ngOnChanges(changes) {
        if (changes["pluginConfigObs"] && changes["pluginConfigObs"].currentValue) {
            this.displayedAppointmentColumns = [...changes["pluginConfigObs"].currentValue?.tableColumns];
            this.displayedColumns = this.displayedAppointmentColumns.map(column => column.key);
        }
        if ((!changes['pluginConfigObs'].firstChange) && this.pluginConfigObs.pluginConfigObsFlag == "Appointment" && changes["pluginConfigObs"].currentValue?.tableHeader !== changes["pluginConfigObs"].previousValue?.tableHeader) {
            this.getAppointments();
        }
    }
    /**
    * Retreive the chief complaints for the visit
    * @param {CustomVisitModel} visit - Visit
    * @return {string[]} - Chief complaints array
    */
    getCheifComplaint(visit) {
        let recent = [];
        const encounters = visit.encounters;
        encounters.forEach((encounter) => {
            const display = encounter.type?.name;
            if (display.match(visitTypes.ADULTINITIAL) !== null) {
                const obs = encounter.obs;
                obs.forEach((currentObs) => {
                    if (currentObs.concept_id == 163212) {
                        const currentComplaint = this.visitService.getData2(currentObs)?.value_text.replace(new RegExp('â–º', 'g'), '').split('<b>');
                        for (let i = 1; i < currentComplaint.length; i++) {
                            const obs1 = currentComplaint[i].split('<');
                            if (!obs1[0].match(visitTypes.ASSOCIATED_SYMPTOMS)) {
                                recent.push(obs1[0]);
                            }
                        }
                    }
                });
            }
        });
        return recent;
    }
    /**
    * Check how old the date is from now
    * @param {string} data - Date in string format
    * @return {string} - Returns how old the date is from now
    */
    checkIfDateOldThanOneDay(data) {
        let hours = moment(data).diff(moment(), 'hours');
        let minutes = moment(data).diff(moment(), 'minutes');
        if (hours > 24) {
            return moment(data).format('DD MMM, YYYY hh:mm A');
        }
        ;
        if (hours < 1) {
            if (minutes < 0)
                return `Due : ${moment(data).format('DD MMM, YYYY hh:mm A')}`;
            return `${minutes} minutes`;
        }
        return `${hours} hrs`;
    }
    /**
    * Reschedule appointment
    * @param {AppointmentModel} appointment - Appointment to be rescheduled
    * @return {void}
    */
    reschedule(appointment) {
        const len = appointment.visit.encounters.filter((e) => {
            return (e.type.name == visitTypes.PATIENT_EXIT_SURVEY || e.type.name == visitTypes.VISIT_COMPLETE);
        }).length;
        const isCompleted = Boolean(len);
        if (isCompleted) {
            this.toastr.error(this.translateService.instant("Visit is already completed, it can't be rescheduled."), this.translateService.instant('Rescheduling failed!'));
        }
        else if (appointment.visitStatus == 'Visit In Progress' && this.pluginConfigObs.tableHeader !== "Pending Visits" && this.isBrandName !== 'KCDO') {
            this.toastr.error(this.translateService.instant("Visit is in progress, it can't be rescheduled."), this.translateService.instant('Rescheduling failed!'));
        }
        else {
            this.coreService.openRescheduleAppointmentModal(appointment).subscribe((res) => {
                if (res) {
                    let newSlot = res;
                    this.coreService.openRescheduleAppointmentConfirmModal({ appointment, newSlot }).subscribe((result) => {
                        if (result) {
                            appointment.appointmentId = appointment.id;
                            appointment.slotDate = moment(newSlot.date, "YYYY-MM-DD").format('DD/MM/YYYY');
                            appointment.slotTime = newSlot.slot;
                            this.appointmentService.rescheduleAppointment(appointment).subscribe((res) => {
                                const message = res.message;
                                if (res.status) {
                                    this.mindmapService.notifyHwForRescheduleAppointment(appointment);
                                    this.getAppointments();
                                    this.toastr.success(this.translateService.instant("The appointment has been rescheduled successfully!"), this.translateService.instant('Rescheduling successful!'));
                                }
                                else {
                                    this.toastr.success(message, this.translateService.instant('Rescheduling failed!'));
                                }
                            });
                        }
                    });
                }
            });
        }
    }
    /**
    * Cancel appointment
    * @param {AppointmentModel} appointment - Appointment to be rescheduled
    * @return {void}
    */
    cancel(appointment) {
        if (appointment.visitStatus == 'Visit In Progress' && this.pluginConfigObs.tableHeader !== "Pending Visits") {
            this.toastr.error(this.translateService.instant("Visit is in progress, it can't be cancelled."), this.translateService.instant('Canceling failed!'));
            return;
        }
        this.coreService.openConfirmCancelAppointmentModal(appointment).subscribe((res) => {
            if (res) {
                this.toastr.success(this.translateService.instant('The Appointment has been successfully canceled.'), this.translateService.instant('Canceling successful'));
                this.getAppointments();
            }
        });
    }
    /**
    * Get user uuid from localstorage user
    * @return {string} - User uuid
    */
    get userId() {
        return getCacheData(true, doctorDetails.USER).uuid;
    }
    /**
    * Apply filter on a datasource
    * @param {Event} event - Input's change event
    * @return {void}
    */
    applyFilter(event) {
        const filterValue = event.target.value;
        this.dataSource.filter = filterValue.trim().toLowerCase();
        this.isFilterApplied = true;
    }
    /**
    * Clear filter from a datasource
    * @return {void}
    */
    clearFilter() {
        this.dataSource.filter = null;
        this.searchElement.nativeElement.value = "";
        this.isFilterApplied = false;
    }
    /**
     * Checks if the field is in patient registration fields
     * @param {string} fieldName - The field name
     * @return {boolean} - True if present, else false
     */
    checkPatientRegField(fieldName) {
        return this.patientRegFields.indexOf(fieldName) !== -1;
    }
    /**
    * Returns the WhatsApp link for a given telephone number
    * @param {string} telephoneNumber - The telephone number to generate the link for
    * @return {string} - The WhatsApp link
    */
    getWhatsAppLink(telephoneNumber) {
        return this.visitService.getWhatsappLink(telephoneNumber);
    }
    /**
     * Retrieves the telephone number from the person's attributes
     * @param {AppointmentModel['visit']['person']} person - The person object containing attributes
     * @return {string | undefined} - The person's telephone number or undefined if not found
     */
    getTelephoneNumber(person) {
        return person?.person_attribute.find((v) => v.person_attribute_type_id == 8)?.value;
    }
    /**
     * Closes the menu if it's open
     */
    closeMenu() {
        if (this.menuTrigger) {
            this.menuTrigger.closeMenu();
        }
    }
    /**
     * Sets the mode for the component (either 'date' or 'range')
     * @param {'date' | 'range'} mode - The mode to set
     */
    setMode(mode) {
        this.mode = mode;
    }
    /**
     * Formats a date into 'YYYY-MM-DD' format
     * @param {any} date - The date to format
     * @return {string} - The formatted date
     */
    formatDate(date) {
        const localDate = new Date(date);
        const year = localDate.getFullYear();
        const month = String(localDate.getMonth() + 1).padStart(2, '0');
        const day = String(localDate.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
    /**
     * Converts a relative time string (e.g., "2 hours", "1 day") to a date string
     * @param {string} relativeTime - The relative time string
     * @return {string} - The resulting date in 'YYYY-MM-DD' format
     * @throws {Error} - Throws error for invalid time units
     */
    convertToDate(relativeTime) {
        const now = new Date();
        const [value, unit] = relativeTime.split(' ');
        const amount = parseInt(value, 10);
        if (['hour', 'hours'].includes(unit.toLowerCase()))
            now.setHours(now.getHours() - amount);
        else if (['minute', 'minutes'].includes(unit.toLowerCase()))
            now.setMinutes(now.getMinutes() - amount);
        else if (['day', 'days'].includes(unit.toLowerCase()))
            now.setDate(now.getDate() - amount);
        else
            throw new Error('Invalid time unit. Only "hours", "minutes", or "days" are supported.');
        return now.toISOString().split('T')[0];
    }
    /**
     * Converts a follow-up date string to ISO format
     * @param {string} followUp - The follow-up date string
     * @return {string} - The follow-up date in ISO string format
     */
    convertToISO(followUp) {
        const date = new Date(followUp);
        date.setDate(date.getDate());
        return date.toISOString();
    }
    /**
     * Applies date or range filter to the data source based on selected date(s)
     * @param {string} dateField - The field name for the date to filter
     */
    applyDateOrRangeFilter(dateField) {
        const selectedDate = this.filteredDateAndRangeForm.get('date')?.value;
        const startDate = this.filteredDateAndRangeForm.get('startDate')?.value;
        const endDate = this.filteredDateAndRangeForm.get('endDate')?.value;
        if (selectedDate) {
            const formattedDate = this.formatDate(selectedDate);
            this.dataSource.filterPredicate = (data, filter) => {
                let itemDate;
                if (dateField === "followUp") {
                    itemDate = this.formatDate(this.convertToISO(data.followUp));
                }
                else if (dateField === "slotJsDate") {
                    itemDate = this.formatDate(data[dateField]);
                }
                else {
                    itemDate = data[dateField].includes(',') ? this.formatDate(data[dateField]) : this.convertToDate(data[dateField]);
                }
                return itemDate === filter;
            };
            this.dataSource.filter = formattedDate;
        }
        else if (startDate && endDate) {
            const formattedStartDate = this.formatDate(startDate);
            const formattedEndDate = this.formatDate(endDate);
            this.dataSource.filterPredicate = (data, filter) => {
                let itemDate;
                if (dateField === "followUp") {
                    itemDate = this.formatDate(this.convertToISO(data.followUp));
                }
                else if (dateField === "slotJsDate") {
                    itemDate = this.formatDate(data[dateField]);
                }
                else {
                    itemDate = data[dateField].includes(',') ? this.formatDate(data[dateField]) : this.convertToDate(data[dateField]);
                }
                return itemDate >= formattedStartDate && itemDate <= formattedEndDate;
            };
            this.dataSource.filter = `${formattedStartDate}:${formattedEndDate}`;
        }
        else {
            this.dataSource.filter = '';
        }
        this.tempPaginator.firstPage();
        this.closeMenu();
    }
    /**
     * Resets the date filter form and clears the data source filter
     * @param {boolean} flag - If true, doesn't close the menu
     */
    resetDate(flag = false) {
        this.filteredDateAndRangeForm.reset();
        this.dataSource.filter = '';
        this.dataSource.filterPredicate = (data, filter) => data?.openMrsId.toLowerCase().indexOf(filter) != -1 || data?.patientName.toLowerCase().indexOf(filter) != -1;
        if (!flag) {
            this.closeMenu();
        }
    }
    /**
     * Retrieves a specific attribute data from the person's attributes
     * @param {any} data - The data object containing person attributes
     * @param {string} attributeName - The name of the attribute to retrieve
     * @return {Object | null} - The attribute name and value, or null if not found
     */
    getAttributeData(data, attributeName) {
        if (Array.isArray(data.person_attribute)) {
            const attribute = data.person_attribute.find((attr) => attr.person_attribute_type?.name === attributeName);
            if (attribute) {
                return {
                    name: attribute.person_attribute_type.name,
                    value: attribute.value
                };
            }
        }
        return null;
    }
    /**
    * Get booked appointments for a logged-in doctor in a current year
    * @return {void}
    */
    getAppointments() {
        this.appointments = [];
        let fromDate = moment().startOf('year').format('DD/MM/YYYY');
        let toDate = moment().endOf('year').format('DD/MM/YYYY');
        let pending_visits = this.pluginConfigObs.filter?.hasOwnProperty("pending_visits") ? this.pluginConfigObs.filter?.pending_visits : null;
        if (this.pluginConfigObs?.filter) {
            fromDate = this.pluginConfigObs?.filter?.fromDate;
            toDate = this.pluginConfigObs?.filter?.toDate;
        }
        this.appointmentService.getUserSlots(getCacheData(true, doctorDetails.USER).uuid, fromDate, toDate, this.isMCCUser ? this.specialization : null, pending_visits)
            .subscribe((res) => {
            this.visitsLengthCount = res.data?.length;
            this.emitVisitsCount(this.visitsLengthCount);
            let appointmentsdata = res.data;
            appointmentsdata.forEach((appointment) => {
                if (appointment.status == 'booked' && (appointment.visitStatus == 'Awaiting Consult' || appointment.visitStatus == 'Visit In Progress')) {
                    if (appointment.visit) {
                        appointment.cheif_complaint = this.getCheifComplaint(appointment.visit);
                        appointment.starts_in = checkIfDateOldThanOneDay(appointment.slotJsDate);
                        appointment.telephone = this.getTelephoneNumber(appointment?.visit?.person);
                        appointment.TMH_patient_id = this.getAttributeData(appointment.visit, "TMH Case Number")?.value;
                        appointment.uuid = appointment.visitUuid;
                        appointment.location = appointment?.visit?.location?.name;
                        appointment.age = appointment?.patientAge + ' ' + this.translateService.instant('y');
                        this.appointments.push(appointment);
                    }
                }
            });
            this.dataSource.data = [...this.appointments];
            this.dataSource.paginator = this.paginator;
            this.dataSource.sort = this.tableMatSort;
            this.dataSource.filterPredicate = (data, filter) => data?.openMrsId.toLowerCase().indexOf(filter) != -1 || data?.patientName.toLowerCase().indexOf(filter) != -1;
        });
    }
    /**
    * Get doctor speciality
    * @param {ProviderAttributeModel[]} attr - Array of provider attributes
    * @return {string} - Doctor speciality
    */
    getSpecialization(attr) {
        let specialization = '';
        attr.forEach((a) => {
            if (a.attributeType.uuid == 'ed1715f5-93e2-404e-b3c9-2a2d9600f062' && !a.voided) {
                specialization = a.value;
            }
        });
        return specialization;
    }
    /**
    * Returns the age in years from the birthdate
    * @param {string} birthdate - Date in string format
    * @return {number} - Age
    */
    calculateAge(birthdate) {
        return moment().diff(birthdate, 'years');
    }
    /**
    * Returns the created time in words from the date
    * @param {string} data - Date
    * @return {string} - Created time in words from the date
    */
    getCreatedAt(data) {
        let hours = moment().diff(moment(data), 'hours');
        let minutes = moment().diff(moment(data), 'minutes');
        if (hours > 24) {
            return moment(data).format('DD MMM, YYYY');
        }
        ;
        if (hours < 1) {
            return `${minutes} ${this.translateService.instant("Minutes ago")}`;
        }
        return `${hours} ${this.translateService.instant("Hours ago")}`;
    }
    /**
    * Get encounter datetime for a given encounter type
    * @param {CustomVisitModel} visit - Visit
    * @param {string} encounterName - Encounter type
    * @return {string} - Encounter datetime
    */
    getEncounterCreated(visit, encounterName) {
        let created_at = '';
        const encounters = visit.encounters;
        encounters.forEach((encounter) => {
            const display = encounter.type?.name;
            if (display.match(encounterName) !== null) {
                created_at = this.getCreatedAt(encounter.encounter_datetime.replace('Z', '+0530'));
            }
        });
        return created_at;
    }
    /**
     * Determines if the encounter is a follow-up or new visit
     * @param {any} enc - Encounter data
     * @return {string} - 'FOLLOW_UP' or 'NEW'
     */
    getDemarcation(enc) {
        let isFollowUp = false;
        const adlIntl = enc?.find?.(e => e?.type?.name === visitTypes.ADULTINITIAL);
        if (Array.isArray(adlIntl?.obs)) {
            adlIntl?.obs.forEach(obs => {
                if (!isFollowUp)
                    isFollowUp = obs?.value_text?.toLowerCase?.()?.includes?.("follow up");
            });
        }
        return isFollowUp ? visitTypes.FOLLOW_UP : visitTypes.NEW;
    }
    /**
    * Get awaiting visits for a given page number
    * @param {number} page - Page number
    * @return {void}
    */
    getAwaitingVisits(page = 1) {
        if (page == 1) {
            this.awaitingVisits = [];
        }
        this.visitService.getAwaitingVisits(this.specialization, page).subscribe((res) => {
            if (res.success) {
                this.visitsLengthCount = res.totalCount;
                this.emitVisitsCount(this.visitsLengthCount);
                for (let i = 0; i < res.data.length; i++) {
                    let visit = res.data[i];
                    visit.cheif_complaint = this.getCheifComplaint(visit);
                    visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.ADULTINITIAL);
                    visit.person.age = this.calculateAge(visit.person.birthdate);
                    visit.patient_type = this.getDemarcation(visit?.encounters);
                    visit.location = visit?.location?.name;
                    visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                    this.awaitingVisits.push(visit);
                }
                this.dataSource.data = [...this.awaitingVisits];
                if (page == 1) {
                    this.dataSource.paginator = this.tempPaginator;
                    this.dataSource.sort = this.tableMatSort;
                    this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                }
                else {
                    this.tempPaginator.length = this.awaitingVisits.length;
                    this.tempPaginator.nextPage();
                }
            }
        });
    }
    /**
    * Get inprogress visits for a given page number
    * @param {number} page - Page number
    * @return {void}
    */
    getInProgressVisits(page = 1) {
        if (page == 1) {
            this.inProgressVisits = [];
        }
        this.visitService.getInProgressVisits(this.specialization, page).subscribe((res) => {
            if (res.success) {
                this.visitsLengthCount = res.totalCount;
                this.emitVisitsCount(this.visitsLengthCount);
                for (let i = 0; i < res.data.length; i++) {
                    let visit = res.data[i];
                    visit.cheif_complaint = this.getCheifComplaint(visit);
                    visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.ADULTINITIAL);
                    visit.prescription_started = this.getEncounterCreated(visit, visitTypes.VISIT_NOTE);
                    visit.person.age = this.calculateAge(visit.person.birthdate);
                    visit.TMH_patient_id = this.getAttributeData(visit, "TMH Case Number")?.value;
                    visit.location = visit?.location?.name;
                    visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                    this.inProgressVisits.push(visit);
                }
                this.inProgressVisits.sort((a, b) => {
                    const parseTime = (value) => {
                        if (value.includes("minutes ago")) {
                            return { type: "minutes", time: parseInt(value) }; // Store only numeric minutes
                        }
                        if (value.includes("Hours ago")) {
                            return { type: "hours", time: parseInt(value) * 60 }; // Convert hours to minutes for correct comparison
                        }
                        return { type: "date", time: moment(value, "DD MMM, YYYY").valueOf() };
                    };
                    const visitA = parseTime(a.prescription_started);
                    const visitB = parseTime(b.prescription_started);
                    // Sort minutes first (ascending)
                    if (visitA.type === "minutes" && visitB.type === "minutes") {
                        return visitA.time - visitB.time;
                    }
                    // Sort hours first (ascending)
                    if (visitA.type === "hours" && visitB.type === "hours") {
                        return visitA.time - visitB.time;
                    }
                    // Sort dates (descending)
                    if (visitA.type === "date" && visitB.type === "date") {
                        return visitB.time - visitA.time;
                    }
                    // Prioritize minutes over hours, and hours over dates
                    if (visitA.type === "minutes")
                        return -1;
                    if (visitB.type === "minutes")
                        return 1;
                    if (visitA.type === "hours")
                        return -1;
                    if (visitB.type === "hours")
                        return 1;
                    return 0;
                });
                this.dataSource.data = [...this.inProgressVisits];
                if (page == 1) {
                    this.dataSource.paginator = this.tempPaginator;
                    this.dataSource.sort = this.tableMatSort;
                    this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                }
                else {
                    this.tempPaginator.length = this.inProgressVisits.length;
                    this.tempPaginator.nextPage();
                }
            }
        });
    }
    /**
    * Get priority visits for a given page number
    * @param {number} page - Page number
    * @return {void}
    */
    getPriorityVisits(page = 1) {
        if (page == 1) {
            this.priorityVisits = [];
        }
        this.visitService.getPriorityVisits(this.specialization, page).subscribe((res) => {
            if (res.success) {
                this.visitsLengthCount = res.totalCount;
                this.emitVisitsCount(this.visitsLengthCount);
                for (let i = 0; i < res.data.length; i++) {
                    let visit = res.data[i];
                    visit.cheif_complaint = this.getCheifComplaint(visit);
                    visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.FLAGGED);
                    visit.person.age = this.calculateAge(visit.person.birthdate);
                    visit.location = visit?.location?.name;
                    visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                    this.priorityVisits.push(visit);
                }
                this.dataSource.data = [...this.priorityVisits];
                if (page == 1) {
                    this.dataSource.paginator = this.tempPaginator;
                    this.dataSource.sort = this.tableMatSort;
                    this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                }
                else {
                    this.tempPaginator.length = this.priorityVisits.length;
                    this.tempPaginator.nextPage();
                }
            }
        });
    }
    /**
     * Get completed visits count
     * @return {void}
     */
    getCompletedVisits(page = 1) {
        this.visitService.getEndedVisits(this.specialization, page).subscribe((res) => {
            if (res.success) {
                this.visitsLengthCount = res.totalCount;
                this.emitVisitsCount(this.visitsLengthCount);
                for (let i = 0; i < res.data.length; i++) {
                    let visit = res.data[i];
                    visit.cheif_complaint = this.getCheifComplaint(visit);
                    visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.COMPLETED_VISIT);
                    visit.person.age = this.calculateAge(visit.person.birthdate);
                    visit.completed = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.VISIT_COMPLETE);
                    visit.TMH_patient_id = this.getAttributeData(visit, "TMH Case Number")?.value;
                    visit.location = visit?.location?.name;
                    visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                    this.completedVisits.push(visit);
                }
                this.dataSource.data = [...this.completedVisits];
                if (page == 1) {
                    this.dataSource.paginator = this.tempPaginator;
                    this.dataSource.sort = this.tableMatSort;
                    this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                }
                else {
                    this.tempPaginator.length = this.completedVisits.length;
                    this.tempPaginator.nextPage();
                }
            }
        });
    }
    /**
    * Get follow-up visits for a logged-in doctor
    * @return {void}
    */
    getFollowUpVisit(page = 1) {
        this.visitService.getFollowUpVisits(this.specialization).subscribe({
            next: (res) => {
                if (res.success) {
                    for (let i = 0; i < res.data.length; i++) {
                        let visit = res.data[i];
                        if (visit?.encounters?.length) {
                            this.visitsLengthCount += 1;
                            visit.cheif_complaint = this.getCheifComplaint(visit);
                            visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.COMPLETED_VISIT);
                            visit.person.age = this.calculateAge(visit.person.birthdate);
                            visit.completed = this.getEncounterCreated(visit, visitTypes.VISIT_COMPLETE);
                            visit.followUp = this.processFollowUpDate(this.getEncounterObs(visit.encounters, visitTypes.VISIT_NOTE, 163345 /*Follow-up*/)?.value_text);
                            visit.location = visit?.location?.name;
                            visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                            this.followUpVisits.push(visit);
                        }
                    }
                    this.emitVisitsCount(this.visitsLengthCount);
                    this.dataSource.data = [...this.followUpVisits];
                    if (page == 1) {
                        this.dataSource.paginator = this.tempPaginator;
                        this.dataSource.sort = this.tableMatSort;
                        this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                    }
                    else {
                        this.tempPaginator.length = this.followUpVisits.length;
                        this.tempPaginator.nextPage();
                    }
                }
            }
        });
    }
    /**
    * Get encounter datetime for a given encounter type
    * @param {CustomVisitModel} visit - Visit
    * @param {string} encounterName - Encounter type
    * @return {string} - Encounter datetime
    */
    getEncounterObs(encounters, encounterName, conceptId) {
        let obs;
        encounters.forEach((encounter) => {
            if (encounter.type?.name === encounterName) {
                obs = encounter?.obs?.find((o) => o.concept_id == conceptId);
            }
        });
        return obs;
    }
    /**
     * Renders HTML content for a column, sanitized for security
     * @param {any} column - Column definition
     * @param {any} element - Data element to render
     * @return {string} - Formatted HTML or element value
     */
    renderHtmlContent(column, element) {
        return column.formatHtml && typeof column.formatHtml === 'function' ? this.sanitizer.bypassSecurityTrustHtml(column.formatHtml(element)) : element[column.key];
    }
    /**
     * Returns a string of CSS classes for the column
     * @param {any} column - Column definition
     * @return {string} - Space-separated class names
     */
    getClasses(column, element) {
        let classList = [];
        // If column has a static classList (array or string), add it
        if (column.classList) {
            classList = typeof column.classList === "function" ? column.classList(element) : column.classList;
        }
        return classList.join(" ");
    }
    /**
     * Formats the follow-up date by cleaning up time details
     * @param {string} value - Follow-up date string
     * @return {string} - Formatted date
     */
    processFollowUpDate(value) {
        if (!value)
            return '';
        return value.split(',').length > 1 ? `${value.split(',')[0]}${value.split(',')[1].replace("Time:", "")}` : value;
    }
    ;
    /**
     * Executes the action based on its label (Reschedule or Cancel)
     * @param {any} action - Action object
     * @param {any} element - Element to perform the action on
     */
    handleAction(action, element) {
        if (action.label === 'Reschedule') {
            this.reschedule(element);
        }
        else if (action.label === 'Cancel') {
            this.cancel(element);
        }
    }
    /**
     * Opens a WhatsApp chat with the given phone number
     * @param {MouseEvent} event - The click event to prevent row navigation
     * @param {string} telephone - Phone number for WhatsApp
     */
    openWhatsApp(event, telephone) {
        event.stopPropagation(); // Prevent row navigation
        const whatsappLink = `https://wa.me/${telephone}`;
        window.open(whatsappLink, '_blank', 'noopener,noreferrer');
    }
    /**
     * Emits the visits count data with the given table tag name and count
     * @param {number} visitsCount - The total visits count for the specific table
     */
    emitVisitsCount(visitsCount) {
        const visitsCountData = {
            tableTagName: this.pluginConfigObs.pluginConfigObsFlag,
            visitsCount: visitsCount
        };
        this.visitsCountDate.emit(visitsCountData);
    }
    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableGridComponent, deps: [{ token: i1.AppointmentService }, { token: i2.VisitService }, { token: i3.CoreService }, { token: i4.ToastrService }, { token: i5.TranslateService }, { token: i6.MindmapService }, { token: i7.DomSanitizer }, { token: i8.AppConfigService }, { token: i9.NgxRolesService }, { token: 'environment' }], target: i0.ÉµÉµFactoryTarget.Component });
    static Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TableGridComponent, selector: "lib-table-grid", inputs: { pluginConfigObs: "pluginConfigObs" }, outputs: { visitsCountDate: "visitsCountDate" }, viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }, { propertyName: "searchElement", first: true, predicate: ["searchInput"], descendants: true, static: true }, { propertyName: "tempPaginator", first: true, predicate: ["tempPaginator"], descendants: true }, { propertyName: "menuTrigger", first: true, predicate: MatMenuTrigger, descendants: true }, { propertyName: "tableMatSort", first: true, predicate: ["tableMatSort"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<mat-expansion-panel [expanded]=\"true\" data-test-id=\"matExpAppointment\">\n  <mat-expansion-panel-header data-test-id=\"matExpHeaderAppointment\">\n    <mat-panel-title>\n      <div id=\"{{pluginConfigObs.anchorId}}\" class=\"anchor-con\"></div>\n      <div class=\"intel-accordion-title\">\n        <img src=\"{{ pluginConfigObs.tableHeaderIcon }}\" alt=\"\" width=\"44px\">\n        <h6 class=\"mb-0 ml-2\">{{ pluginConfigObs.tableHeader | translate }} ({{ visitsLengthCount }})</h6>\n        <mat-icon aria-hidden=\"false\" aria-label=\"help icon\" matTooltip=\"{{ (pluginConfigObs.tooltipLabel | translate) }}\" matTooltipPosition=\"right\" data-test-id=\"matIcoHelpAppointment\">help_outline</mat-icon>\n        <div class=\"ml-auto filter-search-container\">\n          <button *ngIf=\"pluginConfigObs.filterObs.filterFlag\" class=\"mat-stroked-button\"[matMenuTriggerFor]=\"filterMenu1\" class=\"filter-btn\" (click)=\"$event.stopPropagation();\">\n            <img src=\"{{pluginConfigObs.filterObs.filterIcon}}\" alt=\"\"> {{( pluginConfigObs.filterObs.filterLabel| translate)}}\n          </button>\n          <mat-menu #filterMenu1=\"matMenu\" class=\"custom-menu\" [hasBackdrop]=\"true\" xPosition=\"before\">\n            <div class=\"toggle-buttons\">\n              <button class=\"mat-focus-indicator mat-button mat-button-base\" class=\"mat-focus-indicator mat-button mat-button-base\" mat-button [class.active]=\"mode === 'date'\" (click)=\"setMode('date'); $event.stopPropagation(); resetDate(true)\"><span class=\"mat-button-wrapper\"><span class=\"mat-button-wrapper\">{{'Date' | translate}}</span></span></button>\n              <button class=\"mat-focus-indicator mat-button mat-button-base\" class=\"mat-focus-indicator mat-button mat-button-base\" mat-button [class.active]=\"mode === 'range'\" (click)=\"setMode('range'); $event.stopPropagation(); resetDate(true)\"><span class=\"mat-button-wrapper\"><span class=\"mat-button-wrapper\">{{'Range' | translate}}</span></span></button>\n            </div>\n            <div *ngIf=\"mode === 'date'\" class=\"date-view\" (click)=\"$event.stopPropagation()\">\n              <form [formGroup]=\"filteredDateAndRangeForm\">\n                <div class=\"form-date\">\n                  <div class=\"input-date\">\n                    <label class=\"label-text\">{{ 'Select date' | translate}}</label>\n                    <div class=\"input-wrapper\">\n                      <input type=\"text\" class=\"form-control\" [max]=\"maxDate\" formControlName=\"date\" [matDatepicker]=\"dobdp\" placeholder=\"{{'Select date' | translate}}\" aria-label=\"Date\" aria-describedby=\"basic-addon1\" readonly data-test-id=\"etDate\"/>\n                      <mat-datepicker #dobdp></mat-datepicker>\n                      <mat-datepicker-toggle matSuffix [for]=\"dobdp\" data-test-id=\"dpDate\" class=\"datepicker-icon\">\n                        <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\n                      </mat-datepicker-toggle>\n                    </div>\n                  </div>\n                </div>\n              </form>\n              </div>\n              <div *ngIf=\"mode === 'range'\" class=\"range-view\" (click)=\" $event.stopPropagation()\">\n                <form [formGroup]=\"filteredDateAndRangeForm\">\n                  <div class=\"form-date\">\n                    <div class=\"input-date\">\n                      <label class=\"label-text\">{{ 'Start date' | translate }}</label>\n                      <div class=\"input-wrapper\">\n                        <input type=\"text\" class=\"form-control\" [max]=\"filteredDateAndRangeForm.value.endDate ? filteredDateAndRangeForm.value.endDate : maxDate\" formControlName=\"startDate\" [matDatepicker]=\"picker1\" placeholder=\"{{'Select start date'|translate}}\" aria-label=\"Start date\" aria-describedby=\"basic-addon1\" readonly data-test-id=\"etSelStartDate\">\n                        <mat-datepicker #picker1></mat-datepicker>\n                        <mat-datepicker-toggle matSuffix [for]=\"picker1\" class=\"datepicker-icon\">\n                          <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\n                        </mat-datepicker-toggle>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"form-date\">\n                    <div class=\"input-date\">\n                      <label class=\"label-text\">{{ 'End date' | translate }}</label>\n                      <div class=\"input-wrapper\">\n                        <input type=\"text\" class=\"form-control\" [min]=\"filteredDateAndRangeForm.value.startDate\" [max]=\"maxDate\" formControlName=\"endDate\" [matDatepicker]=\"picker2\" placeholder=\"{{'Select end date'|translate}}\" aria-label=\"End date\" aria-describedby=\"basic-addon2\" readonly data-test-id=\"etSelEndDate\">\n                        <mat-datepicker #picker2></mat-datepicker>\n                        <mat-datepicker-toggle matSuffix [for]=\"picker2\" class=\"datepicker-icon\">\n                          <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\n                        </mat-datepicker-toggle>\n                      </div>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            <div class=\"action-buttons\">\n              <button mat-button class=\"mat-focus-indicator reset-btn mat-button mat-button-base\" (click)=\"resetDate();\"><span class=\"mat-button-wrapper\">{{ 'Reset'| translate }}</span></button>\n              <button mat-button class=\"mat-focus-indicator apply-btn mat-button mat-button-base\" (click)=\"applyDateOrRangeFilter(pluginConfigObs.filterObs.filterDateField)\"><span class=\"mat-button-wrapper\">{{ 'Apply'| translate }}</span></button>\n            </div>\n          </mat-menu>\n          <div class=\"input-group search-bar ml-auto\" (click)=\"$event.stopPropagation();\">\n            <input type=\"text\" #searchInput class=\"form-control\" placeholder=\"{{ pluginConfigObs.searchPlaceHolder | translate }}\" aria-label=\"search1\" aria-describedby=\"basic-addon1\" (keyup)=\"applyFilter($event)\" (keydown.Space)=\"$event.stopPropagation()\" (keydown.Enter)=\"$event.stopPropagation()\" data-test-id=\"etSearchAppointmentDashboard\">\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\" id=\"basic-addon1\"  *ngIf=\"!isFilterApplied\">\n                <img src=\"assets/svgs/search-icon.svg\" alt=\"\" width=\"20px\" height=\"20px\">\n              </span>\n              <button data-test-id=\"btnResetApSerach\"  class=\"btnResetApSerach\" class=\"btnResetApSerach\" class=\"mat-icon-button\" aria-label=\"Reset appointment search\"  (click)=\"clearFilter()\"  *ngIf=\"isFilterApplied\">\n                <mat-icon class=\"ml-0\" style=\"line-height: normal;\">close</mat-icon>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </mat-panel-title>\n  </mat-expansion-panel-header>\n  <div class=\"mat-elevation-z8\">\n    <table mat-table [dataSource]=\"dataSource\" #tableMatSort=\"matSort\" matSort>\n\n      <ng-container *ngFor=\"let column of displayedAppointmentColumns\" [matColumnDef]=\"column.key\">\n        <ng-container *ngIf=\"column.isSortable; else noSort\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header matSortDirection=\"asc\">\n            {{ column.label | translate }}\n          </th>\n        </ng-container>\n        <ng-template #noSort>\n          <th mat-header-cell *matHeaderCellDef>\n            {{ column.label | translate }}\n          </th>\n        </ng-template>\n\n        <td mat-cell *matCellDef=\"let element; let j = index;\" [attr.data-test-id]=\"'td' + j\">\n          <ng-container *ngIf=\"column.key !== 'patient_name'\">\n            <div class=\"float-left\" \n                [innerHTML]=\"renderHtmlContent(column, element)\" \n                [ngClass]=\"getClasses(column, element)\">\n            </div>\n          </ng-container>\n\n          <!-- Patient Name Column -->\n          <ng-container *ngIf=\"column.key === 'patient_name'\">\n            <div class=\"d-flex align-items-center\">\n              <img *ngIf=\"element.patientId\" src=\"{{ checkPatientRegField('Profile Photo') ? baseURL + '/personimage/' + element.patientId : '' }}\" alt=\"\" width=\"32px\" height=\"32px\" style=\"border-radius: 50%;\">\n              <img *ngIf=\"pluginConfigObs.pluginConfigObsFlag !== 'Appointment'\" src=\"{{ checkPatientRegField('Profile Photo') ? baseURL + '/personimage/' + element.person.uuid : '' }}\" alt=\"\" width=\"32px\" height=\"32px\" style=\"border-radius: 50%;\">\n              <div class=\"float-left\" \n                [innerHTML]=\"renderHtmlContent(column, element)\" \n                [ngClass]=\"getClasses(column, element)\">\n              </div>\n            </div>\n          </ng-container>\n\n          <!-- Telephone Column -->\n          <ng-container *ngIf=\"column.key === 'telephone' && element.telephone\">\n            <a (click)=\"openWhatsApp($event, element.telephone)\" class=\"float-left icon-btn m-0\" [attr.data-test-id]=\"'linkPatientWhatsApp' + j\">\n              <img src=\"assets/svgs/whatsapp-green.svg\" alt=\"WhatsApp\" />\n            </a>\n          </ng-container>\n\n          <!-- Actions Column -->\n          <ng-container *ngIf=\"column.key === 'actions'\">\n            <div class=\"actions-btn-wrap d-flex align-items-center\">\n              <button\n                *ngFor=\"let action of column.actionButtons\"\n                [ngStyle]=\"{\n                  color: action.style?.color,\n                  backgroundColor: action.style?.backgroundColor\n                }\"\n                class=\"action-btn mr-2\"\n                type=\"button\"\n                (click)=\"$event.stopPropagation(); handleAction(action, element)\"\n              >\n                {{ action.label | translate }}\n              </button>\n            </div>\n          </ng-container>\n        </td>\n      </ng-container>\n    \n\n      <!-- No Data Row -->\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumns.length\">\n          {{ pluginConfigObs.noRecordFound | translate }}\n        </td>\n      </tr>\n\n      <!-- Row Definitions -->\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; let x = index; columns: displayedColumns;\" [attr.data-test-id]=\"'tr' + x\" [routerLink]=\"['/dashboard/visit-summary', row.uuid]\"></tr>\n      \n    </table>\n    <mat-paginator #tempPaginator hidePageSize [pageSizeOptions]=\"pageSizeOptions\" aria-label=\"Select page of periodic elements\"></mat-paginator>\n  </div>\n</mat-expansion-panel>\n", styles: [".mat-elevation-z8{box-shadow:none;width:100%;overflow-x:auto}table{width:100%;font-family:DM Sans}th.mat-header-cell{border:none;font-size:14px!important;font-weight:700;color:var(--color-gray);height:21px}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{border:none;min-width:60px;white-space:nowrap;padding-right:24px}th.mat-header-cell span.alert-danger,td.mat-cell span.alert-danger,td.mat-footer-cell span.alert-danger{color:var(--color-red);font-weight:700;background:transparent;border:none}th.mat-header-cell span.alert-success,td.mat-cell span.alert-success,td.mat-footer-cell span.alert-success{color:var(--color-green);font-weight:700;background:transparent;border:none}td.mat-cell{font-size:16px}tr.mat-row,tr.mat-footer-row{height:88px;border-radius:8px;cursor:pointer}tr.mat-row.upcoming{background:#e6fff3!important}tr.mat-row:nth-child(odd){background:#f7f7fa}td:first-child,th:first-child{border-radius:8px 0 0 8px}td:last-child,th:last-child{border-radius:0 8px 8px 0}.actions-btn-wrap .action-btn{outline:none;border:none;height:36px;min-width:102px;padding:6px 8px;background:#fff;border-radius:4px;color:var(--color-black);font-family:DM Sans;font-size:16px}.actions-btn-wrap .blue-btn{background:var(--color-lightGray);color:var(--color-darkBlue)}.actions-btn-wrap .pink-btn{background:var(--color-lightPink);color:var(--color-red)}.mat-expansion-panel .mat-expansion-panel-header.mat-expanded .input-group{display:flex}.input-group{background:var(--color-white);border:1px solid rgba(127,123,146,.5);border-radius:6px;height:46px;align-items:center;max-width:60vw;width:300px;display:none}.input-group .input-group-text{background:none;border:none;cursor:default}.input-group .form-control{border:none;outline:none;background:transparent;font-size:16px;line-height:150%;padding-left:16px}.input-group .form-control:focus{box-shadow:none}.mat-expansion-panel{background:#fff;box-shadow:0 4px 24px #1f1c3a14;border-radius:20px!important;padding:24px;margin-bottom:24px}.mat-expansion-panel .mat-expansion-panel-header{padding:0}.mat-expansion-panel .mat-expansion-panel-header .mat-content{align-items:center}.mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:48px}.mat-expansion-panel .mat-expansion-panel-header:hover{background:transparent!important}.mat-expansion-panel .intel-accordion-title{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;flex-wrap:wrap;width:100%}.mat-expansion-panel .intel-accordion-title .mat-icon{height:20px;width:20px;font-size:20px;color:#461d90;margin-left:8px}.mat-expansion-panel .intel-accordion-title h6{font-size:18px;font-weight:700;color:#000}.mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body{padding:0;margin-top:24px;position:relative}.mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body:after{content:\"\";position:absolute;top:0;height:1px;left:0;right:0;background:#efe8ff}.anchor-con{position:absolute;top:-120px;left:0}@media (max-width: 768px){.input-group{width:100%;max-width:100%;margin:10px 0}.mat-expansion-panel .mat-expansion-panel-header,.mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:-moz-fit-content;height:fit-content}.info-icon{display:none}.anchor-con{top:-100px}}.matIconButton{border:none;background:transparent}::ng-deep .custom-menu{background:var(--color-white);border-radius:8px!important;padding:16px;width:352px;box-shadow:0 4px 8px #7f7b9229}.mat-expansion-panel.mat-expanded .mat-expansion-panel-header .filter-btn{display:flex!important}.btnResetApSerach{display:none}.filter-btn{background:none;align-items:center;border:1px solid rgba(127,123,146,.5);border-radius:6px;color:#2e1e91;font-weight:500;padding:4px 12px;white-space:nowrap;height:46px;display:none;gap:4px}.toggle-buttons{display:flex;justify-content:space-between;margin-bottom:16px;gap:16px}button.mat-button,.action-buttons button.mat-button{flex:1;color:#2e1e91;background:#fff;border-radius:8px;font-family:DM Sans;font-size:14px;font-weight:500;border:1.33px solid #EFE8FF}.action-buttons button.mat-button.reset-btn{font-size:12px;font-weight:700;margin:0 0 0 20px;width:96px}.action-buttons button.mat-button.apply-btn{color:#fff;background:var(--color-darkBlue);font-size:12px;font-weight:700;width:96px}button.mat-button.active{background:#efe8ff;color:#2e1e91}button.mat-button .reset-btn{color:var(--color-darkBlue)}.action-buttons{display:flex;justify-content:space-between;gap:16px}.reset-btn{color:var(--color-darkBlue);background:#f5f5f5;border-radius:8px}.filter-search-container{display:flex;align-items:center;gap:1rem}.form-date{margin-bottom:16px}.input-wrapper{position:relative;display:flex;align-items:center}.input-wrapper .form-control{width:100%;padding-right:40px;border:1px solid rgba(178,175,190,.2);background:transparent;border-radius:8px;height:48px;font-size:16px;color:var(--color-darkestBlue)}.datepicker-icon{position:absolute;right:4px;top:50%;transform:translateY(-50%);cursor:pointer;background:transparent;border:none}.form-control:focus{box-shadow:none}.label-text{font-size:14px;margin-bottom:8px;color:#7f7b92}.userImage{width:32px;height:32px;border-radius:50%}.red-pill{display:flex;flex-direction:row;align-items:center;background:#ffe8e8;border-radius:4px;height:32px;color:#ea315b;padding:4px 6px;width:-moz-fit-content;width:fit-content}.left{text-align:left}.chip{display:flex;flex-direction:row;align-items:center;border-radius:4px;height:32px;padding:4px 6px;width:-moz-fit-content;width:fit-content}.chip.green{color:#0fd197}.chip.blue{color:#2e1e91}.chip-item-blue{background:var(--color-lightGray)}.chip-item-green{background:#e6fff3}\n"], dependencies: [{ kind: "directive", type: i10.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i11.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i11.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i11.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i12.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }, { kind: "directive", type: i13.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i14.MatSuffix, selector: "[matSuffix]" }, { kind: "component", type: i15.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { kind: "component", type: i15.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }, { kind: "directive", type: i15.MatExpansionPanelTitle, selector: "mat-panel-title" }, { kind: "component", type: i16.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "directive", type: i16.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { kind: "component", type: i17.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i17.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i17.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i17.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i17.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i17.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i17.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i17.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i17.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i17.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "directive", type: i17.MatNoDataRow, selector: "ng-template[matNoDataRow]" }, { kind: "component", type: i18.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i19.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { kind: "directive", type: i19.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { kind: "component", type: i19.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["tabIndex", "disabled", "for", "aria-label", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { kind: "directive", type: i19.MatDatepickerToggleIcon, selector: "[matDatepickerToggleIcon]" }, { kind: "directive", type: i20.ÉµNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i20.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i20.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i20.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i20.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i20.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i21.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i21.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { kind: "directive", type: i22.DefaultImageDirective, selector: "img[src]", inputs: ["src"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-table-grid', changeDetection: ChangeDetectionStrategy.OnPush, template: "<mat-expansion-panel [expanded]=\"true\" data-test-id=\"matExpAppointment\">\n  <mat-expansion-panel-header data-test-id=\"matExpHeaderAppointment\">\n    <mat-panel-title>\n      <div id=\"{{pluginConfigObs.anchorId}}\" class=\"anchor-con\"></div>\n      <div class=\"intel-accordion-title\">\n        <img src=\"{{ pluginConfigObs.tableHeaderIcon }}\" alt=\"\" width=\"44px\">\n        <h6 class=\"mb-0 ml-2\">{{ pluginConfigObs.tableHeader | translate }} ({{ visitsLengthCount }})</h6>\n        <mat-icon aria-hidden=\"false\" aria-label=\"help icon\" matTooltip=\"{{ (pluginConfigObs.tooltipLabel | translate) }}\" matTooltipPosition=\"right\" data-test-id=\"matIcoHelpAppointment\">help_outline</mat-icon>\n        <div class=\"ml-auto filter-search-container\">\n          <button *ngIf=\"pluginConfigObs.filterObs.filterFlag\" class=\"mat-stroked-button\"[matMenuTriggerFor]=\"filterMenu1\" class=\"filter-btn\" (click)=\"$event.stopPropagation();\">\n            <img src=\"{{pluginConfigObs.filterObs.filterIcon}}\" alt=\"\"> {{( pluginConfigObs.filterObs.filterLabel| translate)}}\n          </button>\n          <mat-menu #filterMenu1=\"matMenu\" class=\"custom-menu\" [hasBackdrop]=\"true\" xPosition=\"before\">\n            <div class=\"toggle-buttons\">\n              <button class=\"mat-focus-indicator mat-button mat-button-base\" class=\"mat-focus-indicator mat-button mat-button-base\" mat-button [class.active]=\"mode === 'date'\" (click)=\"setMode('date'); $event.stopPropagation(); resetDate(true)\"><span class=\"mat-button-wrapper\"><span class=\"mat-button-wrapper\">{{'Date' | translate}}</span></span></button>\n              <button class=\"mat-focus-indicator mat-button mat-button-base\" class=\"mat-focus-indicator mat-button mat-button-base\" mat-button [class.active]=\"mode === 'range'\" (click)=\"setMode('range'); $event.stopPropagation(); resetDate(true)\"><span class=\"mat-button-wrapper\"><span class=\"mat-button-wrapper\">{{'Range' | translate}}</span></span></button>\n            </div>\n            <div *ngIf=\"mode === 'date'\" class=\"date-view\" (click)=\"$event.stopPropagation()\">\n              <form [formGroup]=\"filteredDateAndRangeForm\">\n                <div class=\"form-date\">\n                  <div class=\"input-date\">\n                    <label class=\"label-text\">{{ 'Select date' | translate}}</label>\n                    <div class=\"input-wrapper\">\n                      <input type=\"text\" class=\"form-control\" [max]=\"maxDate\" formControlName=\"date\" [matDatepicker]=\"dobdp\" placeholder=\"{{'Select date' | translate}}\" aria-label=\"Date\" aria-describedby=\"basic-addon1\" readonly data-test-id=\"etDate\"/>\n                      <mat-datepicker #dobdp></mat-datepicker>\n                      <mat-datepicker-toggle matSuffix [for]=\"dobdp\" data-test-id=\"dpDate\" class=\"datepicker-icon\">\n                        <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\n                      </mat-datepicker-toggle>\n                    </div>\n                  </div>\n                </div>\n              </form>\n              </div>\n              <div *ngIf=\"mode === 'range'\" class=\"range-view\" (click)=\" $event.stopPropagation()\">\n                <form [formGroup]=\"filteredDateAndRangeForm\">\n                  <div class=\"form-date\">\n                    <div class=\"input-date\">\n                      <label class=\"label-text\">{{ 'Start date' | translate }}</label>\n                      <div class=\"input-wrapper\">\n                        <input type=\"text\" class=\"form-control\" [max]=\"filteredDateAndRangeForm.value.endDate ? filteredDateAndRangeForm.value.endDate : maxDate\" formControlName=\"startDate\" [matDatepicker]=\"picker1\" placeholder=\"{{'Select start date'|translate}}\" aria-label=\"Start date\" aria-describedby=\"basic-addon1\" readonly data-test-id=\"etSelStartDate\">\n                        <mat-datepicker #picker1></mat-datepicker>\n                        <mat-datepicker-toggle matSuffix [for]=\"picker1\" class=\"datepicker-icon\">\n                          <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\n                        </mat-datepicker-toggle>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"form-date\">\n                    <div class=\"input-date\">\n                      <label class=\"label-text\">{{ 'End date' | translate }}</label>\n                      <div class=\"input-wrapper\">\n                        <input type=\"text\" class=\"form-control\" [min]=\"filteredDateAndRangeForm.value.startDate\" [max]=\"maxDate\" formControlName=\"endDate\" [matDatepicker]=\"picker2\" placeholder=\"{{'Select end date'|translate}}\" aria-label=\"End date\" aria-describedby=\"basic-addon2\" readonly data-test-id=\"etSelEndDate\">\n                        <mat-datepicker #picker2></mat-datepicker>\n                        <mat-datepicker-toggle matSuffix [for]=\"picker2\" class=\"datepicker-icon\">\n                          <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\n                        </mat-datepicker-toggle>\n                      </div>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            <div class=\"action-buttons\">\n              <button mat-button class=\"mat-focus-indicator reset-btn mat-button mat-button-base\" (click)=\"resetDate();\"><span class=\"mat-button-wrapper\">{{ 'Reset'| translate }}</span></button>\n              <button mat-button class=\"mat-focus-indicator apply-btn mat-button mat-button-base\" (click)=\"applyDateOrRangeFilter(pluginConfigObs.filterObs.filterDateField)\"><span class=\"mat-button-wrapper\">{{ 'Apply'| translate }}</span></button>\n            </div>\n          </mat-menu>\n          <div class=\"input-group search-bar ml-auto\" (click)=\"$event.stopPropagation();\">\n            <input type=\"text\" #searchInput class=\"form-control\" placeholder=\"{{ pluginConfigObs.searchPlaceHolder | translate }}\" aria-label=\"search1\" aria-describedby=\"basic-addon1\" (keyup)=\"applyFilter($event)\" (keydown.Space)=\"$event.stopPropagation()\" (keydown.Enter)=\"$event.stopPropagation()\" data-test-id=\"etSearchAppointmentDashboard\">\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\" id=\"basic-addon1\"  *ngIf=\"!isFilterApplied\">\n                <img src=\"assets/svgs/search-icon.svg\" alt=\"\" width=\"20px\" height=\"20px\">\n              </span>\n              <button data-test-id=\"btnResetApSerach\"  class=\"btnResetApSerach\" class=\"btnResetApSerach\" class=\"mat-icon-button\" aria-label=\"Reset appointment search\"  (click)=\"clearFilter()\"  *ngIf=\"isFilterApplied\">\n                <mat-icon class=\"ml-0\" style=\"line-height: normal;\">close</mat-icon>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </mat-panel-title>\n  </mat-expansion-panel-header>\n  <div class=\"mat-elevation-z8\">\n    <table mat-table [dataSource]=\"dataSource\" #tableMatSort=\"matSort\" matSort>\n\n      <ng-container *ngFor=\"let column of displayedAppointmentColumns\" [matColumnDef]=\"column.key\">\n        <ng-container *ngIf=\"column.isSortable; else noSort\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header matSortDirection=\"asc\">\n            {{ column.label | translate }}\n          </th>\n        </ng-container>\n        <ng-template #noSort>\n          <th mat-header-cell *matHeaderCellDef>\n            {{ column.label | translate }}\n          </th>\n        </ng-template>\n\n        <td mat-cell *matCellDef=\"let element; let j = index;\" [attr.data-test-id]=\"'td' + j\">\n          <ng-container *ngIf=\"column.key !== 'patient_name'\">\n            <div class=\"float-left\" \n                [innerHTML]=\"renderHtmlContent(column, element)\" \n                [ngClass]=\"getClasses(column, element)\">\n            </div>\n          </ng-container>\n\n          <!-- Patient Name Column -->\n          <ng-container *ngIf=\"column.key === 'patient_name'\">\n            <div class=\"d-flex align-items-center\">\n              <img *ngIf=\"element.patientId\" src=\"{{ checkPatientRegField('Profile Photo') ? baseURL + '/personimage/' + element.patientId : '' }}\" alt=\"\" width=\"32px\" height=\"32px\" style=\"border-radius: 50%;\">\n              <img *ngIf=\"pluginConfigObs.pluginConfigObsFlag !== 'Appointment'\" src=\"{{ checkPatientRegField('Profile Photo') ? baseURL + '/personimage/' + element.person.uuid : '' }}\" alt=\"\" width=\"32px\" height=\"32px\" style=\"border-radius: 50%;\">\n              <div class=\"float-left\" \n                [innerHTML]=\"renderHtmlContent(column, element)\" \n                [ngClass]=\"getClasses(column, element)\">\n              </div>\n            </div>\n          </ng-container>\n\n          <!-- Telephone Column -->\n          <ng-container *ngIf=\"column.key === 'telephone' && element.telephone\">\n            <a (click)=\"openWhatsApp($event, element.telephone)\" class=\"float-left icon-btn m-0\" [attr.data-test-id]=\"'linkPatientWhatsApp' + j\">\n              <img src=\"assets/svgs/whatsapp-green.svg\" alt=\"WhatsApp\" />\n            </a>\n          </ng-container>\n\n          <!-- Actions Column -->\n          <ng-container *ngIf=\"column.key === 'actions'\">\n            <div class=\"actions-btn-wrap d-flex align-items-center\">\n              <button\n                *ngFor=\"let action of column.actionButtons\"\n                [ngStyle]=\"{\n                  color: action.style?.color,\n                  backgroundColor: action.style?.backgroundColor\n                }\"\n                class=\"action-btn mr-2\"\n                type=\"button\"\n                (click)=\"$event.stopPropagation(); handleAction(action, element)\"\n              >\n                {{ action.label | translate }}\n              </button>\n            </div>\n          </ng-container>\n        </td>\n      </ng-container>\n    \n\n      <!-- No Data Row -->\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumns.length\">\n          {{ pluginConfigObs.noRecordFound | translate }}\n        </td>\n      </tr>\n\n      <!-- Row Definitions -->\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; let x = index; columns: displayedColumns;\" [attr.data-test-id]=\"'tr' + x\" [routerLink]=\"['/dashboard/visit-summary', row.uuid]\"></tr>\n      \n    </table>\n    <mat-paginator #tempPaginator hidePageSize [pageSizeOptions]=\"pageSizeOptions\" aria-label=\"Select page of periodic elements\"></mat-paginator>\n  </div>\n</mat-expansion-panel>\n", styles: [".mat-elevation-z8{box-shadow:none;width:100%;overflow-x:auto}table{width:100%;font-family:DM Sans}th.mat-header-cell{border:none;font-size:14px!important;font-weight:700;color:var(--color-gray);height:21px}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{border:none;min-width:60px;white-space:nowrap;padding-right:24px}th.mat-header-cell span.alert-danger,td.mat-cell span.alert-danger,td.mat-footer-cell span.alert-danger{color:var(--color-red);font-weight:700;background:transparent;border:none}th.mat-header-cell span.alert-success,td.mat-cell span.alert-success,td.mat-footer-cell span.alert-success{color:var(--color-green);font-weight:700;background:transparent;border:none}td.mat-cell{font-size:16px}tr.mat-row,tr.mat-footer-row{height:88px;border-radius:8px;cursor:pointer}tr.mat-row.upcoming{background:#e6fff3!important}tr.mat-row:nth-child(odd){background:#f7f7fa}td:first-child,th:first-child{border-radius:8px 0 0 8px}td:last-child,th:last-child{border-radius:0 8px 8px 0}.actions-btn-wrap .action-btn{outline:none;border:none;height:36px;min-width:102px;padding:6px 8px;background:#fff;border-radius:4px;color:var(--color-black);font-family:DM Sans;font-size:16px}.actions-btn-wrap .blue-btn{background:var(--color-lightGray);color:var(--color-darkBlue)}.actions-btn-wrap .pink-btn{background:var(--color-lightPink);color:var(--color-red)}.mat-expansion-panel .mat-expansion-panel-header.mat-expanded .input-group{display:flex}.input-group{background:var(--color-white);border:1px solid rgba(127,123,146,.5);border-radius:6px;height:46px;align-items:center;max-width:60vw;width:300px;display:none}.input-group .input-group-text{background:none;border:none;cursor:default}.input-group .form-control{border:none;outline:none;background:transparent;font-size:16px;line-height:150%;padding-left:16px}.input-group .form-control:focus{box-shadow:none}.mat-expansion-panel{background:#fff;box-shadow:0 4px 24px #1f1c3a14;border-radius:20px!important;padding:24px;margin-bottom:24px}.mat-expansion-panel .mat-expansion-panel-header{padding:0}.mat-expansion-panel .mat-expansion-panel-header .mat-content{align-items:center}.mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:48px}.mat-expansion-panel .mat-expansion-panel-header:hover{background:transparent!important}.mat-expansion-panel .intel-accordion-title{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;flex-wrap:wrap;width:100%}.mat-expansion-panel .intel-accordion-title .mat-icon{height:20px;width:20px;font-size:20px;color:#461d90;margin-left:8px}.mat-expansion-panel .intel-accordion-title h6{font-size:18px;font-weight:700;color:#000}.mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body{padding:0;margin-top:24px;position:relative}.mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body:after{content:\"\";position:absolute;top:0;height:1px;left:0;right:0;background:#efe8ff}.anchor-con{position:absolute;top:-120px;left:0}@media (max-width: 768px){.input-group{width:100%;max-width:100%;margin:10px 0}.mat-expansion-panel .mat-expansion-panel-header,.mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:-moz-fit-content;height:fit-content}.info-icon{display:none}.anchor-con{top:-100px}}.matIconButton{border:none;background:transparent}::ng-deep .custom-menu{background:var(--color-white);border-radius:8px!important;padding:16px;width:352px;box-shadow:0 4px 8px #7f7b9229}.mat-expansion-panel.mat-expanded .mat-expansion-panel-header .filter-btn{display:flex!important}.btnResetApSerach{display:none}.filter-btn{background:none;align-items:center;border:1px solid rgba(127,123,146,.5);border-radius:6px;color:#2e1e91;font-weight:500;padding:4px 12px;white-space:nowrap;height:46px;display:none;gap:4px}.toggle-buttons{display:flex;justify-content:space-between;margin-bottom:16px;gap:16px}button.mat-button,.action-buttons button.mat-button{flex:1;color:#2e1e91;background:#fff;border-radius:8px;font-family:DM Sans;font-size:14px;font-weight:500;border:1.33px solid #EFE8FF}.action-buttons button.mat-button.reset-btn{font-size:12px;font-weight:700;margin:0 0 0 20px;width:96px}.action-buttons button.mat-button.apply-btn{color:#fff;background:var(--color-darkBlue);font-size:12px;font-weight:700;width:96px}button.mat-button.active{background:#efe8ff;color:#2e1e91}button.mat-button .reset-btn{color:var(--color-darkBlue)}.action-buttons{display:flex;justify-content:space-between;gap:16px}.reset-btn{color:var(--color-darkBlue);background:#f5f5f5;border-radius:8px}.filter-search-container{display:flex;align-items:center;gap:1rem}.form-date{margin-bottom:16px}.input-wrapper{position:relative;display:flex;align-items:center}.input-wrapper .form-control{width:100%;padding-right:40px;border:1px solid rgba(178,175,190,.2);background:transparent;border-radius:8px;height:48px;font-size:16px;color:var(--color-darkestBlue)}.datepicker-icon{position:absolute;right:4px;top:50%;transform:translateY(-50%);cursor:pointer;background:transparent;border:none}.form-control:focus{box-shadow:none}.label-text{font-size:14px;margin-bottom:8px;color:#7f7b92}.userImage{width:32px;height:32px;border-radius:50%}.red-pill{display:flex;flex-direction:row;align-items:center;background:#ffe8e8;border-radius:4px;height:32px;color:#ea315b;padding:4px 6px;width:-moz-fit-content;width:fit-content}.left{text-align:left}.chip{display:flex;flex-direction:row;align-items:center;border-radius:4px;height:32px;padding:4px 6px;width:-moz-fit-content;width:fit-content}.chip.green{color:#0fd197}.chip.blue{color:#2e1e91}.chip-item-blue{background:var(--color-lightGray)}.chip-item-green{background:#e6fff3}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.AppointmentService }, { type: i2.VisitService }, { type: i3.CoreService }, { type: i4.ToastrService }, { type: i5.TranslateService }, { type: i6.MindmapService }, { type: i7.DomSanitizer }, { type: i8.AppConfigService }, { type: i9.NgxRolesService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['environment']
                }] }]; }, propDecorators: { pluginConfigObs: [{
                type: Input
            }], paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }], searchElement: [{
                type: ViewChild,
                args: ['searchInput', { static: true }]
            }], tempPaginator: [{
                type: ViewChild,
                args: ['tempPaginator']
            }], menuTrigger: [{
                type: ViewChild,
                args: [MatMenuTrigger]
            }], tableMatSort: [{
                type: ViewChild,
                args: ['tableMatSort', { static: true }]
            }], visitsCountDate: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZ3JpZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9paC1saWJyYXJ5L3NyYy9saWIvY29tcG9uZW50cy90YWJsZS1ncmlkL3RhYmxlLWdyaWQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWgtbGlicmFyeS9zcmMvbGliL2NvbXBvbmVudHMvdGFibGUtZ3JpZC90YWJsZS1ncmlkLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFVLFNBQVMsRUFBRSxLQUFLLEVBQWlCLHVCQUF1QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUNwSyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzVELE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdkYsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FB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a0JBQWtCO2tCQU45QixTQUFTOytCQUNFLGdCQUFnQixtQkFHVCx1QkFBdUIsQ0FBQyxNQUFNOzswQkFzRDVDLE1BQU07MkJBQUMsYUFBYTs0Q0FsRGQsZUFBZTtzQkFBdkIsS0FBSztnQkFRbUIsU0FBUztzQkFBakMsU0FBUzt1QkFBQyxZQUFZO2dCQUNxQixhQUFhO3NCQUF4RCxTQUFTO3VCQUFDLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBRWQsYUFBYTtzQkFBeEMsU0FBUzt1QkFBQyxlQUFlO2dCQUNDLFdBQVc7c0JBQXJDLFNBQVM7dUJBQUMsY0FBYztnQkFDbUIsWUFBWTtzQkFBdkQsU0FBUzt1QkFBQyxjQUFjLEVBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQWVoQyxlQUFlO3NCQUF4QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPbkluaXQsIFZpZXdDaGlsZCwgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbmplY3QsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBBZnRlclZpZXdJbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdFBhZ2luYXRvciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3BhZ2luYXRvcic7XG5pbXBvcnQgeyBNYXRUYWJsZURhdGFTb3VyY2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90YWJsZSc7XG5pbXBvcnQgeyBBcGlSZXNwb25zZU1vZGVsLCBBcHBvaW50bWVudE1vZGVsLCBDdXN0b21FbmNvdW50ZXJNb2RlbCwgQ3VzdG9tT2JzTW9kZWwsIEN1c3RvbVZpc2l0TW9kZWwsIFByb3ZpZGVyQXR0cmlidXRlTW9kZWwsIFJlc2NoZWR1bGVBcHBvaW50bWVudE1vZGFsUmVzcG9uc2VNb2RlbCwgUGF0aWVudFZpc2l0U3VtbWFyeUNvbmZpZ01vZGVsIH0gZnJvbSAnLi4vLi4vbW9kZWwvbW9kZWwnO1xuaW1wb3J0IHsgQXBwb2ludG1lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXBwb2ludG1lbnQuc2VydmljZSc7XG5pbXBvcnQgeyBWaXNpdFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy92aXNpdC5zZXJ2aWNlJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IENvcmVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY29yZS5zZXJ2aWNlJztcbmltcG9ydCB7IFRvYXN0clNlcnZpY2UgfSBmcm9tICduZ3gtdG9hc3RyJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IGdldENhY2hlRGF0YSwgY2hlY2tJZkRhdGVPbGRUaGFuT25lRGF5IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbGl0eS1mdW5jdGlvbnMnO1xuaW1wb3J0IHsgZG9jdG9yRGV0YWlscywgbGFuZ3VhZ2VzLCB2aXNpdFR5cGVzIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbnN0YW50JztcbmltcG9ydCB7IE1pbmRtYXBTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbWluZG1hcC5zZXJ2aWNlJztcbmltcG9ydCB7IEFwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hdE1lbnVUcmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvbWVudSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmd4Um9sZXNTZXJ2aWNlIH0gZnJvbSAnbmd4LXBlcm1pc3Npb25zJztcbmltcG9ydCB7IE1hdFNvcnQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zb3J0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLXRhYmxlLWdyaWQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFibGUtZ3JpZC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhYmxlLWdyaWQuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgVGFibGVHcmlkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0e1xuICBcbiAgQElucHV0KCkgcGx1Z2luQ29uZmlnT2JzOiBhbnk7XG4gIGRpc3BsYXllZEFwcG9pbnRtZW50Q29sdW1uczogYW55ID0gW107XG4gIGRpc3BsYXllZENvbHVtbnM6IHN0cmluZ1tdID0gW107XG4gIGRhdGFTb3VyY2UgPSBuZXcgTWF0VGFibGVEYXRhU291cmNlPGFueT4oKTtcbiAgcGF0aWVudFJlZ0ZpZWxkczogc3RyaW5nW10gPSBbXTtcbiAgaXNNQ0NVc2VyID0gZmFsc2U7XG4gIHBhZ2VTaXplT3B0aW9ucyA9IFs1LCAxMCwgMjBdO1xuICBcbiAgQFZpZXdDaGlsZChNYXRQYWdpbmF0b3IpIHBhZ2luYXRvcjogTWF0UGFnaW5hdG9yO1xuICBAVmlld0NoaWxkKCdzZWFyY2hJbnB1dCcsIHsgc3RhdGljOiB0cnVlIH0pIHNlYXJjaEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gIGZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybTogRm9ybUdyb3VwO1xuICBAVmlld0NoaWxkKCd0ZW1wUGFnaW5hdG9yJykgdGVtcFBhZ2luYXRvcjogTWF0UGFnaW5hdG9yO1xuICBAVmlld0NoaWxkKE1hdE1lbnVUcmlnZ2VyKSBtZW51VHJpZ2dlcjogTWF0TWVudVRyaWdnZXI7XG4gIEBWaWV3Q2hpbGQoJ3RhYmxlTWF0U29ydCcseyBzdGF0aWM6IHRydWUgfSkgdGFibGVNYXRTb3J0OiBNYXRTb3J0O1xuXG5cbiAgcGFuZWxFeHBhbmRlZDogYm9vbGVhbiA9IHRydWU7XG4gIG1vZGU6ICdkYXRlJyB8ICdyYW5nZScgPSAnZGF0ZSc7XG4gIG1heERhdGU6IERhdGU7XG5cbiAgYXBwb2ludG1lbnRzOiBBcHBvaW50bWVudE1vZGVsW10gPSBbXTtcbiAgcHJpb3JpdHlWaXNpdHM6IEN1c3RvbVZpc2l0TW9kZWxbXSA9IFtdO1xuICBhd2FpdGluZ1Zpc2l0czogQ3VzdG9tVmlzaXRNb2RlbFtdID0gW107XG4gIGluUHJvZ3Jlc3NWaXNpdHM6IEN1c3RvbVZpc2l0TW9kZWxbXSA9IFtdO1xuICBjb21wbGV0ZWRWaXNpdHM6IEN1c3RvbVZpc2l0TW9kZWxbXSA9IFtdO1xuICBmb2xsb3dVcFZpc2l0czogQ3VzdG9tVmlzaXRNb2RlbFtdID0gW107XG5cbiAgc3BlY2lhbGl6YXRpb246IHN0cmluZyA9ICcnO1xuICBAT3V0cHV0KCkgdmlzaXRzQ291bnREYXRlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIHZpc2l0c0xlbmd0aENvdW50OiBudW1iZXIgPSAwO1xuICBpc0ZpbHRlckFwcGxpZWQgPSBmYWxzZTtcbiAgcHZzOiBQYXRpZW50VmlzaXRTdW1tYXJ5Q29uZmlnTW9kZWw7XG4gIGJhc2VVUkw6IGFueTtcbiAgaXNCcmFuZE5hbWU6IHN0cmluZztcblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5kYXRhU291cmNlLnBhZ2luYXRvciA9IHRoaXMucGFnaW5hdG9yO1xuICAgIC8vIHRoaXMuZGF0YVNvdXJjZS5zb3J0ID0gdGhpcy50YWJsZU1hdFNvcnQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFwcG9pbnRtZW50U2VydmljZTogQXBwb2ludG1lbnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgdmlzaXRTZXJ2aWNlOiBWaXNpdFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjb3JlU2VydmljZTogQ29yZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0b2FzdHI6IFRvYXN0clNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgbWluZG1hcFNlcnZpY2U6IE1pbmRtYXBTZXJ2aWNlLFxuICAgIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXG4gICAgcHJpdmF0ZSBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLFxuICAgIHByaXZhdGUgcm9sZXNTZXJ2aWNlOiBOZ3hSb2xlc1NlcnZpY2UsXG4gICAgQEluamVjdCgnZW52aXJvbm1lbnQnKSBlbnZpcm9ubWVudFxuICApIHsgXG4gICAgdGhpcy5iYXNlVVJMID0gZW52aXJvbm1lbnQuYmFzZVVSTDtcbiAgICB0aGlzLmZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybSA9IHRoaXMuY3JlYXRlRmlsdGVyZWREYXRlUmFuZ2VGb3JtKCk7XG4gICAgdGhpcy5pc0JyYW5kTmFtZSA9IGVudmlyb25tZW50LmJyYW5kTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZmlsdGVyZWQgZGF0ZSByYW5nZSBmb3JtIHdpdGggcmVxdWlyZWQgZGF0ZSBmaWVsZHNcbiAgICogQHJldHVybiB7Rm9ybUdyb3VwfSAtIFRoZSBjcmVhdGVkIGZvcm0gZ3JvdXBcbiAgICovXG4gIGNyZWF0ZUZpbHRlcmVkRGF0ZVJhbmdlRm9ybSgpOiBGb3JtR3JvdXAge1xuICAgIHJldHVybiBuZXcgRm9ybUdyb3VwKHtcbiAgICAgIGRhdGU6IG5ldyBGb3JtQ29udHJvbCgnJywgW1ZhbGlkYXRvcnMucmVxdWlyZWRdKSxcbiAgICAgIHN0YXJ0RGF0ZTogbmV3IEZvcm1Db250cm9sKG51bGwsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxuICAgICAgZW5kRGF0ZTogbmV3IEZvcm1Db250cm9sKG51bGwsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxuICAgIH0pO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pc01DQ1VzZXIgPSAhIXRoaXMucm9sZXNTZXJ2aWNlLmdldFJvbGUoJ09SR0FOSVpBVElPTkFMOk1DQycpO1xuXG4gICAgdGhpcy5hcHBDb25maWdTZXJ2aWNlLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICB0aGlzLmRpc3BsYXllZENvbHVtbnMgPSB0aGlzLmRpc3BsYXllZENvbHVtbnMuZmlsdGVyKGNvbD0+KGNvbCE9PSdhZ2UnIHx8IHRoaXMuY2hlY2tQYXRpZW50UmVnRmllbGQoJ0FnZScpKSk7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmFwcENvbmZpZ1NlcnZpY2UucGF0aWVudF9yZWdpc3RyYXRpb24pLmZvckVhY2gob2JqPT57XG4gICAgICAgIHRoaXMucGF0aWVudFJlZ0ZpZWxkcy5wdXNoKC4uLnRoaXMuYXBwQ29uZmlnU2VydmljZS5wYXRpZW50X3JlZ2lzdHJhdGlvbltvYmpdLmZpbHRlcigoZTogeyBpc19lbmFibGVkOiBhbnk7IH0pPT5lLmlzX2VuYWJsZWQpLm1hcCgoZTogeyBuYW1lOiBhbnk7IH0pPT5lLm5hbWUpKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wdnMgPSB7IC4uLnRoaXMuYXBwQ29uZmlnU2VydmljZS5wYXRpZW50X3Zpc2l0X3N1bW1hcnkgfTsgXG4gICAgICB0aGlzLnB2cy5hcHBvaW50bWVudF9idXR0b24gPSB0aGlzLnB2cy5hcHBvaW50bWVudF9idXR0b247XG4gICAgICB0aGlzLmRpc3BsYXllZENvbHVtbnMgPSB0aGlzLmRpc3BsYXllZENvbHVtbnMuZmlsdGVyKGNvbD0+IHtcbiAgICAgICAgaWYoY29sID09PSAnZHJOYW1lJyAmJiAhdGhpcy5pc01DQ1VzZXIpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYoY29sID09PSAnYWdlJykgcmV0dXJuIHRoaXMuY2hlY2tQYXRpZW50UmVnRmllbGQoJ0FnZScpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZighdGhpcy5wdnMuYXdhaXRpbmdfdmlzaXRzX3BhdGllbnRfdHlwZV9kZW1hcmNhdGlvbil7XG4gICAgICAgIHRoaXMuZGlzcGxheWVkQ29sdW1ucyA9IHRoaXMuZGlzcGxheWVkQ29sdW1ucy5maWx0ZXIoY29sPT4oY29sIT09J3BhdGllbnRfdHlwZScpKTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgYXBwIGNvbmZpZycsIGVycm9yKTtcbiAgICB9KTtcblxuICAgIHRoaXMudHJhbnNsYXRlU2VydmljZS51c2UoZ2V0Q2FjaGVEYXRhKGZhbHNlLCBsYW5ndWFnZXMuU0VMRUNURURfTEFOR1VBR0UpKTtcbiAgICBsZXQgcHJvdmlkZXIgPSBnZXRDYWNoZURhdGEodHJ1ZSwgZG9jdG9yRGV0YWlscy5QUk9WSURFUik7XG4gICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICBpZiAocHJvdmlkZXIuYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5zcGVjaWFsaXphdGlvbiA9IHRoaXMuZ2V0U3BlY2lhbGl6YXRpb24ocHJvdmlkZXIuYXR0cmlidXRlcyk7XG4gICAgICB9XG4gICAgICBpZih0aGlzLnBsdWdpbkNvbmZpZ09icz8ucGx1Z2luQ29uZmlnT2JzRmxhZyA9PT0gXCJBcHBvaW50bWVudFwiKXtcbiAgICAgICAgdGhpcy5nZXRBcHBvaW50bWVudHMoKTtcbiAgICAgIH1cbiAgICAgIGlmKHRoaXMucGx1Z2luQ29uZmlnT2JzPy5wbHVnaW5Db25maWdPYnNGbGFnID09PSBcIkF3YWl0aW5nXCIpe1xuICAgICAgICB0aGlzLmdldEF3YWl0aW5nVmlzaXRzKDEpO1xuICAgICAgfVxuICAgICAgaWYodGhpcy5wbHVnaW5Db25maWdPYnM/LnBsdWdpbkNvbmZpZ09ic0ZsYWcgPT09IFwiUHJpb3JpdHlcIil7XG4gICAgICAgIHRoaXMuZ2V0UHJpb3JpdHlWaXNpdHMoMSk7XG4gICAgICB9XG4gICAgICBpZih0aGlzLnBsdWdpbkNvbmZpZ09icz8ucGx1Z2luQ29uZmlnT2JzRmxhZyA9PT0gXCJJblByb2dyZXNzXCIpe1xuICAgICAgICB0aGlzLmdldEluUHJvZ3Jlc3NWaXNpdHMoMSk7XG4gICAgICB9XG4gICAgICBpZih0aGlzLnBsdWdpbkNvbmZpZ09icz8ucGx1Z2luQ29uZmlnT2JzRmxhZyA9PT0gXCJDb21wbGV0ZWRcIil7XG4gICAgICAgIHRoaXMuZ2V0Q29tcGxldGVkVmlzaXRzKCk7XG4gICAgICB9aWYodGhpcy5wbHVnaW5Db25maWdPYnM/LnBsdWdpbkNvbmZpZ09ic0ZsYWcgPT09IFwiRm9sbG93VXBcIil7XG4gICAgICAgIHRoaXMuZ2V0Rm9sbG93VXBWaXNpdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1heERhdGUgPSB0aGlzLnBsdWdpbkNvbmZpZ09icy5maWx0ZXJPYnMuZmlsdGVyRGF0ZU1heDtcbiAgICBpZih0aGlzLnBsdWdpbkNvbmZpZ09icy5oYXNPd25Qcm9wZXJ0eShcInBhZ2VTaXplT3B0aW9uc1wiKSl7XG4gICAgICB0aGlzLnBhZ2VTaXplT3B0aW9ucyA9IHRoaXMucGx1Z2luQ29uZmlnT2JzLnBhZ2VTaXplT3B0aW9uc1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEeW5tYWljIGxhYmVsIERpc3BsYXlcbiAgICogQHBhcmFtIGNoYW5nZXMgcGx1Z2luQ29uZmlnT2JzIFxuICAgKi9cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzW1wicGx1Z2luQ29uZmlnT2JzXCJdICYmIGNoYW5nZXNbXCJwbHVnaW5Db25maWdPYnNcIl0uY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLmRpc3BsYXllZEFwcG9pbnRtZW50Q29sdW1ucyA9IFsuLi5jaGFuZ2VzW1wicGx1Z2luQ29uZmlnT2JzXCJdLmN1cnJlbnRWYWx1ZT8udGFibGVDb2x1bW5zXVxuICAgICAgdGhpcy5kaXNwbGF5ZWRDb2x1bW5zID0gdGhpcy5kaXNwbGF5ZWRBcHBvaW50bWVudENvbHVtbnMubWFwKGNvbHVtbiA9PiBjb2x1bW4ua2V5KTtcbiAgICB9XG4gICAgaWYoICghY2hhbmdlc1sncGx1Z2luQ29uZmlnT2JzJ10uZmlyc3RDaGFuZ2UpICYmIHRoaXMucGx1Z2luQ29uZmlnT2JzLnBsdWdpbkNvbmZpZ09ic0ZsYWcgPT0gXCJBcHBvaW50bWVudFwiICYmIGNoYW5nZXNbXCJwbHVnaW5Db25maWdPYnNcIl0uY3VycmVudFZhbHVlPy50YWJsZUhlYWRlciAhPT0gY2hhbmdlc1tcInBsdWdpbkNvbmZpZ09ic1wiXS5wcmV2aW91c1ZhbHVlPy50YWJsZUhlYWRlcil7XG4gICAgICB0aGlzLmdldEFwcG9pbnRtZW50cygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFJldHJlaXZlIHRoZSBjaGllZiBjb21wbGFpbnRzIGZvciB0aGUgdmlzaXRcbiAgKiBAcGFyYW0ge0N1c3RvbVZpc2l0TW9kZWx9IHZpc2l0IC0gVmlzaXRcbiAgKiBAcmV0dXJuIHtzdHJpbmdbXX0gLSBDaGllZiBjb21wbGFpbnRzIGFycmF5XG4gICovXG4gIGdldENoZWlmQ29tcGxhaW50KHZpc2l0OiBDdXN0b21WaXNpdE1vZGVsKTogc3RyaW5nW10ge1xuICAgIGxldCByZWNlbnQ6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgZW5jb3VudGVycyA9IHZpc2l0LmVuY291bnRlcnM7XG4gICAgZW5jb3VudGVycy5mb3JFYWNoKChlbmNvdW50ZXI6IEN1c3RvbUVuY291bnRlck1vZGVsKSA9PiB7XG4gICAgICBjb25zdCBkaXNwbGF5ID0gZW5jb3VudGVyLnR5cGU/Lm5hbWU7XG4gICAgICBpZiAoZGlzcGxheS5tYXRjaCh2aXNpdFR5cGVzLkFEVUxUSU5JVElBTCkgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3Qgb2JzID0gZW5jb3VudGVyLm9icztcbiAgICAgICAgb2JzLmZvckVhY2goKGN1cnJlbnRPYnM6IEN1c3RvbU9ic01vZGVsKSA9PiB7XG4gICAgICAgICAgaWYgKGN1cnJlbnRPYnMuY29uY2VwdF9pZCA9PSAxNjMyMTIpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb21wbGFpbnQgPSB0aGlzLnZpc2l0U2VydmljZS5nZXREYXRhMihjdXJyZW50T2JzKT8udmFsdWVfdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAoJ+KWuicsICdnJyksICcnKS5zcGxpdCgnPGI+Jyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGN1cnJlbnRDb21wbGFpbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3Qgb2JzMSA9IGN1cnJlbnRDb21wbGFpbnRbaV0uc3BsaXQoJzwnKTtcbiAgICAgICAgICAgICAgaWYgKCFvYnMxWzBdLm1hdGNoKHZpc2l0VHlwZXMuQVNTT0NJQVRFRF9TWU1QVE9NUykpIHtcbiAgICAgICAgICAgICAgICByZWNlbnQucHVzaChvYnMxWzBdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlY2VudDtcbiAgfVxuXG4gIC8qKlxuICAqIENoZWNrIGhvdyBvbGQgdGhlIGRhdGUgaXMgZnJvbSBub3dcbiAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSAtIERhdGUgaW4gc3RyaW5nIGZvcm1hdFxuICAqIEByZXR1cm4ge3N0cmluZ30gLSBSZXR1cm5zIGhvdyBvbGQgdGhlIGRhdGUgaXMgZnJvbSBub3dcbiAgKi9cbiAgY2hlY2tJZkRhdGVPbGRUaGFuT25lRGF5KGRhdGE6IHN0cmluZykge1xuICAgIGxldCBob3VycyA9IG1vbWVudChkYXRhKS5kaWZmKG1vbWVudCgpLCAnaG91cnMnKTtcbiAgICBsZXQgbWludXRlcyA9IG1vbWVudChkYXRhKS5kaWZmKG1vbWVudCgpLCAnbWludXRlcycpO1xuICAgIGlmKGhvdXJzID4gMjQpIHtcbiAgICAgIHJldHVybiBtb21lbnQoZGF0YSkuZm9ybWF0KCdERCBNTU0sIFlZWVkgaGg6bW0gQScpO1xuICAgIH07XG4gICAgaWYgKGhvdXJzIDwgMSkge1xuICAgICAgaWYobWludXRlcyA8IDApIHJldHVybiBgRHVlIDogJHttb21lbnQoZGF0YSkuZm9ybWF0KCdERCBNTU0sIFlZWVkgaGg6bW0gQScpfWA7XG4gICAgICByZXR1cm4gYCR7bWludXRlc30gbWludXRlc2A7XG4gICAgfVxuICAgIHJldHVybiBgJHtob3Vyc30gaHJzYDtcbiAgfVxuXG4gIC8qKlxuICAqIFJlc2NoZWR1bGUgYXBwb2ludG1lbnRcbiAgKiBAcGFyYW0ge0FwcG9pbnRtZW50TW9kZWx9IGFwcG9pbnRtZW50IC0gQXBwb2ludG1lbnQgdG8gYmUgcmVzY2hlZHVsZWRcbiAgKiBAcmV0dXJuIHt2b2lkfVxuICAqL1xuICByZXNjaGVkdWxlKGFwcG9pbnRtZW50OiBBcHBvaW50bWVudE1vZGVsKSB7XG4gICAgY29uc3QgbGVuID0gYXBwb2ludG1lbnQudmlzaXQuZW5jb3VudGVycy5maWx0ZXIoKGU6IEN1c3RvbUVuY291bnRlck1vZGVsKSA9PiB7XG4gICAgICByZXR1cm4gKGUudHlwZS5uYW1lID09IHZpc2l0VHlwZXMuUEFUSUVOVF9FWElUX1NVUlZFWSB8fCBlLnR5cGUubmFtZSA9PSB2aXNpdFR5cGVzLlZJU0lUX0NPTVBMRVRFKTtcbiAgICB9KS5sZW5ndGg7XG4gICAgY29uc3QgaXNDb21wbGV0ZWQgPSBCb29sZWFuKGxlbik7XG4gICAgaWYgKGlzQ29tcGxldGVkKSB7XG4gICAgICB0aGlzLnRvYXN0ci5lcnJvcih0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChcIlZpc2l0IGlzIGFscmVhZHkgY29tcGxldGVkLCBpdCBjYW4ndCBiZSByZXNjaGVkdWxlZC5cIiksIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdSZXNjaGVkdWxpbmcgZmFpbGVkIScpKTtcbiAgICB9IGVsc2UgaWYoYXBwb2ludG1lbnQudmlzaXRTdGF0dXMgPT0gJ1Zpc2l0IEluIFByb2dyZXNzJyAmJiB0aGlzLnBsdWdpbkNvbmZpZ09icy50YWJsZUhlYWRlciAhPT0gXCJQZW5kaW5nIFZpc2l0c1wiICYmIHRoaXMuaXNCcmFuZE5hbWUgIT09ICdLQ0RPJykge1xuICAgICAgdGhpcy50b2FzdHIuZXJyb3IodGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXCJWaXNpdCBpcyBpbiBwcm9ncmVzcywgaXQgY2FuJ3QgYmUgcmVzY2hlZHVsZWQuXCIpLCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCgnUmVzY2hlZHVsaW5nIGZhaWxlZCEnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29yZVNlcnZpY2Uub3BlblJlc2NoZWR1bGVBcHBvaW50bWVudE1vZGFsKGFwcG9pbnRtZW50KS5zdWJzY3JpYmUoKHJlczogUmVzY2hlZHVsZUFwcG9pbnRtZW50TW9kYWxSZXNwb25zZU1vZGVsKSA9PiB7XG4gICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICBsZXQgbmV3U2xvdCA9IHJlcztcbiAgICAgICAgICB0aGlzLmNvcmVTZXJ2aWNlLm9wZW5SZXNjaGVkdWxlQXBwb2ludG1lbnRDb25maXJtTW9kYWwoeyBhcHBvaW50bWVudCwgbmV3U2xvdCB9KS5zdWJzY3JpYmUoKHJlc3VsdDogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICBhcHBvaW50bWVudC5hcHBvaW50bWVudElkID0gYXBwb2ludG1lbnQuaWQ7XG4gICAgICAgICAgICAgIGFwcG9pbnRtZW50LnNsb3REYXRlID0gbW9tZW50KG5ld1Nsb3QuZGF0ZSwgXCJZWVlZLU1NLUREXCIpLmZvcm1hdCgnREQvTU0vWVlZWScpO1xuICAgICAgICAgICAgICBhcHBvaW50bWVudC5zbG90VGltZSA9IG5ld1Nsb3Quc2xvdDtcbiAgICAgICAgICAgICAgdGhpcy5hcHBvaW50bWVudFNlcnZpY2UucmVzY2hlZHVsZUFwcG9pbnRtZW50KGFwcG9pbnRtZW50KS5zdWJzY3JpYmUoKHJlczogQXBpUmVzcG9uc2VNb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSByZXMubWVzc2FnZTtcbiAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgdGhpcy5taW5kbWFwU2VydmljZS5ub3RpZnlId0ZvclJlc2NoZWR1bGVBcHBvaW50bWVudChhcHBvaW50bWVudCk7XG4gICAgICAgICAgICAgICAgICB0aGlzLmdldEFwcG9pbnRtZW50cygpO1xuICAgICAgICAgICAgICAgICAgdGhpcy50b2FzdHIuc3VjY2Vzcyh0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChcIlRoZSBhcHBvaW50bWVudCBoYXMgYmVlbiByZXNjaGVkdWxlZCBzdWNjZXNzZnVsbHkhXCIpLCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCgnUmVzY2hlZHVsaW5nIHN1Y2Nlc3NmdWwhJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnRvYXN0ci5zdWNjZXNzKG1lc3NhZ2UsIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdSZXNjaGVkdWxpbmcgZmFpbGVkIScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBDYW5jZWwgYXBwb2ludG1lbnRcbiAgKiBAcGFyYW0ge0FwcG9pbnRtZW50TW9kZWx9IGFwcG9pbnRtZW50IC0gQXBwb2ludG1lbnQgdG8gYmUgcmVzY2hlZHVsZWRcbiAgKiBAcmV0dXJuIHt2b2lkfVxuICAqL1xuICBjYW5jZWwoYXBwb2ludG1lbnQ6IEFwcG9pbnRtZW50TW9kZWwpIHtcbiAgICBpZiAoYXBwb2ludG1lbnQudmlzaXRTdGF0dXMgPT0gJ1Zpc2l0IEluIFByb2dyZXNzJyAmJiB0aGlzLnBsdWdpbkNvbmZpZ09icy50YWJsZUhlYWRlciAhPT0gXCJQZW5kaW5nIFZpc2l0c1wiKSB7XG4gICAgICB0aGlzLnRvYXN0ci5lcnJvcih0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChcIlZpc2l0IGlzIGluIHByb2dyZXNzLCBpdCBjYW4ndCBiZSBjYW5jZWxsZWQuXCIpLCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCgnQ2FuY2VsaW5nIGZhaWxlZCEnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY29yZVNlcnZpY2Uub3BlbkNvbmZpcm1DYW5jZWxBcHBvaW50bWVudE1vZGFsKGFwcG9pbnRtZW50KS5zdWJzY3JpYmUoKHJlczogYm9vbGVhbikgPT4ge1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICB0aGlzLnRvYXN0ci5zdWNjZXNzKHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdUaGUgQXBwb2ludG1lbnQgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGNhbmNlbGVkLicpLHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdDYW5jZWxpbmcgc3VjY2Vzc2Z1bCcpKTtcbiAgICAgICAgdGhpcy5nZXRBcHBvaW50bWVudHMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEdldCB1c2VyIHV1aWQgZnJvbSBsb2NhbHN0b3JhZ2UgdXNlclxuICAqIEByZXR1cm4ge3N0cmluZ30gLSBVc2VyIHV1aWRcbiAgKi9cbiAgZ2V0IHVzZXJJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBnZXRDYWNoZURhdGEodHJ1ZSwgZG9jdG9yRGV0YWlscy5VU0VSKS51dWlkO1xuICB9XG5cbiAgLyoqXG4gICogQXBwbHkgZmlsdGVyIG9uIGEgZGF0YXNvdXJjZVxuICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gSW5wdXQncyBjaGFuZ2UgZXZlbnRcbiAgKiBAcmV0dXJuIHt2b2lkfVxuICAqL1xuICBhcHBseUZpbHRlcihldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgdGhpcy5kYXRhU291cmNlLmZpbHRlciA9IGZpbHRlclZhbHVlLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMuaXNGaWx0ZXJBcHBsaWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAqIENsZWFyIGZpbHRlciBmcm9tIGEgZGF0YXNvdXJjZVxuICAqIEByZXR1cm4ge3ZvaWR9XG4gICovXG4gIGNsZWFyRmlsdGVyKCkge1xuICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXIgPSBudWxsO1xuICAgIHRoaXMuc2VhcmNoRWxlbWVudC5uYXRpdmVFbGVtZW50LnZhbHVlID0gXCJcIjtcbiAgICB0aGlzLmlzRmlsdGVyQXBwbGllZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZmllbGQgaXMgaW4gcGF0aWVudCByZWdpc3RyYXRpb24gZmllbGRzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZE5hbWUgLSBUaGUgZmllbGQgbmFtZVxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRydWUgaWYgcHJlc2VudCwgZWxzZSBmYWxzZVxuICAgKi9cbiAgY2hlY2tQYXRpZW50UmVnRmllbGQoZmllbGROYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wYXRpZW50UmVnRmllbGRzLmluZGV4T2YoZmllbGROYW1lKSAhPT0gLTE7XG4gIH1cblxuICAvKipcbiAgKiBSZXR1cm5zIHRoZSBXaGF0c0FwcCBsaW5rIGZvciBhIGdpdmVuIHRlbGVwaG9uZSBudW1iZXJcbiAgKiBAcGFyYW0ge3N0cmluZ30gdGVsZXBob25lTnVtYmVyIC0gVGhlIHRlbGVwaG9uZSBudW1iZXIgdG8gZ2VuZXJhdGUgdGhlIGxpbmsgZm9yXG4gICogQHJldHVybiB7c3RyaW5nfSAtIFRoZSBXaGF0c0FwcCBsaW5rXG4gICovXG4gIGdldFdoYXRzQXBwTGluayh0ZWxlcGhvbmVOdW1iZXI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudmlzaXRTZXJ2aWNlLmdldFdoYXRzYXBwTGluayh0ZWxlcGhvbmVOdW1iZXIpO1xuICB9XG4gIFxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSB0ZWxlcGhvbmUgbnVtYmVyIGZyb20gdGhlIHBlcnNvbidzIGF0dHJpYnV0ZXNcbiAgICogQHBhcmFtIHtBcHBvaW50bWVudE1vZGVsWyd2aXNpdCddWydwZXJzb24nXX0gcGVyc29uIC0gVGhlIHBlcnNvbiBvYmplY3QgY29udGFpbmluZyBhdHRyaWJ1dGVzXG4gICAqIEByZXR1cm4ge3N0cmluZyB8IHVuZGVmaW5lZH0gLSBUaGUgcGVyc29uJ3MgdGVsZXBob25lIG51bWJlciBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kXG4gICAqL1xuICBnZXRUZWxlcGhvbmVOdW1iZXIocGVyc29uOiBBcHBvaW50bWVudE1vZGVsWyd2aXNpdCddWydwZXJzb24nXSkge1xuICAgIHJldHVybiBwZXJzb24/LnBlcnNvbl9hdHRyaWJ1dGUuZmluZCgodjogeyBwZXJzb25fYXR0cmlidXRlX3R5cGVfaWQ6IG51bWJlcjsgfSkgPT4gdi5wZXJzb25fYXR0cmlidXRlX3R5cGVfaWQgPT0gOCk/LnZhbHVlO1xuICB9XG5cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBtZW51IGlmIGl0J3Mgb3BlblxuICAgKi9cbiAgY2xvc2VNZW51KCkge1xuICAgIGlmICh0aGlzLm1lbnVUcmlnZ2VyKSB7XG4gICAgICB0aGlzLm1lbnVUcmlnZ2VyLmNsb3NlTWVudSgpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG1vZGUgZm9yIHRoZSBjb21wb25lbnQgKGVpdGhlciAnZGF0ZScgb3IgJ3JhbmdlJylcbiAgICogQHBhcmFtIHsnZGF0ZScgfCAncmFuZ2UnfSBtb2RlIC0gVGhlIG1vZGUgdG8gc2V0XG4gICAqL1xuICBzZXRNb2RlKG1vZGU6ICdkYXRlJyB8ICdyYW5nZScpIHtcbiAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICB9XG5cblxuICAvKipcbiAgICogRm9ybWF0cyBhIGRhdGUgaW50byAnWVlZWS1NTS1ERCcgZm9ybWF0XG4gICAqIEBwYXJhbSB7YW55fSBkYXRlIC0gVGhlIGRhdGUgdG8gZm9ybWF0XG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBUaGUgZm9ybWF0dGVkIGRhdGVcbiAgICovXG4gIGZvcm1hdERhdGUoZGF0ZTogYW55KTogc3RyaW5nIHtcbiAgICBjb25zdCBsb2NhbERhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICBjb25zdCB5ZWFyID0gbG9jYWxEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgY29uc3QgbW9udGggPSBTdHJpbmcobG9jYWxEYXRlLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIGNvbnN0IGRheSA9IFN0cmluZyhsb2NhbERhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIHJldHVybiBgJHt5ZWFyfS0ke21vbnRofS0ke2RheX1gO1xuICB9XG5cblxuICAvKipcbiAgICogQ29udmVydHMgYSByZWxhdGl2ZSB0aW1lIHN0cmluZyAoZS5nLiwgXCIyIGhvdXJzXCIsIFwiMSBkYXlcIikgdG8gYSBkYXRlIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVUaW1lIC0gVGhlIHJlbGF0aXZlIHRpbWUgc3RyaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBUaGUgcmVzdWx0aW5nIGRhdGUgaW4gJ1lZWVktTU0tREQnIGZvcm1hdFxuICAgKiBAdGhyb3dzIHtFcnJvcn0gLSBUaHJvd3MgZXJyb3IgZm9yIGludmFsaWQgdGltZSB1bml0c1xuICAgKi9cbiAgY29udmVydFRvRGF0ZShyZWxhdGl2ZVRpbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBbdmFsdWUsIHVuaXRdID0gcmVsYXRpdmVUaW1lLnNwbGl0KCcgJyk7XG4gICAgY29uc3QgYW1vdW50ID0gcGFyc2VJbnQodmFsdWUsIDEwKTsgICAgXG4gICAgXG4gICAgaWYgKFsnaG91cicsICdob3VycyddLmluY2x1ZGVzKHVuaXQudG9Mb3dlckNhc2UoKSkpIG5vdy5zZXRIb3Vycyhub3cuZ2V0SG91cnMoKSAtIGFtb3VudCk7XG4gICAgZWxzZSBpZiAoWydtaW51dGUnLCAnbWludXRlcyddLmluY2x1ZGVzKHVuaXQudG9Mb3dlckNhc2UoKSkpIG5vdy5zZXRNaW51dGVzKG5vdy5nZXRNaW51dGVzKCkgLSBhbW91bnQpO1xuICAgIGVsc2UgaWYgKFsnZGF5JywgJ2RheXMnXS5pbmNsdWRlcyh1bml0LnRvTG93ZXJDYXNlKCkpKSBub3cuc2V0RGF0ZShub3cuZ2V0RGF0ZSgpIC0gYW1vdW50KTtcbiAgICBlbHNlIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0aW1lIHVuaXQuIE9ubHkgXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgb3IgXCJkYXlzXCIgYXJlIHN1cHBvcnRlZC4nKTtcblxuICAgIHJldHVybiBub3cudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgZm9sbG93LXVwIGRhdGUgc3RyaW5nIHRvIElTTyBmb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvbGxvd1VwIC0gVGhlIGZvbGxvdy11cCBkYXRlIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gVGhlIGZvbGxvdy11cCBkYXRlIGluIElTTyBzdHJpbmcgZm9ybWF0XG4gICAqL1xuICBjb252ZXJ0VG9JU08oZm9sbG93VXA6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGZvbGxvd1VwKTtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkpO1xuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBBcHBsaWVzIGRhdGUgb3IgcmFuZ2UgZmlsdGVyIHRvIHRoZSBkYXRhIHNvdXJjZSBiYXNlZCBvbiBzZWxlY3RlZCBkYXRlKHMpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlRmllbGQgLSBUaGUgZmllbGQgbmFtZSBmb3IgdGhlIGRhdGUgdG8gZmlsdGVyXG4gICAqL1xuICBhcHBseURhdGVPclJhbmdlRmlsdGVyKGRhdGVGaWVsZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWREYXRlID0gdGhpcy5maWx0ZXJlZERhdGVBbmRSYW5nZUZvcm0uZ2V0KCdkYXRlJyk/LnZhbHVlO1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IHRoaXMuZmlsdGVyZWREYXRlQW5kUmFuZ2VGb3JtLmdldCgnc3RhcnREYXRlJyk/LnZhbHVlO1xuICAgIGNvbnN0IGVuZERhdGUgPSB0aGlzLmZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybS5nZXQoJ2VuZERhdGUnKT8udmFsdWU7XG4gIFxuICAgIGlmIChzZWxlY3RlZERhdGUpIHtcbiAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSB0aGlzLmZvcm1hdERhdGUoc2VsZWN0ZWREYXRlKTtcblxuICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlclByZWRpY2F0ZSA9IChkYXRhOiBhbnksIGZpbHRlcjogc3RyaW5nKSA9PiB7XG4gICAgICAgIGxldCBpdGVtRGF0ZTtcbiAgICAgICAgaWYoZGF0ZUZpZWxkID09PSBcImZvbGxvd1VwXCIpe1xuICAgICAgICAgIGl0ZW1EYXRlID0gdGhpcy5mb3JtYXREYXRlKHRoaXMuY29udmVydFRvSVNPKGRhdGEuZm9sbG93VXApKTtcbiAgICAgICAgfSBlbHNlIGlmKGRhdGVGaWVsZCA9PT0gXCJzbG90SnNEYXRlXCIpe1xuICAgICAgICAgIGl0ZW1EYXRlID0gdGhpcy5mb3JtYXREYXRlKGRhdGFbZGF0ZUZpZWxkXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbURhdGUgPSBkYXRhW2RhdGVGaWVsZF0uaW5jbHVkZXMoJywnKSA/IHRoaXMuZm9ybWF0RGF0ZShkYXRhW2RhdGVGaWVsZF0pIDogdGhpcy5jb252ZXJ0VG9EYXRlKGRhdGFbZGF0ZUZpZWxkXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1EYXRlID09PSBmaWx0ZXI7XG4gICAgICB9O1xuICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlciA9IGZvcm1hdHRlZERhdGU7XG4gICAgfSBlbHNlIGlmIChzdGFydERhdGUgJiYgZW5kRGF0ZSkge1xuICAgICAgY29uc3QgZm9ybWF0dGVkU3RhcnREYXRlID0gdGhpcy5mb3JtYXREYXRlKHN0YXJ0RGF0ZSk7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRFbmREYXRlID0gdGhpcy5mb3JtYXREYXRlKGVuZERhdGUpO1xuICBcbiAgICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXJQcmVkaWNhdGUgPSAoZGF0YTogYW55LCBmaWx0ZXI6IHN0cmluZykgPT4ge1xuICAgICAgICBsZXQgaXRlbURhdGU7XG4gICAgICAgIGlmKGRhdGVGaWVsZCA9PT0gXCJmb2xsb3dVcFwiKXtcbiAgICAgICAgICBpdGVtRGF0ZSA9IHRoaXMuZm9ybWF0RGF0ZSh0aGlzLmNvbnZlcnRUb0lTTyhkYXRhLmZvbGxvd1VwKSk7XG4gICAgICAgIH0gZWxzZSBpZihkYXRlRmllbGQgPT09IFwic2xvdEpzRGF0ZVwiKXtcbiAgICAgICAgICBpdGVtRGF0ZSA9IHRoaXMuZm9ybWF0RGF0ZShkYXRhW2RhdGVGaWVsZF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1EYXRlID0gZGF0YVtkYXRlRmllbGRdLmluY2x1ZGVzKCcsJykgPyB0aGlzLmZvcm1hdERhdGUoZGF0YVtkYXRlRmllbGRdKSA6IHRoaXMuY29udmVydFRvRGF0ZShkYXRhW2RhdGVGaWVsZF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtRGF0ZSA+PSBmb3JtYXR0ZWRTdGFydERhdGUgJiYgaXRlbURhdGUgPD0gZm9ybWF0dGVkRW5kRGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXIgPSBgJHtmb3JtYXR0ZWRTdGFydERhdGV9OiR7Zm9ybWF0dGVkRW5kRGF0ZX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGFTb3VyY2UuZmlsdGVyID0gJyc7XG4gICAgfVxuICAgIHRoaXMudGVtcFBhZ2luYXRvci5maXJzdFBhZ2UoKTtcbiAgICB0aGlzLmNsb3NlTWVudSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgZGF0ZSBmaWx0ZXIgZm9ybSBhbmQgY2xlYXJzIHRoZSBkYXRhIHNvdXJjZSBmaWx0ZXJcbiAgICogQHBhcmFtIHtib29sZWFufSBmbGFnIC0gSWYgdHJ1ZSwgZG9lc24ndCBjbG9zZSB0aGUgbWVudVxuICAgKi9cbiAgcmVzZXREYXRlKGZsYWc6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIHRoaXMuZmlsdGVyZWREYXRlQW5kUmFuZ2VGb3JtLnJlc2V0KCk7XG4gICAgdGhpcy5kYXRhU291cmNlLmZpbHRlciA9ICcnO1xuICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXJQcmVkaWNhdGUgPSAoZGF0YSwgZmlsdGVyOiBzdHJpbmcpID0+IGRhdGE/Lm9wZW5NcnNJZC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSAhPSAtMSB8fCBkYXRhPy5wYXRpZW50TmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSAhPSAtMTtcbiAgICBpZiAoIWZsYWcpIHtcbiAgICAgIHRoaXMuY2xvc2VNZW51KCk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgc3BlY2lmaWMgYXR0cmlidXRlIGRhdGEgZnJvbSB0aGUgcGVyc29uJ3MgYXR0cmlidXRlc1xuICAgKiBAcGFyYW0ge2FueX0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBjb250YWluaW5nIHBlcnNvbiBhdHRyaWJ1dGVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byByZXRyaWV2ZVxuICAgKiBAcmV0dXJuIHtPYmplY3QgfCBudWxsfSAtIFRoZSBhdHRyaWJ1dGUgbmFtZSBhbmQgdmFsdWUsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAqL1xuICBnZXRBdHRyaWJ1dGVEYXRhKGRhdGE6IGFueSwgYXR0cmlidXRlTmFtZTogc3RyaW5nKTogeyBuYW1lOiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfSB8IG51bGwge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEucGVyc29uX2F0dHJpYnV0ZSkpIHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGRhdGEucGVyc29uX2F0dHJpYnV0ZS5maW5kKFxuICAgICAgICAoYXR0cjogYW55KSA9PiBhdHRyLnBlcnNvbl9hdHRyaWJ1dGVfdHlwZT8ubmFtZSA9PT0gYXR0cmlidXRlTmFtZVxuICAgICAgKTtcbiAgICAgIGlmIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiBhdHRyaWJ1dGUucGVyc29uX2F0dHJpYnV0ZV90eXBlLm5hbWUsXG4gICAgICAgICAgdmFsdWU6IGF0dHJpYnV0ZS52YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAqIEdldCBib29rZWQgYXBwb2ludG1lbnRzIGZvciBhIGxvZ2dlZC1pbiBkb2N0b3IgaW4gYSBjdXJyZW50IHllYXJcbiAgKiBAcmV0dXJuIHt2b2lkfVxuICAqL1xuICBnZXRBcHBvaW50bWVudHMoKSB7XG4gICAgdGhpcy5hcHBvaW50bWVudHMgPSBbXTtcbiAgICBsZXQgZnJvbURhdGUgPSBtb21lbnQoKS5zdGFydE9mKCd5ZWFyJykuZm9ybWF0KCdERC9NTS9ZWVlZJyk7XG4gICAgbGV0IHRvRGF0ZSA9IG1vbWVudCgpLmVuZE9mKCd5ZWFyJykuZm9ybWF0KCdERC9NTS9ZWVlZJyk7XG4gICAgbGV0IHBlbmRpbmdfdmlzaXRzID0gdGhpcy5wbHVnaW5Db25maWdPYnMuZmlsdGVyPy5oYXNPd25Qcm9wZXJ0eShcInBlbmRpbmdfdmlzaXRzXCIpICA/IHRoaXMucGx1Z2luQ29uZmlnT2JzLmZpbHRlcj8ucGVuZGluZ192aXNpdHMgOiBudWxsO1xuICAgIGlmKHRoaXMucGx1Z2luQ29uZmlnT2JzPy5maWx0ZXIpe1xuICAgICAgZnJvbURhdGUgPSB0aGlzLnBsdWdpbkNvbmZpZ09icz8uZmlsdGVyPy5mcm9tRGF0ZVxuICAgICAgdG9EYXRlID0gdGhpcy5wbHVnaW5Db25maWdPYnM/LmZpbHRlcj8udG9EYXRlXG4gICAgfVxuICAgIHRoaXMuYXBwb2ludG1lbnRTZXJ2aWNlLmdldFVzZXJTbG90cyhnZXRDYWNoZURhdGEodHJ1ZSwgZG9jdG9yRGV0YWlscy5VU0VSKS51dWlkLCBmcm9tRGF0ZSwgdG9EYXRlLCB0aGlzLmlzTUNDVXNlciA/IHRoaXMuc3BlY2lhbGl6YXRpb24gOiBudWxsLCBwZW5kaW5nX3Zpc2l0cylcbiAgICAgIC5zdWJzY3JpYmUoKHJlczogQXBpUmVzcG9uc2VNb2RlbCkgPT4geyAgICAgICAgXG4gICAgICAgIHRoaXMudmlzaXRzTGVuZ3RoQ291bnQgPSByZXMuZGF0YT8ubGVuZ3RoO1xuICAgICAgICB0aGlzLmVtaXRWaXNpdHNDb3VudCh0aGlzLnZpc2l0c0xlbmd0aENvdW50KTtcbiAgICAgICAgbGV0IGFwcG9pbnRtZW50c2RhdGEgPSByZXMuZGF0YTtcbiAgICAgICAgYXBwb2ludG1lbnRzZGF0YS5mb3JFYWNoKChhcHBvaW50bWVudDogQXBwb2ludG1lbnRNb2RlbCkgPT4ge1xuICAgICAgICAgIGlmIChhcHBvaW50bWVudC5zdGF0dXMgPT0gJ2Jvb2tlZCcgJiYgKGFwcG9pbnRtZW50LnZpc2l0U3RhdHVzID09ICdBd2FpdGluZyBDb25zdWx0J3x8YXBwb2ludG1lbnQudmlzaXRTdGF0dXMgPT0gJ1Zpc2l0IEluIFByb2dyZXNzJykpIHtcbiAgICAgICAgICAgIGlmIChhcHBvaW50bWVudC52aXNpdCkge1xuICAgICAgICAgICAgICBhcHBvaW50bWVudC5jaGVpZl9jb21wbGFpbnQgPSB0aGlzLmdldENoZWlmQ29tcGxhaW50KGFwcG9pbnRtZW50LnZpc2l0KTtcbiAgICAgICAgICAgICAgYXBwb2ludG1lbnQuc3RhcnRzX2luID0gY2hlY2tJZkRhdGVPbGRUaGFuT25lRGF5KGFwcG9pbnRtZW50LnNsb3RKc0RhdGUpO1xuICAgICAgICAgICAgICBhcHBvaW50bWVudC50ZWxlcGhvbmUgPSB0aGlzLmdldFRlbGVwaG9uZU51bWJlcihhcHBvaW50bWVudD8udmlzaXQ/LnBlcnNvbik7XG4gICAgICAgICAgICAgIGFwcG9pbnRtZW50LlRNSF9wYXRpZW50X2lkID0gdGhpcy5nZXRBdHRyaWJ1dGVEYXRhKGFwcG9pbnRtZW50LnZpc2l0LCBcIlRNSCBDYXNlIE51bWJlclwiKT8udmFsdWU7XG4gICAgICAgICAgICAgIGFwcG9pbnRtZW50LnV1aWQgPSBhcHBvaW50bWVudC52aXNpdFV1aWQ7XG4gICAgICAgICAgICAgIGFwcG9pbnRtZW50LmxvY2F0aW9uID0gYXBwb2ludG1lbnQ/LnZpc2l0Py5sb2NhdGlvbj8ubmFtZTtcbiAgICAgICAgICAgICAgYXBwb2ludG1lbnQuYWdlID0gYXBwb2ludG1lbnQ/LnBhdGllbnRBZ2UgKyAnICcgKyB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCgneScpO1xuICAgICAgICAgICAgICB0aGlzLmFwcG9pbnRtZW50cy5wdXNoKGFwcG9pbnRtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IFsuLi50aGlzLmFwcG9pbnRtZW50c107XG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZS5wYWdpbmF0b3IgPSB0aGlzLnBhZ2luYXRvcjtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlLnNvcnQgPSB0aGlzLnRhYmxlTWF0U29ydDtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlclByZWRpY2F0ZSA9IChkYXRhLCBmaWx0ZXI6IHN0cmluZykgPT4gZGF0YT8ub3Blbk1yc0lkLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xIHx8IGRhdGE/LnBhdGllbnROYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xO1xuICAgICAgfSk7XG4gIH1cbiAgXG4gIFxuICAvKipcbiAgKiBHZXQgZG9jdG9yIHNwZWNpYWxpdHlcbiAgKiBAcGFyYW0ge1Byb3ZpZGVyQXR0cmlidXRlTW9kZWxbXX0gYXR0ciAtIEFycmF5IG9mIHByb3ZpZGVyIGF0dHJpYnV0ZXNcbiAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gRG9jdG9yIHNwZWNpYWxpdHlcbiAgKi9cbiAgZ2V0U3BlY2lhbGl6YXRpb24oYXR0cjogUHJvdmlkZXJBdHRyaWJ1dGVNb2RlbFtdKSB7XG4gICAgbGV0IHNwZWNpYWxpemF0aW9uID0gJyc7XG4gICAgYXR0ci5mb3JFYWNoKChhOiBQcm92aWRlckF0dHJpYnV0ZU1vZGVsKSA9PiB7XG4gICAgICBpZiAoYS5hdHRyaWJ1dGVUeXBlLnV1aWQgPT0gJ2VkMTcxNWY1LTkzZTItNDA0ZS1iM2M5LTJhMmQ5NjAwZjA2MicgJiYgIWEudm9pZGVkKSB7XG4gICAgICAgIHNwZWNpYWxpemF0aW9uID0gYS52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3BlY2lhbGl6YXRpb247XG4gIH1cblxuICAvKipcbiAgKiBSZXR1cm5zIHRoZSBhZ2UgaW4geWVhcnMgZnJvbSB0aGUgYmlydGhkYXRlXG4gICogQHBhcmFtIHtzdHJpbmd9IGJpcnRoZGF0ZSAtIERhdGUgaW4gc3RyaW5nIGZvcm1hdFxuICAqIEByZXR1cm4ge251bWJlcn0gLSBBZ2VcbiAgKi9cbiAgY2FsY3VsYXRlQWdlKGJpcnRoZGF0ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG1vbWVudCgpLmRpZmYoYmlydGhkYXRlLCAneWVhcnMnKTtcbiAgfVxuXG4gIC8qKlxuICAqIFJldHVybnMgdGhlIGNyZWF0ZWQgdGltZSBpbiB3b3JkcyBmcm9tIHRoZSBkYXRlXG4gICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgLSBEYXRlXG4gICogQHJldHVybiB7c3RyaW5nfSAtIENyZWF0ZWQgdGltZSBpbiB3b3JkcyBmcm9tIHRoZSBkYXRlXG4gICovXG4gIGdldENyZWF0ZWRBdChkYXRhOiBzdHJpbmcpIHtcbiAgICBsZXQgaG91cnMgPSBtb21lbnQoKS5kaWZmKG1vbWVudChkYXRhKSwgJ2hvdXJzJyk7XG4gICAgbGV0IG1pbnV0ZXMgPSBtb21lbnQoKS5kaWZmKG1vbWVudChkYXRhKSwgJ21pbnV0ZXMnKTtcbiAgICBpZiAoaG91cnMgPiAyNCkge1xuICAgICAgcmV0dXJuIG1vbWVudChkYXRhKS5mb3JtYXQoJ0REIE1NTSwgWVlZWScpO1xuICAgIH07XG4gICAgaWYgKGhvdXJzIDwgMSkge1xuICAgICAgcmV0dXJuIGAke21pbnV0ZXN9ICR7dGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXCJNaW51dGVzIGFnb1wiKX1gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7aG91cnN9ICR7dGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXCJIb3VycyBhZ29cIil9YDtcbiAgfVxuICBcbiAgLyoqXG4gICogR2V0IGVuY291bnRlciBkYXRldGltZSBmb3IgYSBnaXZlbiBlbmNvdW50ZXIgdHlwZVxuICAqIEBwYXJhbSB7Q3VzdG9tVmlzaXRNb2RlbH0gdmlzaXQgLSBWaXNpdFxuICAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvdW50ZXJOYW1lIC0gRW5jb3VudGVyIHR5cGVcbiAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gRW5jb3VudGVyIGRhdGV0aW1lXG4gICovXG4gIGdldEVuY291bnRlckNyZWF0ZWQodmlzaXQ6IEN1c3RvbVZpc2l0TW9kZWwsIGVuY291bnRlck5hbWU6IHN0cmluZykge1xuICAgIGxldCBjcmVhdGVkX2F0ID0gJyc7XG4gICAgY29uc3QgZW5jb3VudGVycyA9IHZpc2l0LmVuY291bnRlcnM7XG4gICAgZW5jb3VudGVycy5mb3JFYWNoKChlbmNvdW50ZXI6IEN1c3RvbUVuY291bnRlck1vZGVsKSA9PiB7XG4gICAgICBjb25zdCBkaXNwbGF5ID0gZW5jb3VudGVyLnR5cGU/Lm5hbWU7XG4gICAgICBpZiAoZGlzcGxheS5tYXRjaChlbmNvdW50ZXJOYW1lKSAhPT0gbnVsbCkge1xuICAgICAgICBjcmVhdGVkX2F0ID0gdGhpcy5nZXRDcmVhdGVkQXQoZW5jb3VudGVyLmVuY291bnRlcl9kYXRldGltZS5yZXBsYWNlKCdaJywnKzA1MzAnKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNyZWF0ZWRfYXQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgZW5jb3VudGVyIGlzIGEgZm9sbG93LXVwIG9yIG5ldyB2aXNpdFxuICAgKiBAcGFyYW0ge2FueX0gZW5jIC0gRW5jb3VudGVyIGRhdGFcbiAgICogQHJldHVybiB7c3RyaW5nfSAtICdGT0xMT1dfVVAnIG9yICdORVcnXG4gICAqL1xuICBnZXREZW1hcmNhdGlvbihlbmM6IGFueSkge1xuICAgIGxldCBpc0ZvbGxvd1VwID0gZmFsc2U7XG4gICAgY29uc3QgYWRsSW50bCA9IGVuYz8uZmluZD8uKGUgPT4gZT8udHlwZT8ubmFtZSA9PT0gdmlzaXRUeXBlcy5BRFVMVElOSVRJQUwpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFkbEludGw/Lm9icykpIHtcbiAgICAgIGFkbEludGw/Lm9icy5mb3JFYWNoKG9icyA9PiB7XG4gICAgICAgIGlmICghaXNGb2xsb3dVcClcbiAgICAgICAgICBpc0ZvbGxvd1VwID0gb2JzPy52YWx1ZV90ZXh0Py50b0xvd2VyQ2FzZT8uKCk/LmluY2x1ZGVzPy4oXCJmb2xsb3cgdXBcIik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRm9sbG93VXAgPyB2aXNpdFR5cGVzLkZPTExPV19VUCA6IHZpc2l0VHlwZXMuTkVXO1xuICB9XG5cbiAgLyoqXG4gICogR2V0IGF3YWl0aW5nIHZpc2l0cyBmb3IgYSBnaXZlbiBwYWdlIG51bWJlclxuICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlIC0gUGFnZSBudW1iZXJcbiAgKiBAcmV0dXJuIHt2b2lkfVxuICAqL1xuICBnZXRBd2FpdGluZ1Zpc2l0cyhwYWdlOiBudW1iZXIgPSAxKSB7XG4gICAgaWYocGFnZSA9PSAxKSB7XG4gICAgICB0aGlzLmF3YWl0aW5nVmlzaXRzID0gW107XG4gICAgfSAgICBcbiAgICB0aGlzLnZpc2l0U2VydmljZS5nZXRBd2FpdGluZ1Zpc2l0cyh0aGlzLnNwZWNpYWxpemF0aW9uLCBwYWdlKS5zdWJzY3JpYmUoKHJlczogQXBpUmVzcG9uc2VNb2RlbCkgPT4ge1xuICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7XG4gICAgICAgIHRoaXMudmlzaXRzTGVuZ3RoQ291bnQgPSByZXMudG90YWxDb3VudDtcbiAgICAgICAgdGhpcy5lbWl0VmlzaXRzQ291bnQodGhpcy52aXNpdHNMZW5ndGhDb3VudCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgdmlzaXQgPSByZXMuZGF0YVtpXTtcbiAgICAgICAgICB2aXNpdC5jaGVpZl9jb21wbGFpbnQgPSB0aGlzLmdldENoZWlmQ29tcGxhaW50KHZpc2l0KTtcbiAgICAgICAgICB2aXNpdC52aXNpdF9jcmVhdGVkID0gdmlzaXQ/LmRhdGVfY3JlYXRlZCA/IHRoaXMuZ2V0Q3JlYXRlZEF0KHZpc2l0LmRhdGVfY3JlYXRlZC5yZXBsYWNlKCdaJywnKzA1MzAnKSkgOiB0aGlzLmdldEVuY291bnRlckNyZWF0ZWQodmlzaXQsIHZpc2l0VHlwZXMuQURVTFRJTklUSUFMKTtcbiAgICAgICAgICB2aXNpdC5wZXJzb24uYWdlID0gdGhpcy5jYWxjdWxhdGVBZ2UodmlzaXQucGVyc29uLmJpcnRoZGF0ZSk7XG4gICAgICAgICAgdmlzaXQucGF0aWVudF90eXBlID0gdGhpcy5nZXREZW1hcmNhdGlvbih2aXNpdD8uZW5jb3VudGVycyk7XG4gICAgICAgICAgdmlzaXQubG9jYXRpb24gPSB2aXNpdD8ubG9jYXRpb24/Lm5hbWU7XG4gICAgICAgICAgdmlzaXQuYWdlID0gdmlzaXQ/LnBlcnNvbj8uYWdlICsgJyAnICsgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoJ3knKTtcbiAgICAgICAgICB0aGlzLmF3YWl0aW5nVmlzaXRzLnB1c2godmlzaXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZS5kYXRhID0gWy4uLnRoaXMuYXdhaXRpbmdWaXNpdHNdO1xuICAgICAgICBpZiAocGFnZSA9PSAxKSB7XG4gICAgICAgICAgdGhpcy5kYXRhU291cmNlLnBhZ2luYXRvciA9IHRoaXMudGVtcFBhZ2luYXRvcjtcbiAgICAgICAgICB0aGlzLmRhdGFTb3VyY2Uuc29ydCA9IHRoaXMudGFibGVNYXRTb3J0O1xuICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXJQcmVkaWNhdGUgPSAoZGF0YSwgZmlsdGVyOiBzdHJpbmcpID0+IGRhdGE/LnBhdGllbnQuaWRlbnRpZmllci50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSAhPSAtMSB8fCBkYXRhPy5wYXRpZW50X25hbWUuZ2l2ZW5fbmFtZS5jb25jYXQoKGRhdGE/LnBhdGllbnRfbmFtZS5taWRkbGVfbmFtZSAmJiB0aGlzLmNoZWNrUGF0aWVudFJlZ0ZpZWxkKCdNaWRkbGUgTmFtZScpID8gJyAnICsgZGF0YT8ucGF0aWVudF9uYW1lLm1pZGRsZV9uYW1lIDogJycpICsgJyAnICsgZGF0YT8ucGF0aWVudF9uYW1lLmZhbWlseV9uYW1lKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSAhPSAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRlbXBQYWdpbmF0b3IubGVuZ3RoID0gdGhpcy5hd2FpdGluZ1Zpc2l0cy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy50ZW1wUGFnaW5hdG9yLm5leHRQYWdlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEdldCBpbnByb2dyZXNzIHZpc2l0cyBmb3IgYSBnaXZlbiBwYWdlIG51bWJlclxuICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlIC0gUGFnZSBudW1iZXJcbiAgKiBAcmV0dXJuIHt2b2lkfVxuICAqL1xuICBnZXRJblByb2dyZXNzVmlzaXRzKHBhZ2U6IG51bWJlciA9IDEpIHtcbiAgICBpZihwYWdlID09IDEpIHtcbiAgICAgIHRoaXMuaW5Qcm9ncmVzc1Zpc2l0cyA9IFtdO1xuICAgIH1cbiAgICB0aGlzLnZpc2l0U2VydmljZS5nZXRJblByb2dyZXNzVmlzaXRzKHRoaXMuc3BlY2lhbGl6YXRpb24sIHBhZ2UpLnN1YnNjcmliZSgocmVzOiBBcGlSZXNwb25zZU1vZGVsKSA9PiB7XG4gICAgICBpZiAocmVzLnN1Y2Nlc3MpIHtcbiAgICAgICAgdGhpcy52aXNpdHNMZW5ndGhDb3VudCA9IHJlcy50b3RhbENvdW50O1xuICAgICAgICB0aGlzLmVtaXRWaXNpdHNDb3VudCh0aGlzLnZpc2l0c0xlbmd0aENvdW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCB2aXNpdCA9IHJlcy5kYXRhW2ldO1xuICAgICAgICAgIHZpc2l0LmNoZWlmX2NvbXBsYWludCA9IHRoaXMuZ2V0Q2hlaWZDb21wbGFpbnQodmlzaXQpO1xuICAgICAgICAgIHZpc2l0LnZpc2l0X2NyZWF0ZWQgPSB2aXNpdD8uZGF0ZV9jcmVhdGVkID8gdGhpcy5nZXRDcmVhdGVkQXQodmlzaXQuZGF0ZV9jcmVhdGVkLnJlcGxhY2UoJ1onLCcrMDUzMCcpKSA6IHRoaXMuZ2V0RW5jb3VudGVyQ3JlYXRlZCh2aXNpdCwgdmlzaXRUeXBlcy5BRFVMVElOSVRJQUwpO1xuICAgICAgICAgIHZpc2l0LnByZXNjcmlwdGlvbl9zdGFydGVkID0gdGhpcy5nZXRFbmNvdW50ZXJDcmVhdGVkKHZpc2l0LCB2aXNpdFR5cGVzLlZJU0lUX05PVEUpO1xuICAgICAgICAgIHZpc2l0LnBlcnNvbi5hZ2UgPSB0aGlzLmNhbGN1bGF0ZUFnZSh2aXNpdC5wZXJzb24uYmlydGhkYXRlKTtcbiAgICAgICAgICB2aXNpdC5UTUhfcGF0aWVudF9pZCA9IHRoaXMuZ2V0QXR0cmlidXRlRGF0YSh2aXNpdCwgXCJUTUggQ2FzZSBOdW1iZXJcIik/LnZhbHVlO1xuICAgICAgICAgIHZpc2l0LmxvY2F0aW9uID0gdmlzaXQ/LmxvY2F0aW9uPy5uYW1lO1xuICAgICAgICAgIHZpc2l0LmFnZSA9IHZpc2l0Py5wZXJzb24/LmFnZSArICcgJyArIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCd5Jyk7XG4gICAgICAgICAgdGhpcy5pblByb2dyZXNzVmlzaXRzLnB1c2godmlzaXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5Qcm9ncmVzc1Zpc2l0cy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZVRpbWUgPSAodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5pbmNsdWRlcyhcIm1pbnV0ZXMgYWdvXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwibWludXRlc1wiLCB0aW1lOiBwYXJzZUludCh2YWx1ZSkgfTsgLy8gU3RvcmUgb25seSBudW1lcmljIG1pbnV0ZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmluY2x1ZGVzKFwiSG91cnMgYWdvXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwiaG91cnNcIiwgdGltZTogcGFyc2VJbnQodmFsdWUpICogNjAgfTsgLy8gQ29udmVydCBob3VycyB0byBtaW51dGVzIGZvciBjb3JyZWN0IGNvbXBhcmlzb25cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJkYXRlXCIsIHRpbWU6IG1vbWVudCh2YWx1ZSwgXCJERCBNTU0sIFlZWVlcIikudmFsdWVPZigpIH07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCB2aXNpdEEgPSBwYXJzZVRpbWUoYS5wcmVzY3JpcHRpb25fc3RhcnRlZCk7XG4gICAgICAgICAgICBjb25zdCB2aXNpdEIgPSBwYXJzZVRpbWUoYi5wcmVzY3JpcHRpb25fc3RhcnRlZCk7XG4gICAgICAgICAgICAvLyBTb3J0IG1pbnV0ZXMgZmlyc3QgKGFzY2VuZGluZylcbiAgICAgICAgICAgIGlmICh2aXNpdEEudHlwZSA9PT0gXCJtaW51dGVzXCIgJiYgdmlzaXRCLnR5cGUgPT09IFwibWludXRlc1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0QS50aW1lIC0gdmlzaXRCLnRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTb3J0IGhvdXJzIGZpcnN0IChhc2NlbmRpbmcpXG4gICAgICAgICAgICBpZiAodmlzaXRBLnR5cGUgPT09IFwiaG91cnNcIiAmJiB2aXNpdEIudHlwZSA9PT0gXCJob3Vyc1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0QS50aW1lIC0gdmlzaXRCLnRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTb3J0IGRhdGVzIChkZXNjZW5kaW5nKVxuICAgICAgICAgICAgaWYgKHZpc2l0QS50eXBlID09PSBcImRhdGVcIiAmJiB2aXNpdEIudHlwZSA9PT0gXCJkYXRlXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRCLnRpbWUgLSB2aXNpdEEudGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByaW9yaXRpemUgbWludXRlcyBvdmVyIGhvdXJzLCBhbmQgaG91cnMgb3ZlciBkYXRlc1xuICAgICAgICAgICAgaWYgKHZpc2l0QS50eXBlID09PSBcIm1pbnV0ZXNcIikgcmV0dXJuIC0xO1xuICAgICAgICAgICAgaWYgKHZpc2l0Qi50eXBlID09PSBcIm1pbnV0ZXNcIikgcmV0dXJuIDE7XG4gICAgICAgICAgICBpZiAodmlzaXRBLnR5cGUgPT09IFwiaG91cnNcIikgcmV0dXJuIC0xO1xuICAgICAgICAgICAgaWYgKHZpc2l0Qi50eXBlID09PSBcImhvdXJzXCIpIHJldHVybiAxO1xuXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kYXRhU291cmNlLmRhdGEgPSBbLi4udGhpcy5pblByb2dyZXNzVmlzaXRzXTtcbiAgICAgICAgaWYgKHBhZ2UgPT0gMSkge1xuICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5wYWdpbmF0b3IgPSB0aGlzLnRlbXBQYWdpbmF0b3I7XG4gICAgICAgICAgdGhpcy5kYXRhU291cmNlLnNvcnQgPSB0aGlzLnRhYmxlTWF0U29ydDtcbiAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZmlsdGVyUHJlZGljYXRlID0gKGRhdGEsIGZpbHRlcjogc3RyaW5nKSA9PiBkYXRhPy5wYXRpZW50LmlkZW50aWZpZXIudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgIT0gLTEgfHwgZGF0YT8ucGF0aWVudF9uYW1lLmdpdmVuX25hbWUuY29uY2F0KChkYXRhPy5wYXRpZW50X25hbWUubWlkZGxlX25hbWUgJiYgdGhpcy5jaGVja1BhdGllbnRSZWdGaWVsZCgnTWlkZGxlIE5hbWUnKSA/ICcgJyArIGRhdGE/LnBhdGllbnRfbmFtZS5taWRkbGVfbmFtZSA6ICcnKSArICcgJyArIGRhdGE/LnBhdGllbnRfbmFtZS5mYW1pbHlfbmFtZSkudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgIT0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50ZW1wUGFnaW5hdG9yLmxlbmd0aCA9IHRoaXMuaW5Qcm9ncmVzc1Zpc2l0cy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy50ZW1wUGFnaW5hdG9yLm5leHRQYWdlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEdldCBwcmlvcml0eSB2aXNpdHMgZm9yIGEgZ2l2ZW4gcGFnZSBudW1iZXJcbiAgKiBAcGFyYW0ge251bWJlcn0gcGFnZSAtIFBhZ2UgbnVtYmVyXG4gICogQHJldHVybiB7dm9pZH1cbiAgKi9cbiAgZ2V0UHJpb3JpdHlWaXNpdHMocGFnZTogbnVtYmVyID0gMSkge1xuICAgIGlmKHBhZ2UgPT0gMSkge1xuICAgICAgdGhpcy5wcmlvcml0eVZpc2l0cyA9IFtdO1xuICAgIH1cbiAgICB0aGlzLnZpc2l0U2VydmljZS5nZXRQcmlvcml0eVZpc2l0cyh0aGlzLnNwZWNpYWxpemF0aW9uLCBwYWdlKS5zdWJzY3JpYmUoKHJlczogQXBpUmVzcG9uc2VNb2RlbCkgPT4ge1xuICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7XG4gICAgICAgIHRoaXMudmlzaXRzTGVuZ3RoQ291bnQgPSByZXMudG90YWxDb3VudDtcbiAgICAgICAgdGhpcy5lbWl0VmlzaXRzQ291bnQodGhpcy52aXNpdHNMZW5ndGhDb3VudCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgdmlzaXQgPSByZXMuZGF0YVtpXTtcbiAgICAgICAgICB2aXNpdC5jaGVpZl9jb21wbGFpbnQgPSB0aGlzLmdldENoZWlmQ29tcGxhaW50KHZpc2l0KTtcbiAgICAgICAgICB2aXNpdC52aXNpdF9jcmVhdGVkID0gdmlzaXQ/LmRhdGVfY3JlYXRlZCA/IHRoaXMuZ2V0Q3JlYXRlZEF0KHZpc2l0LmRhdGVfY3JlYXRlZC5yZXBsYWNlKCdaJywnKzA1MzAnKSkgOiB0aGlzLmdldEVuY291bnRlckNyZWF0ZWQodmlzaXQsIHZpc2l0VHlwZXMuRkxBR0dFRCk7XG4gICAgICAgICAgdmlzaXQucGVyc29uLmFnZSA9IHRoaXMuY2FsY3VsYXRlQWdlKHZpc2l0LnBlcnNvbi5iaXJ0aGRhdGUpO1xuICAgICAgICAgIHZpc2l0LmxvY2F0aW9uID0gdmlzaXQ/LmxvY2F0aW9uPy5uYW1lO1xuICAgICAgICAgIHZpc2l0LmFnZSA9IHZpc2l0Py5wZXJzb24/LmFnZSArICcgJyArIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCd5Jyk7XG4gICAgICAgICAgdGhpcy5wcmlvcml0eVZpc2l0cy5wdXNoKHZpc2l0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IFsuLi50aGlzLnByaW9yaXR5VmlzaXRzXTtcbiAgICAgICAgaWYgKHBhZ2UgPT0gMSkge1xuICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5wYWdpbmF0b3IgPSB0aGlzLnRlbXBQYWdpbmF0b3I7XG4gICAgICAgICAgdGhpcy5kYXRhU291cmNlLnNvcnQgPSB0aGlzLnRhYmxlTWF0U29ydDtcbiAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZmlsdGVyUHJlZGljYXRlID0gKGRhdGEsIGZpbHRlcjogc3RyaW5nKSA9PiBkYXRhPy5wYXRpZW50LmlkZW50aWZpZXIudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgIT0gLTEgfHwgZGF0YT8ucGF0aWVudF9uYW1lLmdpdmVuX25hbWUuY29uY2F0KChkYXRhPy5wYXRpZW50X25hbWUubWlkZGxlX25hbWUgJiYgdGhpcy5jaGVja1BhdGllbnRSZWdGaWVsZCgnTWlkZGxlIE5hbWUnKSA/ICcgJyArIGRhdGE/LnBhdGllbnRfbmFtZS5taWRkbGVfbmFtZSA6ICcnKSArICcgJyArIGRhdGE/LnBhdGllbnRfbmFtZS5mYW1pbHlfbmFtZSkudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgIT0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50ZW1wUGFnaW5hdG9yLmxlbmd0aCA9IHRoaXMucHJpb3JpdHlWaXNpdHMubGVuZ3RoO1xuICAgICAgICAgIHRoaXMudGVtcFBhZ2luYXRvci5uZXh0UGFnZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNvbXBsZXRlZCB2aXNpdHMgY291bnRcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGdldENvbXBsZXRlZFZpc2l0cyhwYWdlOiBudW1iZXIgPSAxKSB7XG4gICAgdGhpcy52aXNpdFNlcnZpY2UuZ2V0RW5kZWRWaXNpdHModGhpcy5zcGVjaWFsaXphdGlvbiwgcGFnZSkuc3Vic2NyaWJlKChyZXM6IEFwaVJlc3BvbnNlTW9kZWwpID0+IHtcbiAgICAgIGlmIChyZXMuc3VjY2Vzcykge1xuICAgICAgICB0aGlzLnZpc2l0c0xlbmd0aENvdW50ID0gcmVzLnRvdGFsQ291bnQ7XG4gICAgICAgIHRoaXMuZW1pdFZpc2l0c0NvdW50KHRoaXMudmlzaXRzTGVuZ3RoQ291bnQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IHZpc2l0ID0gcmVzLmRhdGFbaV07XG4gICAgICAgICAgdmlzaXQuY2hlaWZfY29tcGxhaW50ID0gdGhpcy5nZXRDaGVpZkNvbXBsYWludCh2aXNpdCk7XG4gICAgICAgICAgdmlzaXQudmlzaXRfY3JlYXRlZCA9IHZpc2l0Py5kYXRlX2NyZWF0ZWQgPyB0aGlzLmdldENyZWF0ZWRBdCh2aXNpdC5kYXRlX2NyZWF0ZWQucmVwbGFjZSgnWicsICcrMDUzMCcpKSA6IHRoaXMuZ2V0RW5jb3VudGVyQ3JlYXRlZCh2aXNpdCwgdmlzaXRUeXBlcy5DT01QTEVURURfVklTSVQpO1xuICAgICAgICAgIHZpc2l0LnBlcnNvbi5hZ2UgPSB0aGlzLmNhbGN1bGF0ZUFnZSh2aXNpdC5wZXJzb24uYmlydGhkYXRlKTtcbiAgICAgICAgICB2aXNpdC5jb21wbGV0ZWQgPSB2aXNpdD8uZGF0ZV9jcmVhdGVkID8gdGhpcy5nZXRDcmVhdGVkQXQodmlzaXQuZGF0ZV9jcmVhdGVkLnJlcGxhY2UoJ1onLCAnKzA1MzAnKSkgOiB0aGlzLmdldEVuY291bnRlckNyZWF0ZWQodmlzaXQsIHZpc2l0VHlwZXMuVklTSVRfQ09NUExFVEUpO1xuICAgICAgICAgIHZpc2l0LlRNSF9wYXRpZW50X2lkID0gdGhpcy5nZXRBdHRyaWJ1dGVEYXRhKHZpc2l0LCBcIlRNSCBDYXNlIE51bWJlclwiKT8udmFsdWU7XG4gICAgICAgICAgdmlzaXQubG9jYXRpb24gPSB2aXNpdD8ubG9jYXRpb24/Lm5hbWU7XG4gICAgICAgICAgdmlzaXQuYWdlID0gdmlzaXQ/LnBlcnNvbj8uYWdlICsgJyAnICsgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoJ3knKTtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlZFZpc2l0cy5wdXNoKHZpc2l0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IFsuLi50aGlzLmNvbXBsZXRlZFZpc2l0c107XG4gICAgICAgIGlmIChwYWdlID09IDEpIHtcbiAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UucGFnaW5hdG9yID0gdGhpcy50ZW1wUGFnaW5hdG9yO1xuICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5zb3J0ID0gdGhpcy50YWJsZU1hdFNvcnQ7XG4gICAgICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlclByZWRpY2F0ZSA9IChkYXRhOiB7IHBhdGllbnQ6IHsgaWRlbnRpZmllcjogc3RyaW5nOyB9OyBwYXRpZW50X25hbWU6IHsgZ2l2ZW5fbmFtZTogc3RyaW5nOyBtaWRkbGVfbmFtZTogc3RyaW5nOyBmYW1pbHlfbmFtZTogc3RyaW5nOyB9OyB9LCBmaWx0ZXI6IHN0cmluZykgPT4gZGF0YT8ucGF0aWVudC5pZGVudGlmaWVyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xIHx8IGRhdGE/LnBhdGllbnRfbmFtZS5naXZlbl9uYW1lLmNvbmNhdCgoZGF0YT8ucGF0aWVudF9uYW1lLm1pZGRsZV9uYW1lICYmIHRoaXMuY2hlY2tQYXRpZW50UmVnRmllbGQoJ01pZGRsZSBOYW1lJykgPyAnICcgKyBkYXRhPy5wYXRpZW50X25hbWUubWlkZGxlX25hbWUgOiAnJykgKyAnICcgKyBkYXRhPy5wYXRpZW50X25hbWUuZmFtaWx5X25hbWUpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGVtcFBhZ2luYXRvci5sZW5ndGggPSB0aGlzLmNvbXBsZXRlZFZpc2l0cy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy50ZW1wUGFnaW5hdG9yLm5leHRQYWdlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEdldCBmb2xsb3ctdXAgdmlzaXRzIGZvciBhIGxvZ2dlZC1pbiBkb2N0b3JcbiAgKiBAcmV0dXJuIHt2b2lkfVxuICAqL1xuICBnZXRGb2xsb3dVcFZpc2l0KHBhZ2U6IG51bWJlciA9IDEpIHtcbiAgICB0aGlzLnZpc2l0U2VydmljZS5nZXRGb2xsb3dVcFZpc2l0cyh0aGlzLnNwZWNpYWxpemF0aW9uKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKHJlczogQXBpUmVzcG9uc2VNb2RlbCkgPT4ge1xuICAgICAgICBpZiAocmVzLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdmlzaXQgPSByZXMuZGF0YVtpXTtcbiAgICAgICAgICAgIGlmICh2aXNpdD8uZW5jb3VudGVycz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHRoaXMudmlzaXRzTGVuZ3RoQ291bnQgKz0gMTtcbiAgICAgICAgICAgICAgdmlzaXQuY2hlaWZfY29tcGxhaW50ID0gdGhpcy5nZXRDaGVpZkNvbXBsYWludCh2aXNpdCk7XG4gICAgICAgICAgICAgIHZpc2l0LnZpc2l0X2NyZWF0ZWQgPSB2aXNpdD8uZGF0ZV9jcmVhdGVkID8gdGhpcy5nZXRDcmVhdGVkQXQodmlzaXQuZGF0ZV9jcmVhdGVkLnJlcGxhY2UoJ1onLCAnKzA1MzAnKSkgOiB0aGlzLmdldEVuY291bnRlckNyZWF0ZWQodmlzaXQsIHZpc2l0VHlwZXMuQ09NUExFVEVEX1ZJU0lUKTtcbiAgICAgICAgICAgICAgdmlzaXQucGVyc29uLmFnZSA9IHRoaXMuY2FsY3VsYXRlQWdlKHZpc2l0LnBlcnNvbi5iaXJ0aGRhdGUpO1xuICAgICAgICAgICAgICB2aXNpdC5jb21wbGV0ZWQgPSB0aGlzLmdldEVuY291bnRlckNyZWF0ZWQodmlzaXQsIHZpc2l0VHlwZXMuVklTSVRfQ09NUExFVEUpO1xuICAgICAgICAgICAgICB2aXNpdC5mb2xsb3dVcCA9IHRoaXMucHJvY2Vzc0ZvbGxvd1VwRGF0ZSh0aGlzLmdldEVuY291bnRlck9icyh2aXNpdC5lbmNvdW50ZXJzLCB2aXNpdFR5cGVzLlZJU0lUX05PVEUsIDE2MzM0NS8qRm9sbG93LXVwKi8pPy52YWx1ZV90ZXh0KTtcbiAgICAgICAgICAgICAgdmlzaXQubG9jYXRpb24gPSB2aXNpdD8ubG9jYXRpb24/Lm5hbWU7XG4gICAgICAgICAgICAgIHZpc2l0LmFnZSA9IHZpc2l0Py5wZXJzb24/LmFnZSArICcgJyArIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCd5Jyk7XG4gICAgICAgICAgICAgIHRoaXMuZm9sbG93VXBWaXNpdHMucHVzaCh2aXNpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZW1pdFZpc2l0c0NvdW50KHRoaXMudmlzaXRzTGVuZ3RoQ291bnQpO1xuICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5kYXRhID0gWy4uLnRoaXMuZm9sbG93VXBWaXNpdHNdO1xuICAgICAgICAgIGlmIChwYWdlID09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5wYWdpbmF0b3IgPSB0aGlzLnRlbXBQYWdpbmF0b3I7XG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2Uuc29ydCA9IHRoaXMudGFibGVNYXRTb3J0O1xuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlclByZWRpY2F0ZSA9IChkYXRhOiB7IHBhdGllbnQ6IHsgaWRlbnRpZmllcjogc3RyaW5nOyB9OyBwYXRpZW50X25hbWU6IHsgZ2l2ZW5fbmFtZTogc3RyaW5nOyBtaWRkbGVfbmFtZTogc3RyaW5nOyBmYW1pbHlfbmFtZTogc3RyaW5nOyB9OyB9LCBmaWx0ZXI6IHN0cmluZykgPT4gZGF0YT8ucGF0aWVudC5pZGVudGlmaWVyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xIHx8IGRhdGE/LnBhdGllbnRfbmFtZS5naXZlbl9uYW1lLmNvbmNhdCgoZGF0YT8ucGF0aWVudF9uYW1lLm1pZGRsZV9uYW1lICYmIHRoaXMuY2hlY2tQYXRpZW50UmVnRmllbGQoJ01pZGRsZSBOYW1lJykgPyAnICcgKyBkYXRhPy5wYXRpZW50X25hbWUubWlkZGxlX25hbWUgOiAnJykgKyAnICcgKyBkYXRhPy5wYXRpZW50X25hbWUuZmFtaWx5X25hbWUpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRlbXBQYWdpbmF0b3IubGVuZ3RoID0gdGhpcy5mb2xsb3dVcFZpc2l0cy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnRlbXBQYWdpbmF0b3IubmV4dFBhZ2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEdldCBlbmNvdW50ZXIgZGF0ZXRpbWUgZm9yIGEgZ2l2ZW4gZW5jb3VudGVyIHR5cGVcbiAgKiBAcGFyYW0ge0N1c3RvbVZpc2l0TW9kZWx9IHZpc2l0IC0gVmlzaXRcbiAgKiBAcGFyYW0ge3N0cmluZ30gZW5jb3VudGVyTmFtZSAtIEVuY291bnRlciB0eXBlXG4gICogQHJldHVybiB7c3RyaW5nfSAtIEVuY291bnRlciBkYXRldGltZVxuICAqL1xuICBnZXRFbmNvdW50ZXJPYnMoZW5jb3VudGVyczogQ3VzdG9tRW5jb3VudGVyTW9kZWxbXSwgZW5jb3VudGVyTmFtZTogc3RyaW5nLCBjb25jZXB0SWQ6IG51bWJlcikge1xuICAgIGxldCBvYnM6IEN1c3RvbU9ic01vZGVsO1xuICAgIGVuY291bnRlcnMuZm9yRWFjaCgoZW5jb3VudGVyOiBDdXN0b21FbmNvdW50ZXJNb2RlbCkgPT4ge1xuICAgICAgaWYgKGVuY291bnRlci50eXBlPy5uYW1lID09PSBlbmNvdW50ZXJOYW1lKSB7XG4gICAgICAgIG9icyA9IGVuY291bnRlcj8ub2JzPy5maW5kKChvOiBDdXN0b21PYnNNb2RlbCkgPT4gby5jb25jZXB0X2lkID09IGNvbmNlcHRJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG9icztcbiAgfVxuICBcbiAgLyoqXG4gICAqIFJlbmRlcnMgSFRNTCBjb250ZW50IGZvciBhIGNvbHVtbiwgc2FuaXRpemVkIGZvciBzZWN1cml0eVxuICAgKiBAcGFyYW0ge2FueX0gY29sdW1uIC0gQ29sdW1uIGRlZmluaXRpb25cbiAgICogQHBhcmFtIHthbnl9IGVsZW1lbnQgLSBEYXRhIGVsZW1lbnQgdG8gcmVuZGVyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBGb3JtYXR0ZWQgSFRNTCBvciBlbGVtZW50IHZhbHVlXG4gICAqL1xuICByZW5kZXJIdG1sQ29udGVudChjb2x1bW46IGFueSwgZWxlbWVudDogYW55KTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29sdW1uLmZvcm1hdEh0bWwgJiYgdHlwZW9mIGNvbHVtbi5mb3JtYXRIdG1sID09PSAnZnVuY3Rpb24nID8gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoY29sdW1uLmZvcm1hdEh0bWwoZWxlbWVudCkpIDogZWxlbWVudFtjb2x1bW4ua2V5XTtcbiAgfVxuICAgIFxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyBvZiBDU1MgY2xhc3NlcyBmb3IgdGhlIGNvbHVtblxuICAgKiBAcGFyYW0ge2FueX0gY29sdW1uIC0gQ29sdW1uIGRlZmluaXRpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSAtIFNwYWNlLXNlcGFyYXRlZCBjbGFzcyBuYW1lc1xuICAgKi9cbiAgZ2V0Q2xhc3Nlcyhjb2x1bW46IGFueSwgZWxlbWVudDogYW55KTogc3RyaW5nIHtcbiAgICBsZXQgY2xhc3NMaXN0ID0gW107XG5cbiAgICAvLyBJZiBjb2x1bW4gaGFzIGEgc3RhdGljIGNsYXNzTGlzdCAoYXJyYXkgb3Igc3RyaW5nKSwgYWRkIGl0XG4gICAgaWYgKGNvbHVtbi5jbGFzc0xpc3QpIHtcbiAgICAgIGNsYXNzTGlzdCA9IHR5cGVvZiBjb2x1bW4uY2xhc3NMaXN0ID09PSBcImZ1bmN0aW9uXCIgPyBjb2x1bW4uY2xhc3NMaXN0KGVsZW1lbnQpIDogY29sdW1uLmNsYXNzTGlzdDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NMaXN0LmpvaW4oXCIgXCIpO1xuICB9XG5cblxuXG4gIC8qKlxuICAgKiBGb3JtYXRzIHRoZSBmb2xsb3ctdXAgZGF0ZSBieSBjbGVhbmluZyB1cCB0aW1lIGRldGFpbHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gRm9sbG93LXVwIGRhdGUgc3RyaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBGb3JtYXR0ZWQgZGF0ZVxuICAgKi9cbiAgcHJvY2Vzc0ZvbGxvd1VwRGF0ZSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZighdmFsdWUpIHJldHVybiAnJztcbiAgICByZXR1cm4gdmFsdWUuc3BsaXQoJywnKS5sZW5ndGggPiAxID8gYCR7dmFsdWUuc3BsaXQoJywnKVswXX0ke3ZhbHVlLnNwbGl0KCcsJylbMV0ucmVwbGFjZShcIlRpbWU6XCIsIFwiXCIpfWAgOiB2YWx1ZTtcbiAgfTtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGFjdGlvbiBiYXNlZCBvbiBpdHMgbGFiZWwgKFJlc2NoZWR1bGUgb3IgQ2FuY2VsKVxuICAgKiBAcGFyYW0ge2FueX0gYWN0aW9uIC0gQWN0aW9uIG9iamVjdFxuICAgKiBAcGFyYW0ge2FueX0gZWxlbWVudCAtIEVsZW1lbnQgdG8gcGVyZm9ybSB0aGUgYWN0aW9uIG9uXG4gICAqL1xuICBoYW5kbGVBY3Rpb24oYWN0aW9uOiBhbnksIGVsZW1lbnQ6IGFueSkge1xuICAgIGlmIChhY3Rpb24ubGFiZWwgPT09ICdSZXNjaGVkdWxlJykge1xuICAgICAgdGhpcy5yZXNjaGVkdWxlKGVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLmxhYmVsID09PSAnQ2FuY2VsJykge1xuICAgICAgdGhpcy5jYW5jZWwoZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGEgV2hhdHNBcHAgY2hhdCB3aXRoIHRoZSBnaXZlbiBwaG9uZSBudW1iZXJcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCAtIFRoZSBjbGljayBldmVudCB0byBwcmV2ZW50IHJvdyBuYXZpZ2F0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZWxlcGhvbmUgLSBQaG9uZSBudW1iZXIgZm9yIFdoYXRzQXBwXG4gICAqL1xuICBvcGVuV2hhdHNBcHAoZXZlbnQ6IE1vdXNlRXZlbnQsIHRlbGVwaG9uZTogc3RyaW5nKTogdm9pZCB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFByZXZlbnQgcm93IG5hdmlnYXRpb25cbiAgICBjb25zdCB3aGF0c2FwcExpbmsgPSBgaHR0cHM6Ly93YS5tZS8ke3RlbGVwaG9uZX1gO1xuICAgIHdpbmRvdy5vcGVuKHdoYXRzYXBwTGluaywgJ19ibGFuaycsICdub29wZW5lcixub3JlZmVycmVyJyk7XG4gIH1cblxuICAvKipcbiAgICogRW1pdHMgdGhlIHZpc2l0cyBjb3VudCBkYXRhIHdpdGggdGhlIGdpdmVuIHRhYmxlIHRhZyBuYW1lIGFuZCBjb3VudFxuICAgKiBAcGFyYW0ge251bWJlcn0gdmlzaXRzQ291bnQgLSBUaGUgdG90YWwgdmlzaXRzIGNvdW50IGZvciB0aGUgc3BlY2lmaWMgdGFibGVcbiAgICovXG4gIGVtaXRWaXNpdHNDb3VudCh2aXNpdHNDb3VudDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgdmlzaXRzQ291bnREYXRhID0ge1xuICAgICAgdGFibGVUYWdOYW1lOiB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnLFxuICAgICAgdmlzaXRzQ291bnQ6IHZpc2l0c0NvdW50XG4gICAgfTtcbiAgICB0aGlzLnZpc2l0c0NvdW50RGF0ZS5lbWl0KHZpc2l0c0NvdW50RGF0YSk7XG4gIH1cbn1cblxuIiwiPG1hdC1leHBhbnNpb24tcGFuZWwgW2V4cGFuZGVkXT1cInRydWVcIiBkYXRhLXRlc3QtaWQ9XCJtYXRFeHBBcHBvaW50bWVudFwiPlxuICA8bWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIgZGF0YS10ZXN0LWlkPVwibWF0RXhwSGVhZGVyQXBwb2ludG1lbnRcIj5cbiAgICA8bWF0LXBhbmVsLXRpdGxlPlxuICAgICAgPGRpdiBpZD1cInt7cGx1Z2luQ29uZmlnT2JzLmFuY2hvcklkfX1cIiBjbGFzcz1cImFuY2hvci1jb25cIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJpbnRlbC1hY2NvcmRpb24tdGl0bGVcIj5cbiAgICAgICAgPGltZyBzcmM9XCJ7eyBwbHVnaW5Db25maWdPYnMudGFibGVIZWFkZXJJY29uIH19XCIgYWx0PVwiXCIgd2lkdGg9XCI0NHB4XCI+XG4gICAgICAgIDxoNiBjbGFzcz1cIm1iLTAgbWwtMlwiPnt7IHBsdWdpbkNvbmZpZ09icy50YWJsZUhlYWRlciB8IHRyYW5zbGF0ZSB9fSAoe3sgdmlzaXRzTGVuZ3RoQ291bnQgfX0pPC9oNj5cbiAgICAgICAgPG1hdC1pY29uIGFyaWEtaGlkZGVuPVwiZmFsc2VcIiBhcmlhLWxhYmVsPVwiaGVscCBpY29uXCIgbWF0VG9vbHRpcD1cInt7IChwbHVnaW5Db25maWdPYnMudG9vbHRpcExhYmVsIHwgdHJhbnNsYXRlKSB9fVwiIG1hdFRvb2x0aXBQb3NpdGlvbj1cInJpZ2h0XCIgZGF0YS10ZXN0LWlkPVwibWF0SWNvSGVscEFwcG9pbnRtZW50XCI+aGVscF9vdXRsaW5lPC9tYXQtaWNvbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1sLWF1dG8gZmlsdGVyLXNlYXJjaC1jb250YWluZXJcIj5cbiAgICAgICAgICA8YnV0dG9uICpuZ0lmPVwicGx1Z2luQ29uZmlnT2JzLmZpbHRlck9icy5maWx0ZXJGbGFnXCIgY2xhc3M9XCJtYXQtc3Ryb2tlZC1idXR0b25cIlttYXRNZW51VHJpZ2dlckZvcl09XCJmaWx0ZXJNZW51MVwiIGNsYXNzPVwiZmlsdGVyLWJ0blwiIChjbGljayk9XCIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XCI+XG4gICAgICAgICAgICA8aW1nIHNyYz1cInt7cGx1Z2luQ29uZmlnT2JzLmZpbHRlck9icy5maWx0ZXJJY29ufX1cIiBhbHQ9XCJcIj4ge3soIHBsdWdpbkNvbmZpZ09icy5maWx0ZXJPYnMuZmlsdGVyTGFiZWx8IHRyYW5zbGF0ZSl9fVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxtYXQtbWVudSAjZmlsdGVyTWVudTE9XCJtYXRNZW51XCIgY2xhc3M9XCJjdXN0b20tbWVudVwiIFtoYXNCYWNrZHJvcF09XCJ0cnVlXCIgeFBvc2l0aW9uPVwiYmVmb3JlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9nZ2xlLWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm1hdC1mb2N1cy1pbmRpY2F0b3IgbWF0LWJ1dHRvbiBtYXQtYnV0dG9uLWJhc2VcIiBjbGFzcz1cIm1hdC1mb2N1cy1pbmRpY2F0b3IgbWF0LWJ1dHRvbiBtYXQtYnV0dG9uLWJhc2VcIiBtYXQtYnV0dG9uIFtjbGFzcy5hY3RpdmVdPVwibW9kZSA9PT0gJ2RhdGUnXCIgKGNsaWNrKT1cInNldE1vZGUoJ2RhdGUnKTsgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyByZXNldERhdGUodHJ1ZSlcIj48c3BhbiBjbGFzcz1cIm1hdC1idXR0b24td3JhcHBlclwiPjxzcGFuIGNsYXNzPVwibWF0LWJ1dHRvbi13cmFwcGVyXCI+e3snRGF0ZScgfCB0cmFuc2xhdGV9fTwvc3Bhbj48L3NwYW4+PC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJtYXQtZm9jdXMtaW5kaWNhdG9yIG1hdC1idXR0b24gbWF0LWJ1dHRvbi1iYXNlXCIgY2xhc3M9XCJtYXQtZm9jdXMtaW5kaWNhdG9yIG1hdC1idXR0b24gbWF0LWJ1dHRvbi1iYXNlXCIgbWF0LWJ1dHRvbiBbY2xhc3MuYWN0aXZlXT1cIm1vZGUgPT09ICdyYW5nZSdcIiAoY2xpY2spPVwic2V0TW9kZSgncmFuZ2UnKTsgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyByZXNldERhdGUodHJ1ZSlcIj48c3BhbiBjbGFzcz1cIm1hdC1idXR0b24td3JhcHBlclwiPjxzcGFuIGNsYXNzPVwibWF0LWJ1dHRvbi13cmFwcGVyXCI+e3snUmFuZ2UnIHwgdHJhbnNsYXRlfX08L3NwYW4+PC9zcGFuPjwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2ICpuZ0lmPVwibW9kZSA9PT0gJ2RhdGUnXCIgY2xhc3M9XCJkYXRlLXZpZXdcIiAoY2xpY2spPVwiJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXCI+XG4gICAgICAgICAgICAgIDxmb3JtIFtmb3JtR3JvdXBdPVwiZmlsdGVyZWREYXRlQW5kUmFuZ2VGb3JtXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZGF0ZVwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWRhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibGFiZWwtdGV4dFwiPnt7ICdTZWxlY3QgZGF0ZScgfCB0cmFuc2xhdGV9fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBbbWF4XT1cIm1heERhdGVcIiBmb3JtQ29udHJvbE5hbWU9XCJkYXRlXCIgW21hdERhdGVwaWNrZXJdPVwiZG9iZHBcIiBwbGFjZWhvbGRlcj1cInt7J1NlbGVjdCBkYXRlJyB8IHRyYW5zbGF0ZX19XCIgYXJpYS1sYWJlbD1cIkRhdGVcIiBhcmlhLWRlc2NyaWJlZGJ5PVwiYmFzaWMtYWRkb24xXCIgcmVhZG9ubHkgZGF0YS10ZXN0LWlkPVwiZXREYXRlXCIvPlxuICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZGF0ZXBpY2tlciAjZG9iZHA+PC9tYXQtZGF0ZXBpY2tlcj5cbiAgICAgICAgICAgICAgICAgICAgICA8bWF0LWRhdGVwaWNrZXItdG9nZ2xlIG1hdFN1ZmZpeCBbZm9yXT1cImRvYmRwXCIgZGF0YS10ZXN0LWlkPVwiZHBEYXRlXCIgY2xhc3M9XCJkYXRlcGlja2VyLWljb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgbWF0RGF0ZXBpY2tlclRvZ2dsZUljb24gc3JjPVwiYXNzZXRzL3N2Z3MvY2FsZW5kYXItZGF0ZS5zdmdcIiBhbHQ9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8L21hdC1kYXRlcGlja2VyLXRvZ2dsZT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cIm1vZGUgPT09ICdyYW5nZSdcIiBjbGFzcz1cInJhbmdlLXZpZXdcIiAoY2xpY2spPVwiICRldmVudC5zdG9wUHJvcGFnYXRpb24oKVwiPlxuICAgICAgICAgICAgICAgIDxmb3JtIFtmb3JtR3JvdXBdPVwiZmlsdGVyZWREYXRlQW5kUmFuZ2VGb3JtXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1kYXRlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1kYXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibGFiZWwtdGV4dFwiPnt7ICdTdGFydCBkYXRlJyB8IHRyYW5zbGF0ZSB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgW21heF09XCJmaWx0ZXJlZERhdGVBbmRSYW5nZUZvcm0udmFsdWUuZW5kRGF0ZSA/IGZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybS52YWx1ZS5lbmREYXRlIDogbWF4RGF0ZVwiIGZvcm1Db250cm9sTmFtZT1cInN0YXJ0RGF0ZVwiIFttYXREYXRlcGlja2VyXT1cInBpY2tlcjFcIiBwbGFjZWhvbGRlcj1cInt7J1NlbGVjdCBzdGFydCBkYXRlJ3x0cmFuc2xhdGV9fVwiIGFyaWEtbGFiZWw9XCJTdGFydCBkYXRlXCIgYXJpYS1kZXNjcmliZWRieT1cImJhc2ljLWFkZG9uMVwiIHJlYWRvbmx5IGRhdGEtdGVzdC1pZD1cImV0U2VsU3RhcnREYXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bWF0LWRhdGVwaWNrZXIgI3BpY2tlcjE+PC9tYXQtZGF0ZXBpY2tlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZGF0ZXBpY2tlci10b2dnbGUgbWF0U3VmZml4IFtmb3JdPVwicGlja2VyMVwiIGNsYXNzPVwiZGF0ZXBpY2tlci1pY29uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgbWF0RGF0ZXBpY2tlclRvZ2dsZUljb24gc3JjPVwiYXNzZXRzL3N2Z3MvY2FsZW5kYXItZGF0ZS5zdmdcIiBhbHQ9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LWRhdGVwaWNrZXItdG9nZ2xlPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZGF0ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZGF0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImxhYmVsLXRleHRcIj57eyAnRW5kIGRhdGUnIHwgdHJhbnNsYXRlIH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtd3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBbbWluXT1cImZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybS52YWx1ZS5zdGFydERhdGVcIiBbbWF4XT1cIm1heERhdGVcIiBmb3JtQ29udHJvbE5hbWU9XCJlbmREYXRlXCIgW21hdERhdGVwaWNrZXJdPVwicGlja2VyMlwiIHBsYWNlaG9sZGVyPVwie3snU2VsZWN0IGVuZCBkYXRlJ3x0cmFuc2xhdGV9fVwiIGFyaWEtbGFiZWw9XCJFbmQgZGF0ZVwiIGFyaWEtZGVzY3JpYmVkYnk9XCJiYXNpYy1hZGRvbjJcIiByZWFkb25seSBkYXRhLXRlc3QtaWQ9XCJldFNlbEVuZERhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZGF0ZXBpY2tlciAjcGlja2VyMj48L21hdC1kYXRlcGlja2VyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG1hdC1kYXRlcGlja2VyLXRvZ2dsZSBtYXRTdWZmaXggW2Zvcl09XCJwaWNrZXIyXCIgY2xhc3M9XCJkYXRlcGlja2VyLWljb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBtYXREYXRlcGlja2VyVG9nZ2xlSWNvbiBzcmM9XCJhc3NldHMvc3Zncy9jYWxlbmRhci1kYXRlLnN2Z1wiIGFsdD1cIlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9tYXQtZGF0ZXBpY2tlci10b2dnbGU+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhY3Rpb24tYnV0dG9uc1wiPlxuICAgICAgICAgICAgICA8YnV0dG9uIG1hdC1idXR0b24gY2xhc3M9XCJtYXQtZm9jdXMtaW5kaWNhdG9yIHJlc2V0LWJ0biBtYXQtYnV0dG9uIG1hdC1idXR0b24tYmFzZVwiIChjbGljayk9XCJyZXNldERhdGUoKTtcIj48c3BhbiBjbGFzcz1cIm1hdC1idXR0b24td3JhcHBlclwiPnt7ICdSZXNldCd8IHRyYW5zbGF0ZSB9fTwvc3Bhbj48L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBtYXQtYnV0dG9uIGNsYXNzPVwibWF0LWZvY3VzLWluZGljYXRvciBhcHBseS1idG4gbWF0LWJ1dHRvbiBtYXQtYnV0dG9uLWJhc2VcIiAoY2xpY2spPVwiYXBwbHlEYXRlT3JSYW5nZUZpbHRlcihwbHVnaW5Db25maWdPYnMuZmlsdGVyT2JzLmZpbHRlckRhdGVGaWVsZClcIj48c3BhbiBjbGFzcz1cIm1hdC1idXR0b24td3JhcHBlclwiPnt7ICdBcHBseSd8IHRyYW5zbGF0ZSB9fTwvc3Bhbj48L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbWF0LW1lbnU+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwIHNlYXJjaC1iYXIgbWwtYXV0b1wiIChjbGljayk9XCIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiAjc2VhcmNoSW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBwbGFjZWhvbGRlcj1cInt7IHBsdWdpbkNvbmZpZ09icy5zZWFyY2hQbGFjZUhvbGRlciB8IHRyYW5zbGF0ZSB9fVwiIGFyaWEtbGFiZWw9XCJzZWFyY2gxXCIgYXJpYS1kZXNjcmliZWRieT1cImJhc2ljLWFkZG9uMVwiIChrZXl1cCk9XCJhcHBseUZpbHRlcigkZXZlbnQpXCIgKGtleWRvd24uU3BhY2UpPVwiJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXCIgKGtleWRvd24uRW50ZXIpPVwiJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXCIgZGF0YS10ZXN0LWlkPVwiZXRTZWFyY2hBcHBvaW50bWVudERhc2hib2FyZFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZFwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIiBpZD1cImJhc2ljLWFkZG9uMVwiICAqbmdJZj1cIiFpc0ZpbHRlckFwcGxpZWRcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9zdmdzL3NlYXJjaC1pY29uLnN2Z1wiIGFsdD1cIlwiIHdpZHRoPVwiMjBweFwiIGhlaWdodD1cIjIwcHhcIj5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtdGVzdC1pZD1cImJ0blJlc2V0QXBTZXJhY2hcIiAgY2xhc3M9XCJidG5SZXNldEFwU2VyYWNoXCIgY2xhc3M9XCJidG5SZXNldEFwU2VyYWNoXCIgY2xhc3M9XCJtYXQtaWNvbi1idXR0b25cIiBhcmlhLWxhYmVsPVwiUmVzZXQgYXBwb2ludG1lbnQgc2VhcmNoXCIgIChjbGljayk9XCJjbGVhckZpbHRlcigpXCIgICpuZ0lmPVwiaXNGaWx0ZXJBcHBsaWVkXCI+XG4gICAgICAgICAgICAgICAgPG1hdC1pY29uIGNsYXNzPVwibWwtMFwiIHN0eWxlPVwibGluZS1oZWlnaHQ6IG5vcm1hbDtcIj5jbG9zZTwvbWF0LWljb24+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9tYXQtcGFuZWwtdGl0bGU+XG4gIDwvbWF0LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+XG4gIDxkaXYgY2xhc3M9XCJtYXQtZWxldmF0aW9uLXo4XCI+XG4gICAgPHRhYmxlIG1hdC10YWJsZSBbZGF0YVNvdXJjZV09XCJkYXRhU291cmNlXCIgI3RhYmxlTWF0U29ydD1cIm1hdFNvcnRcIiBtYXRTb3J0PlxuXG4gICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBjb2x1bW4gb2YgZGlzcGxheWVkQXBwb2ludG1lbnRDb2x1bW5zXCIgW21hdENvbHVtbkRlZl09XCJjb2x1bW4ua2V5XCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb2x1bW4uaXNTb3J0YWJsZTsgZWxzZSBub1NvcnRcIj5cbiAgICAgICAgICA8dGggbWF0LWhlYWRlci1jZWxsICptYXRIZWFkZXJDZWxsRGVmIG1hdC1zb3J0LWhlYWRlciBtYXRTb3J0RGlyZWN0aW9uPVwiYXNjXCI+XG4gICAgICAgICAgICB7eyBjb2x1bW4ubGFiZWwgfCB0cmFuc2xhdGUgfX1cbiAgICAgICAgICA8L3RoPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPG5nLXRlbXBsYXRlICNub1NvcnQ+XG4gICAgICAgICAgPHRoIG1hdC1oZWFkZXItY2VsbCAqbWF0SGVhZGVyQ2VsbERlZj5cbiAgICAgICAgICAgIHt7IGNvbHVtbi5sYWJlbCB8IHRyYW5zbGF0ZSB9fVxuICAgICAgICAgIDwvdGg+XG4gICAgICAgIDwvbmctdGVtcGxhdGU+XG5cbiAgICAgICAgPHRkIG1hdC1jZWxsICptYXRDZWxsRGVmPVwibGV0IGVsZW1lbnQ7IGxldCBqID0gaW5kZXg7XCIgW2F0dHIuZGF0YS10ZXN0LWlkXT1cIid0ZCcgKyBqXCI+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbHVtbi5rZXkgIT09ICdwYXRpZW50X25hbWUnXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxvYXQtbGVmdFwiIFxuICAgICAgICAgICAgICAgIFtpbm5lckhUTUxdPVwicmVuZGVySHRtbENvbnRlbnQoY29sdW1uLCBlbGVtZW50KVwiIFxuICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImdldENsYXNzZXMoY29sdW1uLCBlbGVtZW50KVwiPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICA8IS0tIFBhdGllbnQgTmFtZSBDb2x1bW4gLS0+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbHVtbi5rZXkgPT09ICdwYXRpZW50X25hbWUnXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICA8aW1nICpuZ0lmPVwiZWxlbWVudC5wYXRpZW50SWRcIiBzcmM9XCJ7eyBjaGVja1BhdGllbnRSZWdGaWVsZCgnUHJvZmlsZSBQaG90bycpID8gYmFzZVVSTCArICcvcGVyc29uaW1hZ2UvJyArIGVsZW1lbnQucGF0aWVudElkIDogJycgfX1cIiBhbHQ9XCJcIiB3aWR0aD1cIjMycHhcIiBoZWlnaHQ9XCIzMnB4XCIgc3R5bGU9XCJib3JkZXItcmFkaXVzOiA1MCU7XCI+XG4gICAgICAgICAgICAgIDxpbWcgKm5nSWY9XCJwbHVnaW5Db25maWdPYnMucGx1Z2luQ29uZmlnT2JzRmxhZyAhPT0gJ0FwcG9pbnRtZW50J1wiIHNyYz1cInt7IGNoZWNrUGF0aWVudFJlZ0ZpZWxkKCdQcm9maWxlIFBob3RvJykgPyBiYXNlVVJMICsgJy9wZXJzb25pbWFnZS8nICsgZWxlbWVudC5wZXJzb24udXVpZCA6ICcnIH19XCIgYWx0PVwiXCIgd2lkdGg9XCIzMnB4XCIgaGVpZ2h0PVwiMzJweFwiIHN0eWxlPVwiYm9yZGVyLXJhZGl1czogNTAlO1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxvYXQtbGVmdFwiIFxuICAgICAgICAgICAgICAgIFtpbm5lckhUTUxdPVwicmVuZGVySHRtbENvbnRlbnQoY29sdW1uLCBlbGVtZW50KVwiIFxuICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImdldENsYXNzZXMoY29sdW1uLCBlbGVtZW50KVwiPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgPCEtLSBUZWxlcGhvbmUgQ29sdW1uIC0tPlxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb2x1bW4ua2V5ID09PSAndGVsZXBob25lJyAmJiBlbGVtZW50LnRlbGVwaG9uZVwiPlxuICAgICAgICAgICAgPGEgKGNsaWNrKT1cIm9wZW5XaGF0c0FwcCgkZXZlbnQsIGVsZW1lbnQudGVsZXBob25lKVwiIGNsYXNzPVwiZmxvYXQtbGVmdCBpY29uLWJ0biBtLTBcIiBbYXR0ci5kYXRhLXRlc3QtaWRdPVwiJ2xpbmtQYXRpZW50V2hhdHNBcHAnICsgalwiPlxuICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9zdmdzL3doYXRzYXBwLWdyZWVuLnN2Z1wiIGFsdD1cIldoYXRzQXBwXCIgLz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgIDwhLS0gQWN0aW9ucyBDb2x1bW4gLS0+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbHVtbi5rZXkgPT09ICdhY3Rpb25zJ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbnMtYnRuLXdyYXAgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGFjdGlvbiBvZiBjb2x1bW4uYWN0aW9uQnV0dG9uc1wiXG4gICAgICAgICAgICAgICAgW25nU3R5bGVdPVwie1xuICAgICAgICAgICAgICAgICAgY29sb3I6IGFjdGlvbi5zdHlsZT8uY29sb3IsXG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFjdGlvbi5zdHlsZT8uYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgICAgfVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJhY3Rpb24tYnRuIG1yLTJcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIChjbGljayk9XCIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IGhhbmRsZUFjdGlvbihhY3Rpb24sIGVsZW1lbnQpXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt7IGFjdGlvbi5sYWJlbCB8IHRyYW5zbGF0ZSB9fVxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L3RkPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgXG5cbiAgICAgIDwhLS0gTm8gRGF0YSBSb3cgLS0+XG4gICAgICA8dHIgY2xhc3M9XCJtYXQtcm93XCIgKm1hdE5vRGF0YVJvdz5cbiAgICAgICAgPHRkIGNsYXNzPVwibWF0LWNlbGwgdGV4dC1jZW50ZXJcIiBbYXR0ci5jb2xzcGFuXT1cImRpc3BsYXllZENvbHVtbnMubGVuZ3RoXCI+XG4gICAgICAgICAge3sgcGx1Z2luQ29uZmlnT2JzLm5vUmVjb3JkRm91bmQgfCB0cmFuc2xhdGUgfX1cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG5cbiAgICAgIDwhLS0gUm93IERlZmluaXRpb25zIC0tPlxuICAgICAgPHRyIG1hdC1oZWFkZXItcm93ICptYXRIZWFkZXJSb3dEZWY9XCJkaXNwbGF5ZWRDb2x1bW5zXCI+PC90cj5cbiAgICAgIDx0ciBtYXQtcm93ICptYXRSb3dEZWY9XCJsZXQgcm93OyBsZXQgeCA9IGluZGV4OyBjb2x1bW5zOiBkaXNwbGF5ZWRDb2x1bW5zO1wiIFthdHRyLmRhdGEtdGVzdC1pZF09XCIndHInICsgeFwiIFtyb3V0ZXJMaW5rXT1cIlsnL2Rhc2hib2FyZC92aXNpdC1zdW1tYXJ5Jywgcm93LnV1aWRdXCI+PC90cj5cbiAgICAgIFxuICAgIDwvdGFibGU+XG4gICAgPG1hdC1wYWdpbmF0b3IgI3RlbXBQYWdpbmF0b3IgaGlkZVBhZ2VTaXplIFtwYWdlU2l6ZU9wdGlvbnNdPVwicGFnZVNpemVPcHRpb25zXCIgYXJpYS1sYWJlbD1cIlNlbGVjdCBwYWdlIG9mIHBlcmlvZGljIGVsZW1lbnRzXCI+PC9tYXQtcGFnaW5hdG9yPlxuICA8L2Rpdj5cbjwvbWF0LWV4cGFuc2lvbi1wYW5lbD5cbiJdfQ==