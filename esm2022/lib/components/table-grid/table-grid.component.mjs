import { Component, ElementRef, ViewChild, Input, ChangeDetectionStrategy, Inject, Output, EventEmitter } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { AppointmentService } from '../../services/appointment.service';
import { VisitService } from '../../services/visit.service';
import moment from 'moment';
import { CoreService } from '../../services/core.service';
import { ToastrService } from 'ngx-toastr';
import { TranslateService } from '@ngx-translate/core';
import { getCacheData, checkIfDateOldThanOneDay, isFeaturePresent } from '../../utils/utility-functions';
import { doctorDetails, languages, visitTypes } from '../../config/constant';
import { MindmapService } from '../../services/mindmap.service';
import { AppConfigService } from '../../services/app-config.service';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { MatMenuTrigger } from '@angular/material/menu';
import { DomSanitizer } from '@angular/platform-browser';
import { NgxRolesService } from 'ngx-permissions';
import { MatSort } from '@angular/material/sort';
import { NgxUiLoaderService } from 'ngx-ui-loader';
import * as i0 from "@angular/core";
import * as i1 from "../../services/appointment.service";
import * as i2 from "../../services/visit.service";
import * as i3 from "../../services/core.service";
import * as i4 from "ngx-toastr";
import * as i5 from "@ngx-translate/core";
import * as i6 from "../../services/mindmap.service";
import * as i7 from "@angular/platform-browser";
import * as i8 from "../../services/app-config.service";
import * as i9 from "ngx-permissions";
import * as i10 from "ngx-ui-loader";
import * as i11 from "@angular/router";
import * as i12 from "@angular/common";
import * as i13 from "@angular/material/paginator";
import * as i14 from "@angular/material/tooltip";
import * as i15 from "@angular/material/form-field";
import * as i16 from "@angular/material/expansion";
import * as i17 from "@angular/material/menu";
import * as i18 from "@angular/material/table";
import * as i19 from "@angular/material/icon";
import * as i20 from "@angular/material/datepicker";
import * as i21 from "@angular/forms";
import * as i22 from "@angular/material/sort";
import * as i23 from "../../core/directives/default-image.directive";
export class TableGridComponent {
    appointmentService;
    visitService;
    coreService;
    toastr;
    translateService;
    mindmapService;
    sanitizer;
    appConfigService;
    rolesService;
    ngxLoader;
    pluginConfigObs;
    displayedAppointmentColumns = [];
    displayedColumns = [];
    dataSource = new MatTableDataSource();
    patientRegFields = [];
    isMCCUser = false;
    pageSizeOptions = [5, 10, 20];
    paginator;
    searchElement;
    filteredDateAndRangeForm;
    tempPaginator;
    menuTrigger;
    tableMatSort;
    panelExpanded = true;
    mode = 'date';
    maxDate;
    appointments = [];
    priorityVisits = [];
    awaitingVisits = [];
    inProgressVisits = [];
    completedVisits = [];
    followUpVisits = [];
    specialization = '';
    visitsCountDate = new EventEmitter();
    visitsLengthCount = 0;
    isFilterApplied = false;
    pvs;
    baseURL;
    isBrandName;
    // to apply filter with date and text search
    dateField;
    dateFilter;
    originalData;
    filteredDataAfterDate;
    tableLoader;
    ngAfterViewInit() {
        this.dataSource.paginator = this.paginator;
        // this.dataSource.sort = this.tableMatSort;
    }
    constructor(appointmentService, visitService, coreService, toastr, translateService, mindmapService, sanitizer, appConfigService, rolesService, ngxLoader, environment) {
        this.appointmentService = appointmentService;
        this.visitService = visitService;
        this.coreService = coreService;
        this.toastr = toastr;
        this.translateService = translateService;
        this.mindmapService = mindmapService;
        this.sanitizer = sanitizer;
        this.appConfigService = appConfigService;
        this.rolesService = rolesService;
        this.ngxLoader = ngxLoader;
        this.tableLoader = isFeaturePresent(environment.featureList, 'tableLoader');
        this.baseURL = environment.baseURL;
        this.filteredDateAndRangeForm = this.createFilteredDateRangeForm();
    }
    /**
     * Creates a filtered date range form with required date fields
     * @return {FormGroup} - The created form group
     */
    createFilteredDateRangeForm() {
        return new FormGroup({
            date: new FormControl('', [Validators.required]),
            startDate: new FormControl(null, Validators.required),
            endDate: new FormControl(null, Validators.required),
        });
    }
    ngOnInit() {
        this.isMCCUser = !!this.rolesService.getRole('ORGANIZATIONAL:MCC');
        this.appConfigService.load().then(() => {
            this.displayedColumns = this.displayedColumns.filter(col => (col !== 'age' || this.checkPatientRegField('Age')));
            Object.keys(this.appConfigService.patient_registration).forEach(obj => {
                this.patientRegFields.push(...this.appConfigService.patient_registration[obj].filter((e) => e.is_enabled).map((e) => e.name));
            });
            this.pvs = { ...this.appConfigService.patient_visit_summary };
            this.pvs.appointment_button = this.pvs.appointment_button;
            this.displayedColumns = this.displayedColumns.filter(col => {
                if (col === 'drName' && !this.isMCCUser)
                    return false;
                if (col === 'age')
                    return this.checkPatientRegField('Age');
                return true;
            });
            if (!this.pvs.awaiting_visits_patient_type_demarcation) {
                this.displayedColumns = this.displayedColumns.filter(col => (col !== 'patient_type'));
            }
        }).catch((error) => {
            console.error('Error loading app config', error);
        });
        this.translateService.use(getCacheData(false, languages.SELECTED_LANGUAGE));
        let provider = getCacheData(true, doctorDetails.PROVIDER);
        if (provider) {
            if (provider.attributes.length) {
                this.specialization = this.getSpecialization(provider.attributes);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Appointment") {
                this.getAppointments();
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Awaiting") {
                this.getAwaitingVisits(1);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Priority") {
                this.getPriorityVisits(1);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "InProgress") {
                this.getInProgressVisits(1);
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "Completed") {
                this.getCompletedVisits();
            }
            if (this.pluginConfigObs?.pluginConfigObsFlag === "FollowUp") {
                this.getFollowUpVisit();
            }
        }
        this.maxDate = this.pluginConfigObs.filterObs.filterDateMax;
        if (this.pluginConfigObs.hasOwnProperty("pageSizeOptions")) {
            this.pageSizeOptions = this.pluginConfigObs.pageSizeOptions;
        }
    }
    /**
     * Dynmaic label Display
     * @param changes pluginConfigObs
     */
    ngOnChanges(changes) {
        if (changes["pluginConfigObs"] && changes["pluginConfigObs"].currentValue) {
            this.displayedAppointmentColumns = [...changes["pluginConfigObs"].currentValue?.tableColumns];
            this.displayedColumns = this.displayedAppointmentColumns.map(column => column.key);
        }
        if ((!changes['pluginConfigObs'].firstChange) && this.pluginConfigObs.pluginConfigObsFlag == "Appointment" && changes["pluginConfigObs"].currentValue?.tableHeader !== changes["pluginConfigObs"].previousValue?.tableHeader) {
            this.getAppointments();
        }
        const prev = changes['pluginConfigObs'].previousValue;
        const curr = changes['pluginConfigObs'].currentValue;
        const prevType = prev?.filter?.filterType;
        const currType = curr?.filter?.filterType;
        if (prevType !== currType) {
            console.log("tab changed");
            this.resetDateForm(); // Reset only when type has changed
        }
    }
    /**
    * Reset the date for appointments(Today's,upcoming,pending appoinments)  g
    */
    resetDateForm() {
        if (this.filteredDateAndRangeForm) {
            this.filteredDateAndRangeForm.reset({
                date: null,
                startDate: null,
                endDate: null
            });
        }
        this.mode = 'date';
        this.searchElement.nativeElement.value = "";
        this.isFilterApplied = false;
        this.dataSource.filter = null;
    }
    /**
    * Retreive the chief complaints for the visit
    * @param {CustomVisitModel} visit - Visit
    * @return {string[]} - Chief complaints array
    */
    getCheifComplaint(visit) {
        let recent = [];
        const encounters = visit.encounters;
        encounters.forEach((encounter) => {
            const display = encounter.type?.name;
            if (display.match(visitTypes.ADULTINITIAL) !== null) {
                const obs = encounter.obs;
                obs.forEach((currentObs) => {
                    if (currentObs.concept_id == 163212) {
                        const currentComplaint = this.visitService.getData2(currentObs)?.value_text.replace(new RegExp('â–º', 'g'), '').split('<b>');
                        for (let i = 1; i < currentComplaint.length; i++) {
                            const obs1 = currentComplaint[i].split('<');
                            if (!obs1[0].match(visitTypes.ASSOCIATED_SYMPTOMS)) {
                                recent.push(obs1[0]);
                            }
                        }
                    }
                });
            }
        });
        return recent;
    }
    /**
    * Check how old the date is from now
    * @param {string} data - Date in string format
    * @return {string} - Returns how old the date is from now
    */
    checkIfDateOldThanOneDay(data) {
        let hours = moment(data).diff(moment(), 'hours');
        let minutes = moment(data).diff(moment(), 'minutes');
        if (hours > 24) {
            return moment(data).format('DD MMM, YYYY hh:mm A');
        }
        ;
        if (hours < 1) {
            if (minutes < 0)
                return `Due : ${moment(data).format('DD MMM, YYYY hh:mm A')}`;
            return `${minutes} minutes`;
        }
        return `${hours} hrs`;
    }
    /**
    * Reschedule appointment
    * @param {AppointmentModel} appointment - Appointment to be rescheduled
    * @param {boolean} isValidationRequired - If true, validation is required
    * @return {void}
    */
    reschedule(appointment, isValidationRequired) {
        const len = appointment.visit.encounters.filter((e) => {
            return (e.type.name == visitTypes.PATIENT_EXIT_SURVEY || e.type.name == visitTypes.VISIT_COMPLETE);
        }).length;
        const isCompleted = Boolean(len);
        if (isCompleted) {
            this.toastr.error(this.translateService.instant("Visit is already completed, it can't be rescheduled."), this.translateService.instant('Rescheduling failed!'));
        }
        else if (appointment.visitStatus == 'Visit In Progress' && isValidationRequired) {
            this.toastr.error(this.translateService.instant("Visit is in progress, it can't be rescheduled."), this.translateService.instant('Rescheduling failed!'));
        }
        else {
            this.coreService.openRescheduleAppointmentModal(appointment).subscribe((res) => {
                if (res) {
                    let newSlot = res;
                    this.coreService.openRescheduleAppointmentConfirmModal({ appointment, newSlot }).subscribe((result) => {
                        if (result) {
                            appointment.appointmentId = appointment.id;
                            appointment.slotDate = moment(newSlot.date, "YYYY-MM-DD").format('DD/MM/YYYY');
                            appointment.slotTime = newSlot.slot;
                            this.appointmentService.rescheduleAppointment(appointment).subscribe((res) => {
                                const message = res.message;
                                if (res.status) {
                                    this.mindmapService.notifyHwForRescheduleAppointment(appointment);
                                    this.getAppointments();
                                    this.toastr.success(this.translateService.instant("The appointment has been rescheduled successfully!"), this.translateService.instant('Rescheduling successful!'));
                                }
                                else {
                                    this.toastr.success(message, this.translateService.instant('Rescheduling failed!'));
                                }
                            });
                        }
                    });
                }
            });
        }
    }
    /**
    * Cancel appointment
    * @param {AppointmentModel} appointment - Appointment to be rescheduled
    * @param {boolean} isValidationRequired - If true, validation is required
    * @return {void}
    */
    cancel(appointment, isValidationRequired) {
        if (appointment.visitStatus == 'Visit In Progress' && isValidationRequired) {
            this.toastr.error(this.translateService.instant("Visit is in progress, it can't be cancelled."), this.translateService.instant('Canceling failed!'));
            return;
        }
        this.coreService.openConfirmCancelAppointmentModal(appointment).subscribe((res) => {
            if (res) {
                this.toastr.success(this.translateService.instant('The Appointment has been successfully canceled.'), this.translateService.instant('Canceling successful'));
                this.getAppointments();
            }
        });
    }
    /**
    * Get user uuid from localstorage user
    * @return {string} - User uuid
    */
    get userId() {
        return getCacheData(true, doctorDetails.USER).uuid;
    }
    /**
    * Apply filter on a datasource
    * @param {Event} event - Input's change event
    * @return {void}
    */
    applyFilter(event) {
        const filterValue = event.target.value.trim().toLowerCase();
        if (this.pluginConfigObs?.pluginConfigObsFlag === "Appointment") {
            const customPredicate = (data, filter) => {
                return (data?.openMrsId?.toLowerCase().includes(filter) ||
                    data?.patientName?.toLowerCase().includes(filter) ||
                    data?.TMH_patient_id?.toLowerCase().includes(filter));
            };
            // Always filter from the full original data
            this.filteredDataAfterDate = this.originalData.filter(item => customPredicate(item, filterValue));
            this.dataSource.data = this.filteredDataAfterDate;
        }
        else {
            this.dataSource.filter = filterValue;
        }
        this.isFilterApplied = true;
    }
    // Call this once after loading appointments
    storeOriginalData() {
        this.originalData = [...this.dataSource.data]; // Backup full data
    }
    /**
    * Clear filter from a datasource
    * @return {void}
    */
    clearFilter() {
        this.dataSource.filter = null;
        this.searchElement.nativeElement.value = "";
        this.isFilterApplied = false;
        this.filteredDateAndRangeForm.reset({
            date: null,
            startDate: null,
            endDate: null
        });
        this.mode = 'date';
        this.dataSource.data = [...this.originalData];
    }
    /**
     * Checks if the field is in patient registration fields
     * @param {string} fieldName - The field name
     * @return {boolean} - True if present, else false
     */
    checkPatientRegField(fieldName) {
        return this.patientRegFields.indexOf(fieldName) !== -1;
    }
    /**
    * Returns the WhatsApp link for a given telephone number
    * @param {string} telephoneNumber - The telephone number to generate the link for
    * @return {string} - The WhatsApp link
    */
    getWhatsAppLink(telephoneNumber) {
        return this.visitService.getWhatsappLink(telephoneNumber);
    }
    /**
     * Retrieves the telephone number from the person's attributes
     * @param {AppointmentModel['visit']['person']} person - The person object containing attributes
     * @return {string | undefined} - The person's telephone number or undefined if not found
     */
    getTelephoneNumber(person) {
        return person?.person_attribute.find((v) => v.person_attribute_type_id == 8)?.value;
    }
    /**
     * Closes the menu if it's open
     */
    closeMenu() {
        if (this.menuTrigger) {
            this.menuTrigger.closeMenu();
        }
    }
    /**
     * Sets the mode for the component (either 'date' or 'range')
     * @param {'date' | 'range'} mode - The mode to set
     */
    setMode(mode) {
        this.mode = mode;
    }
    /**
     * Formats a date into 'YYYY-MM-DD' format
     * @param {any} date - The date to format
     * @return {string} - The formatted date
     */
    formatDate(date) {
        const localDate = new Date(date);
        const year = localDate.getFullYear();
        const month = String(localDate.getMonth() + 1).padStart(2, '0');
        const day = String(localDate.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }
    /**
     * Converts a relative time string (e.g., "2 hours", "1 day") to a date string
     * @param {string} relativeTime - The relative time string
     * @return {string} - The resulting date in 'YYYY-MM-DD' format
     * @throws {Error} - Throws error for invalid time units
     */
    convertToDate(relativeTime) {
        const now = new Date();
        const [value, unit] = relativeTime.split(' ');
        const amount = parseInt(value, 10);
        if (['hour', 'hours'].includes(unit.toLowerCase()))
            now.setHours(now.getHours() - amount);
        else if (['minute', 'minutes'].includes(unit.toLowerCase()))
            now.setMinutes(now.getMinutes() - amount);
        else if (['day', 'days'].includes(unit.toLowerCase()))
            now.setDate(now.getDate() - amount);
        else
            throw new Error('Invalid time unit. Only "hours", "minutes", or "days" are supported.');
        return now.toISOString().split('T')[0];
    }
    /**
     * Converts a follow-up date string to ISO format
     * @param {string} followUp - The follow-up date string
     * @return {string} - The follow-up date in ISO string format
     */
    convertToISO(followUp) {
        const date = new Date(followUp);
        date.setDate(date.getDate());
        return date.toISOString();
    }
    /**
     * Applies date or range filter to the data source based on selected date(s)
     * @param {string} dateField - The field name for the date to filter
     */
    applyDateOrRangeFilter(dateField) {
        const selectedDate = this.filteredDateAndRangeForm.get('date')?.value;
        const startDate = this.filteredDateAndRangeForm.get('startDate')?.value;
        const endDate = this.filteredDateAndRangeForm.get('endDate')?.value;
        if (selectedDate) {
            const formattedDate = this.formatDate(selectedDate);
            this.dateFilter = this.formatDate(selectedDate);
            this.dataSource.filterPredicate = (data, filter) => {
                let itemDate;
                if (dateField === "followUp") {
                    itemDate = this.formatDate(this.convertToISO(data.followUp));
                }
                else if (dateField === "slotJsDate") {
                    itemDate = this.formatDate(data[dateField]);
                }
                else {
                    itemDate = data[dateField].includes(',') ? this.formatDate(data[dateField]) : this.convertToDate(data[dateField]);
                }
                return itemDate === filter;
            };
            this.dataSource.filter = formattedDate;
        }
        else if (startDate && endDate) {
            const formattedStartDate = this.formatDate(startDate);
            const formattedEndDate = this.formatDate(endDate);
            this.dataSource.filterPredicate = (data, filter) => {
                let itemDate;
                if (dateField === "followUp") {
                    itemDate = this.formatDate(this.convertToISO(data.followUp));
                }
                else if (dateField === "slotJsDate") {
                    itemDate = this.formatDate(data[dateField]);
                }
                else {
                    itemDate = data[dateField].includes(',') ? this.formatDate(data[dateField]) : this.convertToDate(data[dateField]);
                }
                return itemDate >= formattedStartDate && itemDate <= formattedEndDate;
            };
            this.dataSource.filter = `${formattedStartDate}:${formattedEndDate}`;
            this.dateFilter = `${this.formatDate(startDate)}:${this.formatDate(endDate)}`;
        }
        else {
            this.dataSource.filter = '';
            this.dateFilter = '';
        }
        this.dateField = dateField;
        //this.updateCombinedFilter();
        this.tempPaginator.firstPage();
        this.closeMenu();
    }
    /**
     * Resets the date filter form and clears the data source filter
     * @param {boolean} flag - If true, doesn't close the menu
     */
    resetDate(flag = false) {
        this.filteredDateAndRangeForm.reset();
        this.dataSource.filter = '';
        this.dataSource.filterPredicate = (data, filter) => data?.openMrsId.toLowerCase().indexOf(filter) != -1 || data?.patientName.toLowerCase().indexOf(filter) != -1;
        if (!flag) {
            this.closeMenu();
        }
    }
    /**
     * Retrieves a specific attribute data from the person's attributes
     * @param {any} data - The data object containing person attributes
     * @param {string} attributeName - The name of the attribute to retrieve
     * @return {Object | null} - The attribute name and value, or null if not found
     */
    getAttributeData(data, attributeName) {
        if (Array.isArray(data.person_attribute)) {
            const attribute = data.person_attribute.find((attr) => attr.person_attribute_type?.name === attributeName);
            if (attribute) {
                return {
                    name: attribute.person_attribute_type.name,
                    value: attribute.value
                };
            }
        }
        return null;
    }
    /**
    * Get booked appointments for a logged-in doctor in a current year
    * @return {void}
    */
    getAppointments() {
        this.ngxLoader.startLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Start section loader
        this.appointments = [];
        let fromDate = moment().startOf('year').format('DD/MM/YYYY');
        let toDate = moment().endOf('year').format('DD/MM/YYYY');
        let pending_visits = this.pluginConfigObs.filter?.hasOwnProperty("pending_visits") ? this.pluginConfigObs.filter?.pending_visits : null;
        if (this.pluginConfigObs?.filter) {
            fromDate = this.pluginConfigObs?.filter?.fromDate;
            toDate = this.pluginConfigObs?.filter?.toDate;
        }
        this.appointmentService.getUserSlots(getCacheData(true, doctorDetails.USER).uuid, fromDate, toDate, this.isMCCUser ? this.specialization : null, pending_visits)
            .subscribe({
            next: (res) => {
                this.visitsLengthCount = res.data?.length;
                this.emitVisitsCount(this.visitsLengthCount);
                let appointmentsdata = res.data;
                appointmentsdata.forEach((appointment) => {
                    if (appointment.status == 'booked' && (appointment.visitStatus == 'Awaiting Consult' || appointment.visitStatus == 'Visit In Progress')) {
                        if (appointment.visit) {
                            appointment.cheif_complaint = this.getCheifComplaint(appointment.visit);
                            appointment.starts_in = checkIfDateOldThanOneDay(appointment.slotJsDate);
                            appointment.telephone = this.getTelephoneNumber(appointment?.visit?.person);
                            appointment.TMH_patient_id = this.getAttributeData(appointment.visit, "TMH Case Number")?.value;
                            appointment.uuid = appointment.visitUuid;
                            appointment.location = appointment?.visit?.location?.name;
                            appointment.age = appointment?.patientAge + ' ' + this.translateService.instant('y');
                            this.appointments.push(appointment);
                        }
                    }
                });
                this.dataSource.data = [...this.appointments];
                this.dataSource.paginator = this.paginator;
                this.dataSource.sort = this.tableMatSort;
                this.dataSource.filterPredicate = (data, filter) => data?.openMrsId.toLowerCase().indexOf(filter) != -1 || data?.patientName.toLowerCase().indexOf(filter) != -1;
                this.storeOriginalData();
            },
            complete: () => {
                this.ngxLoader.stopLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Stop section loader
            }
        });
    }
    /**
    * Get doctor speciality
    * @param {ProviderAttributeModel[]} attr - Array of provider attributes
    * @return {string} - Doctor speciality
    */
    getSpecialization(attr) {
        let specialization = '';
        attr.forEach((a) => {
            if (a.attributeType.uuid == 'ed1715f5-93e2-404e-b3c9-2a2d9600f062' && !a.voided) {
                specialization = a.value;
            }
        });
        return specialization;
    }
    /**
    * Returns the age in years from the birthdate
    * @param {string} birthdate - Date in string format
    * @return {number} - Age
    */
    calculateAge(birthdate) {
        return moment().diff(birthdate, 'years');
    }
    /**
    * Returns the created time in words from the date
    * @param {string} data - Date
    * @return {string} - Created time in words from the date
    */
    getCreatedAt(data) {
        let hours = moment().diff(moment(data), 'hours');
        let minutes = moment().diff(moment(data), 'minutes');
        if (hours > 24) {
            return moment(data).format('DD MMM, YYYY');
        }
        ;
        if (hours < 1) {
            return `${minutes} ${this.translateService.instant("Minutes ago")}`;
        }
        return `${hours} ${this.translateService.instant("Hours ago")}`;
    }
    /**
    * Get encounter datetime for a given encounter type
    * @param {CustomVisitModel} visit - Visit
    * @param {string} encounterName - Encounter type
    * @return {string} - Encounter datetime
    */
    getEncounterCreated(visit, encounterName) {
        let created_at = '';
        const encounters = visit.encounters;
        encounters.forEach((encounter) => {
            const display = encounter.type?.name;
            if (display.match(encounterName) !== null) {
                created_at = this.getCreatedAt(encounter.encounter_datetime.replace('Z', '+0530'));
            }
        });
        return created_at;
    }
    /**
     * Determines if the encounter is a follow-up or new visit
     * @param {any} enc - Encounter data
     * @return {string} - 'FOLLOW_UP' or 'NEW'
     */
    getDemarcation(enc) {
        let isFollowUp = false;
        const adlIntl = enc?.find?.(e => e?.type?.name === visitTypes.ADULTINITIAL);
        if (Array.isArray(adlIntl?.obs)) {
            adlIntl?.obs.forEach(obs => {
                if (!isFollowUp)
                    isFollowUp = obs?.value_text?.toLowerCase?.()?.includes?.("follow up");
            });
        }
        return isFollowUp ? visitTypes.FOLLOW_UP : visitTypes.NEW;
    }
    /**
    * Get awaiting visits for a given page number
    * @param {number} page - Page number
    * @return {void}
    */
    getAwaitingVisits(page = 1) {
        this.ngxLoader.startLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Start section loader
        if (page == 1) {
            this.awaitingVisits = [];
        }
        this.visitService.getAwaitingVisits(this.specialization, page).subscribe({
            next: (res) => {
                if (res.success) {
                    this.visitsLengthCount = res.totalCount;
                    this.emitVisitsCount(this.visitsLengthCount);
                    for (let i = 0; i < res.data.length; i++) {
                        let visit = res.data[i];
                        visit.cheif_complaint = this.getCheifComplaint(visit);
                        visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.ADULTINITIAL);
                        visit.person.age = this.calculateAge(visit.person.birthdate);
                        visit.patient_type = this.getDemarcation(visit?.encounters);
                        visit.location = visit?.location?.name;
                        visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                        this.awaitingVisits.push(visit);
                    }
                    this.dataSource.data = [...this.awaitingVisits];
                    if (page == 1) {
                        this.dataSource.paginator = this.tempPaginator;
                        this.dataSource.sort = this.tableMatSort;
                        this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                    }
                    else {
                        this.tempPaginator.length = this.awaitingVisits.length;
                        this.tempPaginator.nextPage();
                    }
                }
            },
            complete: () => {
                this.ngxLoader.stopLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Stop section loader
            }
        });
    }
    /**
    * Get inprogress visits for a given page number
    * @param {number} page - Page number
    * @return {void}
    */
    getInProgressVisits(page = 1) {
        this.ngxLoader.startLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Start section loader
        if (page == 1) {
            this.inProgressVisits = [];
        }
        this.visitService.getInProgressVisits(this.specialization, page).subscribe({
            next: (res) => {
                if (res.success) {
                    this.visitsLengthCount = res.totalCount;
                    this.emitVisitsCount(this.visitsLengthCount);
                    for (let i = 0; i < res.data.length; i++) {
                        let visit = res.data[i];
                        visit.cheif_complaint = this.getCheifComplaint(visit);
                        visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.ADULTINITIAL);
                        visit.prescription_started = this.getEncounterCreated(visit, visitTypes.VISIT_NOTE);
                        visit.person.age = this.calculateAge(visit.person.birthdate);
                        visit.TMH_patient_id = this.getAttributeData(visit, "TMH Case Number")?.value;
                        visit.location = visit?.location?.name;
                        visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                        this.inProgressVisits.push(visit);
                    }
                    this.inProgressVisits.sort((a, b) => {
                        const parseTime = (value) => {
                            if (value.includes("minutes ago")) {
                                return { type: "minutes", time: parseInt(value) }; // Store only numeric minutes
                            }
                            if (value.includes("Hours ago")) {
                                return { type: "hours", time: parseInt(value) * 60 }; // Convert hours to minutes for correct comparison
                            }
                            return { type: "date", time: moment(value, "DD MMM, YYYY").valueOf() };
                        };
                        const visitA = parseTime(a.prescription_started);
                        const visitB = parseTime(b.prescription_started);
                        // Sort minutes first (ascending)
                        if (visitA.type === "minutes" && visitB.type === "minutes") {
                            return visitA.time - visitB.time;
                        }
                        // Sort hours first (ascending)
                        if (visitA.type === "hours" && visitB.type === "hours") {
                            return visitA.time - visitB.time;
                        }
                        // Sort dates (descending)
                        if (visitA.type === "date" && visitB.type === "date") {
                            return visitB.time - visitA.time;
                        }
                        // Prioritize minutes over hours, and hours over dates
                        if (visitA.type === "minutes")
                            return -1;
                        if (visitB.type === "minutes")
                            return 1;
                        if (visitA.type === "hours")
                            return -1;
                        if (visitB.type === "hours")
                            return 1;
                        return 0;
                    });
                    this.dataSource.data = [...this.inProgressVisits];
                    if (page == 1) {
                        this.dataSource.paginator = this.tempPaginator;
                        this.dataSource.sort = this.tableMatSort;
                        this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                    }
                    else {
                        this.tempPaginator.length = this.inProgressVisits.length;
                        this.tempPaginator.nextPage();
                    }
                }
            },
            complete: () => {
                this.ngxLoader.stopLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Stop section loader
            }
        });
    }
    /**
    * Get priority visits for a given page number
    * @param {number} page - Page number
    * @return {void}
    */
    getPriorityVisits(page = 1) {
        this.ngxLoader.startLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Start section loader
        if (page == 1) {
            this.priorityVisits = [];
        }
        this.visitService.getPriorityVisits(this.specialization, page).subscribe({
            next: (res) => {
                if (res.success) {
                    this.visitsLengthCount = res.totalCount;
                    this.emitVisitsCount(this.visitsLengthCount);
                    for (let i = 0; i < res.data.length; i++) {
                        let visit = res.data[i];
                        visit.cheif_complaint = this.getCheifComplaint(visit);
                        visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.FLAGGED);
                        visit.person.age = this.calculateAge(visit.person.birthdate);
                        visit.location = visit?.location?.name;
                        visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                        this.priorityVisits.push(visit);
                    }
                    this.dataSource.data = [...this.priorityVisits];
                    if (page == 1) {
                        this.dataSource.paginator = this.tempPaginator;
                        this.dataSource.sort = this.tableMatSort;
                        this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                    }
                    else {
                        this.tempPaginator.length = this.priorityVisits.length;
                        this.tempPaginator.nextPage();
                    }
                }
            },
            complete: () => {
                this.ngxLoader.stopLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Stop section loader
            }
        });
    }
    /**
     * Get completed visits count
     * @return {void}
     */
    getCompletedVisits(page = 1) {
        this.ngxLoader.startLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Start section loader
        this.visitService.getEndedVisits(this.specialization, page).subscribe({
            next: (res) => {
                if (res.success) {
                    this.visitsLengthCount = res.totalCount;
                    this.emitVisitsCount(this.visitsLengthCount);
                    for (let i = 0; i < res.data.length; i++) {
                        let visit = res.data[i];
                        visit.cheif_complaint = this.getCheifComplaint(visit);
                        visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.COMPLETED_VISIT);
                        visit.person.age = this.calculateAge(visit.person.birthdate);
                        visit.completed = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.VISIT_COMPLETE);
                        visit.TMH_patient_id = this.getAttributeData(visit, "TMH Case Number")?.value;
                        visit.location = visit?.location?.name;
                        visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                        this.completedVisits.push(visit);
                    }
                    this.dataSource.data = [...this.completedVisits];
                    if (page == 1) {
                        this.dataSource.paginator = this.tempPaginator;
                        this.dataSource.sort = this.tableMatSort;
                        this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                    }
                    else {
                        this.tempPaginator.length = this.completedVisits.length;
                        this.tempPaginator.nextPage();
                    }
                }
            },
            complete: () => {
                this.ngxLoader.stopLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Stop section loader
            }
        });
    }
    /**
    * Get follow-up visits for a logged-in doctor
    * @return {void}
    */
    getFollowUpVisit(page = 1) {
        this.ngxLoader.startLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Start section loader
        this.visitService.getFollowUpVisits(this.specialization).subscribe({
            next: (res) => {
                if (res.success) {
                    for (let i = 0; i < res.data.length; i++) {
                        let visit = res.data[i];
                        if (visit?.encounters?.length) {
                            this.visitsLengthCount += 1;
                            visit.cheif_complaint = this.getCheifComplaint(visit);
                            visit.visit_created = visit?.date_created ? this.getCreatedAt(visit.date_created.replace('Z', '+0530')) : this.getEncounterCreated(visit, visitTypes.COMPLETED_VISIT);
                            visit.person.age = this.calculateAge(visit.person.birthdate);
                            visit.completed = this.getEncounterCreated(visit, visitTypes.VISIT_COMPLETE);
                            visit.followUp = this.processFollowUpDate(this.getEncounterObs(visit.encounters, visitTypes.VISIT_NOTE, 163345 /*Follow-up*/)?.value_text);
                            visit.location = visit?.location?.name;
                            visit.age = visit?.person?.age + ' ' + this.translateService.instant('y');
                            this.followUpVisits.push(visit);
                        }
                    }
                    this.emitVisitsCount(this.visitsLengthCount);
                    this.dataSource.data = [...this.followUpVisits];
                    if (page == 1) {
                        this.dataSource.paginator = this.tempPaginator;
                        this.dataSource.sort = this.tableMatSort;
                        this.dataSource.filterPredicate = (data, filter) => data?.patient.identifier.toLowerCase().indexOf(filter) != -1 || data?.patient_name.given_name.concat((data?.patient_name.middle_name && this.checkPatientRegField('Middle Name') ? ' ' + data?.patient_name.middle_name : '') + ' ' + data?.patient_name.family_name).toLowerCase().indexOf(filter) != -1;
                    }
                    else {
                        this.tempPaginator.length = this.followUpVisits.length;
                        this.tempPaginator.nextPage();
                    }
                }
            },
            complete: () => {
                this.ngxLoader.stopLoader('table-loader-' + this.pluginConfigObs.pluginConfigObsFlag); // Stop section loader
            }
        });
    }
    /**
    * Get encounter datetime for a given encounter type
    * @param {CustomVisitModel} visit - Visit
    * @param {string} encounterName - Encounter type
    * @return {string} - Encounter datetime
    */
    getEncounterObs(encounters, encounterName, conceptId) {
        let obs;
        encounters.forEach((encounter) => {
            if (encounter.type?.name === encounterName) {
                obs = encounter?.obs?.find((o) => o.concept_id == conceptId);
            }
        });
        return obs;
    }
    /**
     * Renders HTML content for a column, sanitized for security
     * @param {any} column - Column definition
     * @param {any} element - Data element to render
     * @return {SafeHtml | string} - Formatted HTML or element value
     */
    renderHtmlContent(column, element) {
        return column.formatHtml && typeof column.formatHtml === 'function' ? this.sanitizer.bypassSecurityTrustHtml(column.formatHtml(element)) : element[column.key];
    }
    /**
     * Returns a string of CSS classes for the column
     * @param {any} column - Column definition
     * @return {string} - Space-separated class names
     */
    getClasses(column, element) {
        let classList = [];
        // If column has a static classList (array or string), add it
        if (column.classList) {
            classList = typeof column.classList === "function" ? column.classList(element) : column.classList;
        }
        return classList.join(" ");
    }
    /**
     * Formats the follow-up date by cleaning up time details
     * @param {string} value - Follow-up date string
     * @return {string} - Formatted date
     */
    processFollowUpDate(value) {
        return value ? value.split(',').length > 1 ? `${value.split(',')[0]} ${value.split(',')[1].replace("Time:", "")}` : value : '';
    }
    ;
    /**
     * Executes the action based on its label (Reschedule or Cancel)
     * @param {any} action - Action object
     * @param {any} element - Element to perform the action on
     */
    handleAction(action, element) {
        const isValidationRequired = action.validationRequired !== undefined ? action.validationRequired : true;
        if (action.label === 'Reschedule') {
            this.reschedule(element, isValidationRequired);
        }
        else if (action.label === 'Cancel') {
            this.cancel(element, isValidationRequired);
        }
    }
    /**
     * Opens a WhatsApp chat with the given phone number
     * @param {MouseEvent} event - The click event to prevent row navigation
     * @param {string} telephone - Phone number for WhatsApp
     */
    openWhatsApp(event, telephone) {
        event.stopPropagation(); // Prevent row navigation
        const whatsappLink = `https://wa.me/${telephone}`;
        window.open(whatsappLink, '_blank', 'noopener,noreferrer');
    }
    /**
     * Emits the visits count data with the given table tag name and count
     * @param {number} visitsCount - The total visits count for the specific table
     */
    emitVisitsCount(visitsCount) {
        const visitsCountData = {
            tableTagName: this.pluginConfigObs.pluginConfigObsFlag,
            visitsCount: visitsCount
        };
        this.visitsCountDate.emit(visitsCountData);
    }
    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableGridComponent, deps: [{ token: i1.AppointmentService }, { token: i2.VisitService }, { token: i3.CoreService }, { token: i4.ToastrService }, { token: i5.TranslateService }, { token: i6.MindmapService }, { token: i7.DomSanitizer }, { token: i8.AppConfigService }, { token: i9.NgxRolesService }, { token: i10.NgxUiLoaderService }, { token: 'environment' }], target: i0.ÉµÉµFactoryTarget.Component });
    static Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: TableGridComponent, selector: "lib-table-grid", inputs: { pluginConfigObs: "pluginConfigObs" }, outputs: { visitsCountDate: "visitsCountDate" }, viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }, { propertyName: "searchElement", first: true, predicate: ["searchInput"], descendants: true, static: true }, { propertyName: "tempPaginator", first: true, predicate: ["tempPaginator"], descendants: true }, { propertyName: "menuTrigger", first: true, predicate: MatMenuTrigger, descendants: true }, { propertyName: "tableMatSort", first: true, predicate: ["tableMatSort"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<mat-expansion-panel [expanded]=\"true\" data-test-id=\"matExpAppointment\">\r\n  <mat-expansion-panel-header data-test-id=\"matExpHeaderAppointment\">\r\n    <mat-panel-title data-test-id=\"matPanelTitleAppointment\">\r\n      <div id=\"{{pluginConfigObs.anchorId}}\" class=\"anchor-con\" data-test-id=\"divAnchorAppointment\"></div>\r\n      <div class=\"intel-accordion-title\" data-test-id=\"divAccordionTitleAppointment\">\r\n        <img src=\"{{ pluginConfigObs.tableHeaderIcon }}\" alt=\"\" width=\"44px\" data-test-id=\"imgTableHeaderIconAppointment\">\r\n        <h6 class=\"mb-0 ml-2\" [attr.data-test-id]=\"pluginConfigObs.tableHeader\"> \r\n          {{ pluginConfigObs.tableHeader  | translate }} ({{ visitsLengthCount }})\r\n        </h6>\r\n        <mat-icon \r\n          aria-hidden=\"false\" \r\n          aria-label=\"help icon\" \r\n          matTooltip=\"{{ (pluginConfigObs.tooltipLabel | translate) }}\" \r\n          matTooltipPosition=\"right\" \r\n          data-test-id=\"icoHelpAppointment\">\r\n          help_outline\r\n        </mat-icon>\r\n\r\n        <!-- Filter button -->\r\n        <div class=\"ml-auto filter-search-container\" data-test-id=\"divFilterContainerAppointment\">\r\n          <button \r\n            *ngIf=\"pluginConfigObs.filterObs.filterFlag\" \r\n            class=\"mat-stroked-button filter-btn\" \r\n            [matMenuTriggerFor]=\"filterMenu1\" \r\n            (click)=\"$event.stopPropagation();\" \r\n            data-test-id=\"btnFilterAppointment\">\r\n            <img src=\"{{pluginConfigObs.filterObs.filterIcon}}\" alt=\"\" data-test-id=\"imgFilterIconAppointment\"> \r\n            {{( pluginConfigObs.filterObs.filterLabel| translate)}}\r\n          </button>\r\n\r\n          <!-- Filter Menu -->\r\n          <mat-menu #filterMenu1=\"matMenu\" class=\"custom-menu\" [hasBackdrop]=\"true\" xPosition=\"before\" data-test-id=\"menuFilterAppointment\">\r\n            <div class=\"toggle-buttons\" data-test-id=\"divToggleButtonsAppointment\">\r\n              <button \r\n                mat-button \r\n                [class.active]=\"mode === 'date'\" \r\n                (click)=\"setMode('date'); $event.stopPropagation(); resetDate(true)\" \r\n                data-test-id=\"btnDateModeAppointment\">\r\n                {{'Date' | translate}}\r\n              </button>\r\n              <button \r\n                mat-button \r\n                [class.active]=\"mode === 'range'\" \r\n                (click)=\"setMode('range'); $event.stopPropagation(); resetDate(true)\" \r\n                data-test-id=\"btnRangeModeAppointment\">\r\n                {{'Range' | translate}}\r\n              </button>\r\n            </div>\r\n\r\n            <!-- Date Mode -->\r\n            <div *ngIf=\"mode === 'date'\" class=\"date-view\" (click)=\"$event.stopPropagation()\" data-test-id=\"divDateModeAppointment\">\r\n              <form [formGroup]=\"filteredDateAndRangeForm\">\r\n                <div class=\"form-date\">\r\n                  <div class=\"input-date\">\r\n                    <label class=\"label-text\">{{ 'Select date' | translate}}</label>\r\n                    <div class=\"input-wrapper\">\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        [max]=\"maxDate\" \r\n                        formControlName=\"date\" \r\n                        [matDatepicker]=\"dobdp\" \r\n                        placeholder=\"{{'Select date' | translate}}\" \r\n                        aria-label=\"Date\" \r\n                        readonly \r\n                        data-test-id=\"etDate\"/>\r\n                      <mat-datepicker #dobdp></mat-datepicker>\r\n                      <mat-datepicker-toggle \r\n                        matSuffix \r\n                        [for]=\"dobdp\" \r\n                        data-test-id=\"dpDate\" \r\n                        class=\"datepicker-icon\">\r\n                        <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                      </mat-datepicker-toggle>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n\r\n            <!-- Range Mode -->\r\n            <div *ngIf=\"mode === 'range'\" class=\"range-view\" (click)=\" $event.stopPropagation()\" data-test-id=\"divRangeModeAppointment\">\r\n              <form [formGroup]=\"filteredDateAndRangeForm\">\r\n                <div class=\"form-date\">\r\n                  <div class=\"input-date\">\r\n                    <label class=\"label-text\">{{ 'Start date' | translate }}</label>\r\n                    <div class=\"input-wrapper\">\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        [max]=\"filteredDateAndRangeForm.value.endDate ? filteredDateAndRangeForm.value.endDate : maxDate\" \r\n                        formControlName=\"startDate\" \r\n                        [matDatepicker]=\"picker1\" \r\n                        placeholder=\"{{'Select start date'|translate}}\" \r\n                        readonly \r\n                        data-test-id=\"etSelStartDate\">\r\n                      <mat-datepicker #picker1></mat-datepicker>\r\n                      <mat-datepicker-toggle matSuffix [for]=\"picker1\" class=\"datepicker-icon\" data-test-id=\"dpStartDate\">\r\n                        <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                      </mat-datepicker-toggle>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-date\">\r\n                  <div class=\"input-date\">\r\n                    <label class=\"label-text\">{{ 'End date' | translate }}</label>\r\n                    <div class=\"input-wrapper\">\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        [min]=\"filteredDateAndRangeForm.value.startDate\" \r\n                        [max]=\"maxDate\" \r\n                        formControlName=\"endDate\" \r\n                        [matDatepicker]=\"picker2\" \r\n                        placeholder=\"{{'Select end date'|translate}}\" \r\n                        readonly \r\n                        data-test-id=\"etSelEndDate\">\r\n                      <mat-datepicker #picker2></mat-datepicker>\r\n                      <mat-datepicker-toggle matSuffix [for]=\"picker2\" class=\"datepicker-icon\" data-test-id=\"dpEndDate\">\r\n                        <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                      </mat-datepicker-toggle>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n\r\n            <div class=\"action-buttons\" data-test-id=\"divFilterActionBtnsAppointment\">\r\n              <button mat-button class=\"reset-btn\" (click)=\"resetDate();\" data-test-id=\"btnResetFilterAppointment\">{{ 'Reset'| translate }}</button>\r\n              <button mat-button class=\"apply-btn\" (click)=\"applyDateOrRangeFilter(pluginConfigObs.filterObs.filterDateField)\" data-test-id=\"btnApplyFilterAppointment\">{{ 'Apply'| translate }}</button>\r\n            </div>\r\n          </mat-menu>\r\n\r\n          <!-- Search -->\r\n          <div class=\"input-group search-bar ml-auto\" (click)=\"$event.stopPropagation();\" data-test-id=\"divSearchAppointment\">\r\n            <input \r\n              type=\"text\" \r\n              #searchInput \r\n              class=\"form-control\" \r\n              placeholder=\"{{ pluginConfigObs.searchPlaceHolder | translate }}\" \r\n              (keyup)=\"applyFilter($event)\" \r\n              (keydown.Space)=\"$event.stopPropagation()\" \r\n              (keydown.Enter)=\"$event.stopPropagation()\" \r\n              data-test-id=\"etSearchAppointmentDashboard\">\r\n            <div class=\"input-group-append\">\r\n              <span class=\"input-group-text\" *ngIf=\"!isFilterApplied\" data-test-id=\"icoSearchAppointment\">\r\n                <img src=\"assets/svgs/search-icon.svg\" alt=\"\" width=\"20px\" height=\"20px\">\r\n              </span>\r\n              <button \r\n                class=\"btnResetApSerach mat-icon-button\" \r\n                aria-label=\"Reset appointment search\"  \r\n                (click)=\"clearFilter()\"  \r\n                *ngIf=\"isFilterApplied\" \r\n                data-test-id=\"btnResetSearchAppointment\">\r\n                <mat-icon class=\"ml-0\">close</mat-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-panel-title>\r\n  </mat-expansion-panel-header>\r\n\r\n  <div class=\"mat-elevation-z8\" data-test-id=\"divTableWrapperAppointment\">\r\n    <span *ngIf=\"tableLoader\">\r\n      <ngx-ui-loader \r\n        [loaderId]=\"'table-loader-' + pluginConfigObs.pluginConfigObsFlag\" \r\n        [fgsType]=\"'ball-spin-clockwise'\" \r\n        [fgsColor]=\"'#aba4a4'\" \r\n        [fgsPosition]=\"'center-center'\" \r\n        [fgsSize]=\"50\" \r\n        [overlayColor]=\"'rgb(255, 255, 255)'\" \r\n        [hasProgressBar]=\"false\"\r\n        [text]=\"('Loading'|translate) + ' ' + (pluginConfigObs.pluginConfigObsFlag|translate) + ' ' + ('data'|translate) + '...'\"\r\n        [textColor]=\"'#333'\"\r\n        [textPosition]=\"'center-center'\"\r\n        data-test-id=\"loaderAppointment\"\r\n      ></ngx-ui-loader>\r\n    </span>\r\n    <table mat-table [dataSource]=\"dataSource\" #tableMatSort=\"matSort\" matSort>\r\n\r\n      <ng-container *ngFor=\"let column of displayedAppointmentColumns\" [matColumnDef]=\"column.key\">\r\n        <ng-container *ngIf=\"column.isSortable; else noSort\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header matSortDirection=\"asc\" [attr.data-test-id]=\"'th-' + column.key + '-' + pluginConfigObs.pluginConfigObsFlag\">\r\n            {{ column.label | translate }}\r\n          </th>\r\n        </ng-container>\r\n        <ng-template #noSort>\r\n          <th mat-header-cell *matHeaderCellDef  [attr.data-test-id]=\"'th-' + column.key+ '-' + pluginConfigObs.pluginConfigObsFlag\">\r\n            {{ column.label | translate }}\r\n          </th>\r\n        </ng-template>\r\n\r\n        <td mat-cell *matCellDef=\"let element; let j = index;\" [attr.data-test-id]=\"'td-' + column.key + '-' + j\">\r\n          <ng-container *ngIf=\"column.key !== 'patient_name' && column.key !== 'visit_completed'\">\r\n            <div class=\"float-left\" \r\n                [innerHTML]=\"renderHtmlContent(column, element)\" \r\n                [ngClass]=\"getClasses(column, element)\">\r\n            </div>\r\n          </ng-container>\r\n          \r\n          <!-- This is for visit_completed column -->\r\n          <ng-container *ngIf=\"column.key === 'visit_completed'\">\r\n            <div class=\"d-flex align-items-center visit-completed-cell\"  [attr.data-test-id]=\"'td-visit_completed-' + j\">\r\n              <img src=\"assets/svgs/green-pad.svg\" alt=\"Completed\" class=\"mr-2\" />\r\n              <span class=\"text-success\">\r\n                {{ element.completed }}\r\n              </span>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <!-- Patient Name Column -->\r\n          <ng-container *ngIf=\"column.key === 'patient_name'\">\r\n            <div class=\"d-flex align-items-center\"   [attr.data-test-id]=\"'td-patient_name-' + j\">\r\n              <img *ngIf=\"element.patientId\" src=\"{{ checkPatientRegField('Profile Photo') ? baseURL + '/personimage/' + element.patientId : '' }}\" alt=\"\" width=\"32px\" height=\"32px\" style=\"border-radius: 50%;\">\r\n              <img *ngIf=\"pluginConfigObs.pluginConfigObsFlag !== 'Appointment'\" src=\"{{ checkPatientRegField('Profile Photo') ? baseURL + '/personimage/' + element.person.uuid : '' }}\" alt=\"\" width=\"32px\" height=\"32px\" style=\"border-radius: 50%;\" [attr.data-test-id]=\"'td-patient_img-' + j\">\r\n              <div class=\"float-left\" \r\n                [innerHTML]=\"renderHtmlContent(column, element)\" \r\n                [ngClass]=\"getClasses(column, element)\">\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <!-- Telephone Column -->\r\n          <ng-container *ngIf=\"column.key === 'telephone' && element.telephone\">\r\n            <a (click)=\"openWhatsApp($event, element.telephone)\" class=\"float-left icon-btn m-0\" [attr.data-test-id]=\"'linkPatientWhatsApp' + j\">\r\n              <img src=\"assets/svgs/whatsapp-green.svg\" alt=\"WhatsApp\" />\r\n            </a>\r\n          </ng-container>\r\n\r\n          <!-- Actions Column -->\r\n          <ng-container *ngIf=\"column.key === 'actions'\">\r\n            <div class=\"actions-btn-wrap d-flex align-items-center\">\r\n              <button\r\n                *ngFor=\"let action of column.actionButtons; let k = index\"\r\n                [ngStyle]=\"{\r\n                  color: action.style?.color,\r\n                  backgroundColor: action.style?.backgroundColor\r\n                }\"\r\n                class=\"action-btn mr-2\"\r\n                type=\"button\"\r\n                (click)=\"$event.stopPropagation(); handleAction(action, element)\"\r\n                  [attr.data-test-id]=\"'btn-action-' + action.label+'-'+ k\" >\r\n                {{ action.label | translate }}\r\n              </button>\r\n            </div>\r\n          </ng-container>\r\n        </td>\r\n      </ng-container>\r\n    \r\n\r\n      <!-- No Data Row -->\r\n      <tr class=\"mat-row\" *matNoDataRow>\r\n        <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumns.length\">\r\n          {{ pluginConfigObs.noRecordFound | translate }}\r\n        </td>\r\n      </tr>\r\n\r\n      <!-- Row Definitions -->\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; let x = index; columns: displayedColumns;\" [attr.data-test-id]=\"'tr' + x\" [routerLink]=\"['/dashboard/visit-summary', row.uuid]\"></tr>\r\n      \r\n    </table>\r\n    <mat-paginator #tempPaginator hidePageSize [pageSizeOptions]=\"pageSizeOptions\" aria-label=\"Select page of periodic elements\"></mat-paginator>\r\n  </div>\r\n</mat-expansion-panel>", styles: [".mat-elevation-z8{box-shadow:none;width:100%;overflow-x:auto}table{width:100%;font-family:DM Sans}th.mat-header-cell{border:none;font-size:14px!important;font-weight:700;color:var(--color-gray);height:21px}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{border:none;min-width:60px;white-space:nowrap;padding-right:24px}th.mat-header-cell span.alert-danger,td.mat-cell span.alert-danger,td.mat-footer-cell span.alert-danger{color:var(--color-red);font-weight:700;background:transparent;border:none}th.mat-header-cell span.alert-success,td.mat-cell span.alert-success,td.mat-footer-cell span.alert-success{color:var(--color-green);font-weight:700;background:transparent;border:none}td.mat-cell{font-size:16px}tr.mat-row,tr.mat-footer-row{height:88px;border-radius:8px;cursor:pointer}tr.mat-row.upcoming{background:#e6fff3!important}tr.mat-row:nth-child(odd){background:#f7f7fa}td:first-child,th:first-child{border-radius:8px 0 0 8px}td:last-child,th:last-child{border-radius:0 8px 8px 0}.actions-btn-wrap .action-btn{outline:none;border:none;height:36px;min-width:102px;padding:6px 8px;background:#fff;border-radius:4px;color:var(--color-black);font-family:DM Sans;font-size:16px}.actions-btn-wrap .blue-btn{background:var(--color-lightGray);color:var(--color-darkBlue)}.actions-btn-wrap .pink-btn{background:var(--color-lightPink);color:var(--color-red)}.mat-expansion-panel .mat-expansion-panel-header.mat-expanded .input-group{display:flex}.input-group{background:var(--color-white);border:1px solid rgba(127,123,146,.5);border-radius:6px;height:46px;align-items:center;max-width:60vw;width:300px;display:none}.input-group .input-group-text{background:none;border:none;cursor:default}.input-group .form-control{border:none;outline:none;background:transparent;font-size:16px;line-height:150%;padding-left:16px}.input-group .form-control:focus{box-shadow:none}.mat-expansion-panel{background:#fff;box-shadow:0 4px 24px #1f1c3a14;border-radius:20px!important;padding:24px;margin-bottom:24px}.mat-expansion-panel .mat-expansion-panel-header{padding:0}.mat-expansion-panel .mat-expansion-panel-header .mat-content{align-items:center}.mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:48px}.mat-expansion-panel .mat-expansion-panel-header:hover{background:transparent!important}.mat-expansion-panel .intel-accordion-title{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;flex-wrap:wrap;width:100%}.mat-expansion-panel .intel-accordion-title .mat-icon{height:20px;width:20px;font-size:20px;color:#461d90;margin-left:8px}.mat-expansion-panel .intel-accordion-title h6{font-size:18px;font-weight:700;color:#000}.mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body{padding:0;margin-top:24px;position:relative}.mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body:after{content:\"\";position:absolute;top:0;height:1px;left:0;right:0;background:#efe8ff}.anchor-con{position:absolute;top:-120px;left:0}.visit-completed-cell{color:green!important;background-color:#d4edda!important}@media (max-width: 768px){.input-group{width:100%;max-width:100%;margin:10px 0}.mat-expansion-panel .mat-expansion-panel-header,.mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:fit-content}.info-icon{display:none}.anchor-con{top:-100px}}.matIconButton{border:none;background:transparent}::ng-deep .custom-menu{background:var(--color-white);border-radius:8px!important;padding:16px;width:352px;box-shadow:0 4px 8px #7f7b9229}.mat-expansion-panel.mat-expanded .mat-expansion-panel-header .filter-btn{display:flex!important}.btnResetApSerach{display:none}.filter-btn{background:none;align-items:center;border:1px solid rgba(127,123,146,.5);border-radius:6px;color:#2e1e91;font-weight:500;padding:4px 12px;white-space:nowrap;height:46px;display:none;gap:4px}.toggle-buttons{display:flex;justify-content:space-between;margin-bottom:16px;gap:16px}button.mat-button,.action-buttons button.mat-button{flex:1;color:#2e1e91;background:#fff;border-radius:8px;font-family:DM Sans;font-size:14px;font-weight:500;border:1.33px solid #EFE8FF}.action-buttons button.mat-button.reset-btn{font-size:12px;font-weight:700;margin:0 0 0 20px;width:96px}.action-buttons button.mat-button.apply-btn{color:#fff;background:var(--color-darkBlue);font-size:12px;font-weight:700;width:96px}button.mat-button.active{background:#efe8ff;color:#2e1e91}button.mat-button .reset-btn{color:var(--color-darkBlue)}.action-buttons{display:flex;justify-content:space-between;gap:16px}.reset-btn{color:var(--color-darkBlue);background:#f5f5f5;border-radius:8px}.filter-search-container{display:flex;align-items:center;gap:1rem}.form-date{margin-bottom:16px}.input-wrapper{position:relative;display:flex;align-items:center}.input-wrapper .form-control{width:100%;padding-right:40px;border:1px solid rgba(178,175,190,.2);background:transparent;border-radius:8px;height:48px;font-size:16px;color:var(--color-darkestBlue)}.datepicker-icon{position:absolute;right:4px;top:50%;transform:translateY(-50%);cursor:pointer;background:transparent;border:none}.form-control:focus{box-shadow:none}.label-text{font-size:14px;margin-bottom:8px;color:#7f7b92}.userImage{width:32px;height:32px;border-radius:50%}.red-pill{display:flex;flex-direction:row;align-items:center;background:#ffe8e8;border-radius:4px;height:32px;color:#ea315b;padding:4px 6px;width:fit-content}.left{text-align:left}.chip{display:flex;flex-direction:row;align-items:center;border-radius:4px;height:32px;padding:4px 6px;width:fit-content}.chip.green{color:#0fd197}.chip.blue{color:#2e1e91}.chip-item-blue{background:var(--color-lightGray)}.chip-item-green{background:#e6fff3}\n"], dependencies: [{ kind: "directive", type: i11.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i12.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i12.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i12.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i12.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i13.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }, { kind: "directive", type: i14.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: i15.MatSuffix, selector: "[matSuffix]" }, { kind: "component", type: i16.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { kind: "component", type: i16.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }, { kind: "directive", type: i16.MatExpansionPanelTitle, selector: "mat-panel-title" }, { kind: "component", type: i17.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "directive", type: i17.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { kind: "component", type: i18.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i18.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i18.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i18.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i18.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i18.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i18.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i18.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i18.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i18.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "directive", type: i18.MatNoDataRow, selector: "ng-template[matNoDataRow]" }, { kind: "component", type: i19.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i20.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { kind: "directive", type: i20.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { kind: "component", type: i20.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["for", "tabIndex", "aria-label", "disabled", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { kind: "directive", type: i20.MatDatepickerToggleIcon, selector: "[matDatepickerToggleIcon]" }, { kind: "directive", type: i21.ÉµNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i21.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i21.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i21.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i21.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i21.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i22.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i22.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "mat-sort-header", "arrowPosition", "start", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { kind: "component", type: i10.NgxUiLoaderComponent, selector: "ngx-ui-loader", inputs: ["bgsColor", "bgsOpacity", "bgsPosition", "bgsSize", "bgsTemplate", "bgsType", "fgsColor", "fgsPosition", "fgsSize", "fgsTemplate", "fgsType", "gap", "loaderId", "logoPosition", "logoSize", "logoUrl", "overlayBorderRadius", "overlayColor", "pbColor", "pbDirection", "pbThickness", "hasProgressBar", "text", "textColor", "textPosition"] }, { kind: "directive", type: i23.DefaultImageDirective, selector: "img[src]", inputs: ["src"] }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: TableGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-table-grid', changeDetection: ChangeDetectionStrategy.OnPush, template: "<mat-expansion-panel [expanded]=\"true\" data-test-id=\"matExpAppointment\">\r\n  <mat-expansion-panel-header data-test-id=\"matExpHeaderAppointment\">\r\n    <mat-panel-title data-test-id=\"matPanelTitleAppointment\">\r\n      <div id=\"{{pluginConfigObs.anchorId}}\" class=\"anchor-con\" data-test-id=\"divAnchorAppointment\"></div>\r\n      <div class=\"intel-accordion-title\" data-test-id=\"divAccordionTitleAppointment\">\r\n        <img src=\"{{ pluginConfigObs.tableHeaderIcon }}\" alt=\"\" width=\"44px\" data-test-id=\"imgTableHeaderIconAppointment\">\r\n        <h6 class=\"mb-0 ml-2\" [attr.data-test-id]=\"pluginConfigObs.tableHeader\"> \r\n          {{ pluginConfigObs.tableHeader  | translate }} ({{ visitsLengthCount }})\r\n        </h6>\r\n        <mat-icon \r\n          aria-hidden=\"false\" \r\n          aria-label=\"help icon\" \r\n          matTooltip=\"{{ (pluginConfigObs.tooltipLabel | translate) }}\" \r\n          matTooltipPosition=\"right\" \r\n          data-test-id=\"icoHelpAppointment\">\r\n          help_outline\r\n        </mat-icon>\r\n\r\n        <!-- Filter button -->\r\n        <div class=\"ml-auto filter-search-container\" data-test-id=\"divFilterContainerAppointment\">\r\n          <button \r\n            *ngIf=\"pluginConfigObs.filterObs.filterFlag\" \r\n            class=\"mat-stroked-button filter-btn\" \r\n            [matMenuTriggerFor]=\"filterMenu1\" \r\n            (click)=\"$event.stopPropagation();\" \r\n            data-test-id=\"btnFilterAppointment\">\r\n            <img src=\"{{pluginConfigObs.filterObs.filterIcon}}\" alt=\"\" data-test-id=\"imgFilterIconAppointment\"> \r\n            {{( pluginConfigObs.filterObs.filterLabel| translate)}}\r\n          </button>\r\n\r\n          <!-- Filter Menu -->\r\n          <mat-menu #filterMenu1=\"matMenu\" class=\"custom-menu\" [hasBackdrop]=\"true\" xPosition=\"before\" data-test-id=\"menuFilterAppointment\">\r\n            <div class=\"toggle-buttons\" data-test-id=\"divToggleButtonsAppointment\">\r\n              <button \r\n                mat-button \r\n                [class.active]=\"mode === 'date'\" \r\n                (click)=\"setMode('date'); $event.stopPropagation(); resetDate(true)\" \r\n                data-test-id=\"btnDateModeAppointment\">\r\n                {{'Date' | translate}}\r\n              </button>\r\n              <button \r\n                mat-button \r\n                [class.active]=\"mode === 'range'\" \r\n                (click)=\"setMode('range'); $event.stopPropagation(); resetDate(true)\" \r\n                data-test-id=\"btnRangeModeAppointment\">\r\n                {{'Range' | translate}}\r\n              </button>\r\n            </div>\r\n\r\n            <!-- Date Mode -->\r\n            <div *ngIf=\"mode === 'date'\" class=\"date-view\" (click)=\"$event.stopPropagation()\" data-test-id=\"divDateModeAppointment\">\r\n              <form [formGroup]=\"filteredDateAndRangeForm\">\r\n                <div class=\"form-date\">\r\n                  <div class=\"input-date\">\r\n                    <label class=\"label-text\">{{ 'Select date' | translate}}</label>\r\n                    <div class=\"input-wrapper\">\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        [max]=\"maxDate\" \r\n                        formControlName=\"date\" \r\n                        [matDatepicker]=\"dobdp\" \r\n                        placeholder=\"{{'Select date' | translate}}\" \r\n                        aria-label=\"Date\" \r\n                        readonly \r\n                        data-test-id=\"etDate\"/>\r\n                      <mat-datepicker #dobdp></mat-datepicker>\r\n                      <mat-datepicker-toggle \r\n                        matSuffix \r\n                        [for]=\"dobdp\" \r\n                        data-test-id=\"dpDate\" \r\n                        class=\"datepicker-icon\">\r\n                        <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                      </mat-datepicker-toggle>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n\r\n            <!-- Range Mode -->\r\n            <div *ngIf=\"mode === 'range'\" class=\"range-view\" (click)=\" $event.stopPropagation()\" data-test-id=\"divRangeModeAppointment\">\r\n              <form [formGroup]=\"filteredDateAndRangeForm\">\r\n                <div class=\"form-date\">\r\n                  <div class=\"input-date\">\r\n                    <label class=\"label-text\">{{ 'Start date' | translate }}</label>\r\n                    <div class=\"input-wrapper\">\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        [max]=\"filteredDateAndRangeForm.value.endDate ? filteredDateAndRangeForm.value.endDate : maxDate\" \r\n                        formControlName=\"startDate\" \r\n                        [matDatepicker]=\"picker1\" \r\n                        placeholder=\"{{'Select start date'|translate}}\" \r\n                        readonly \r\n                        data-test-id=\"etSelStartDate\">\r\n                      <mat-datepicker #picker1></mat-datepicker>\r\n                      <mat-datepicker-toggle matSuffix [for]=\"picker1\" class=\"datepicker-icon\" data-test-id=\"dpStartDate\">\r\n                        <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                      </mat-datepicker-toggle>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-date\">\r\n                  <div class=\"input-date\">\r\n                    <label class=\"label-text\">{{ 'End date' | translate }}</label>\r\n                    <div class=\"input-wrapper\">\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        [min]=\"filteredDateAndRangeForm.value.startDate\" \r\n                        [max]=\"maxDate\" \r\n                        formControlName=\"endDate\" \r\n                        [matDatepicker]=\"picker2\" \r\n                        placeholder=\"{{'Select end date'|translate}}\" \r\n                        readonly \r\n                        data-test-id=\"etSelEndDate\">\r\n                      <mat-datepicker #picker2></mat-datepicker>\r\n                      <mat-datepicker-toggle matSuffix [for]=\"picker2\" class=\"datepicker-icon\" data-test-id=\"dpEndDate\">\r\n                        <img matDatepickerToggleIcon src=\"assets/svgs/calendar-date.svg\" alt=\"\">\r\n                      </mat-datepicker-toggle>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n\r\n            <div class=\"action-buttons\" data-test-id=\"divFilterActionBtnsAppointment\">\r\n              <button mat-button class=\"reset-btn\" (click)=\"resetDate();\" data-test-id=\"btnResetFilterAppointment\">{{ 'Reset'| translate }}</button>\r\n              <button mat-button class=\"apply-btn\" (click)=\"applyDateOrRangeFilter(pluginConfigObs.filterObs.filterDateField)\" data-test-id=\"btnApplyFilterAppointment\">{{ 'Apply'| translate }}</button>\r\n            </div>\r\n          </mat-menu>\r\n\r\n          <!-- Search -->\r\n          <div class=\"input-group search-bar ml-auto\" (click)=\"$event.stopPropagation();\" data-test-id=\"divSearchAppointment\">\r\n            <input \r\n              type=\"text\" \r\n              #searchInput \r\n              class=\"form-control\" \r\n              placeholder=\"{{ pluginConfigObs.searchPlaceHolder | translate }}\" \r\n              (keyup)=\"applyFilter($event)\" \r\n              (keydown.Space)=\"$event.stopPropagation()\" \r\n              (keydown.Enter)=\"$event.stopPropagation()\" \r\n              data-test-id=\"etSearchAppointmentDashboard\">\r\n            <div class=\"input-group-append\">\r\n              <span class=\"input-group-text\" *ngIf=\"!isFilterApplied\" data-test-id=\"icoSearchAppointment\">\r\n                <img src=\"assets/svgs/search-icon.svg\" alt=\"\" width=\"20px\" height=\"20px\">\r\n              </span>\r\n              <button \r\n                class=\"btnResetApSerach mat-icon-button\" \r\n                aria-label=\"Reset appointment search\"  \r\n                (click)=\"clearFilter()\"  \r\n                *ngIf=\"isFilterApplied\" \r\n                data-test-id=\"btnResetSearchAppointment\">\r\n                <mat-icon class=\"ml-0\">close</mat-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-panel-title>\r\n  </mat-expansion-panel-header>\r\n\r\n  <div class=\"mat-elevation-z8\" data-test-id=\"divTableWrapperAppointment\">\r\n    <span *ngIf=\"tableLoader\">\r\n      <ngx-ui-loader \r\n        [loaderId]=\"'table-loader-' + pluginConfigObs.pluginConfigObsFlag\" \r\n        [fgsType]=\"'ball-spin-clockwise'\" \r\n        [fgsColor]=\"'#aba4a4'\" \r\n        [fgsPosition]=\"'center-center'\" \r\n        [fgsSize]=\"50\" \r\n        [overlayColor]=\"'rgb(255, 255, 255)'\" \r\n        [hasProgressBar]=\"false\"\r\n        [text]=\"('Loading'|translate) + ' ' + (pluginConfigObs.pluginConfigObsFlag|translate) + ' ' + ('data'|translate) + '...'\"\r\n        [textColor]=\"'#333'\"\r\n        [textPosition]=\"'center-center'\"\r\n        data-test-id=\"loaderAppointment\"\r\n      ></ngx-ui-loader>\r\n    </span>\r\n    <table mat-table [dataSource]=\"dataSource\" #tableMatSort=\"matSort\" matSort>\r\n\r\n      <ng-container *ngFor=\"let column of displayedAppointmentColumns\" [matColumnDef]=\"column.key\">\r\n        <ng-container *ngIf=\"column.isSortable; else noSort\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header matSortDirection=\"asc\" [attr.data-test-id]=\"'th-' + column.key + '-' + pluginConfigObs.pluginConfigObsFlag\">\r\n            {{ column.label | translate }}\r\n          </th>\r\n        </ng-container>\r\n        <ng-template #noSort>\r\n          <th mat-header-cell *matHeaderCellDef  [attr.data-test-id]=\"'th-' + column.key+ '-' + pluginConfigObs.pluginConfigObsFlag\">\r\n            {{ column.label | translate }}\r\n          </th>\r\n        </ng-template>\r\n\r\n        <td mat-cell *matCellDef=\"let element; let j = index;\" [attr.data-test-id]=\"'td-' + column.key + '-' + j\">\r\n          <ng-container *ngIf=\"column.key !== 'patient_name' && column.key !== 'visit_completed'\">\r\n            <div class=\"float-left\" \r\n                [innerHTML]=\"renderHtmlContent(column, element)\" \r\n                [ngClass]=\"getClasses(column, element)\">\r\n            </div>\r\n          </ng-container>\r\n          \r\n          <!-- This is for visit_completed column -->\r\n          <ng-container *ngIf=\"column.key === 'visit_completed'\">\r\n            <div class=\"d-flex align-items-center visit-completed-cell\"  [attr.data-test-id]=\"'td-visit_completed-' + j\">\r\n              <img src=\"assets/svgs/green-pad.svg\" alt=\"Completed\" class=\"mr-2\" />\r\n              <span class=\"text-success\">\r\n                {{ element.completed }}\r\n              </span>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <!-- Patient Name Column -->\r\n          <ng-container *ngIf=\"column.key === 'patient_name'\">\r\n            <div class=\"d-flex align-items-center\"   [attr.data-test-id]=\"'td-patient_name-' + j\">\r\n              <img *ngIf=\"element.patientId\" src=\"{{ checkPatientRegField('Profile Photo') ? baseURL + '/personimage/' + element.patientId : '' }}\" alt=\"\" width=\"32px\" height=\"32px\" style=\"border-radius: 50%;\">\r\n              <img *ngIf=\"pluginConfigObs.pluginConfigObsFlag !== 'Appointment'\" src=\"{{ checkPatientRegField('Profile Photo') ? baseURL + '/personimage/' + element.person.uuid : '' }}\" alt=\"\" width=\"32px\" height=\"32px\" style=\"border-radius: 50%;\" [attr.data-test-id]=\"'td-patient_img-' + j\">\r\n              <div class=\"float-left\" \r\n                [innerHTML]=\"renderHtmlContent(column, element)\" \r\n                [ngClass]=\"getClasses(column, element)\">\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <!-- Telephone Column -->\r\n          <ng-container *ngIf=\"column.key === 'telephone' && element.telephone\">\r\n            <a (click)=\"openWhatsApp($event, element.telephone)\" class=\"float-left icon-btn m-0\" [attr.data-test-id]=\"'linkPatientWhatsApp' + j\">\r\n              <img src=\"assets/svgs/whatsapp-green.svg\" alt=\"WhatsApp\" />\r\n            </a>\r\n          </ng-container>\r\n\r\n          <!-- Actions Column -->\r\n          <ng-container *ngIf=\"column.key === 'actions'\">\r\n            <div class=\"actions-btn-wrap d-flex align-items-center\">\r\n              <button\r\n                *ngFor=\"let action of column.actionButtons; let k = index\"\r\n                [ngStyle]=\"{\r\n                  color: action.style?.color,\r\n                  backgroundColor: action.style?.backgroundColor\r\n                }\"\r\n                class=\"action-btn mr-2\"\r\n                type=\"button\"\r\n                (click)=\"$event.stopPropagation(); handleAction(action, element)\"\r\n                  [attr.data-test-id]=\"'btn-action-' + action.label+'-'+ k\" >\r\n                {{ action.label | translate }}\r\n              </button>\r\n            </div>\r\n          </ng-container>\r\n        </td>\r\n      </ng-container>\r\n    \r\n\r\n      <!-- No Data Row -->\r\n      <tr class=\"mat-row\" *matNoDataRow>\r\n        <td class=\"mat-cell text-center\" [attr.colspan]=\"displayedColumns.length\">\r\n          {{ pluginConfigObs.noRecordFound | translate }}\r\n        </td>\r\n      </tr>\r\n\r\n      <!-- Row Definitions -->\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; let x = index; columns: displayedColumns;\" [attr.data-test-id]=\"'tr' + x\" [routerLink]=\"['/dashboard/visit-summary', row.uuid]\"></tr>\r\n      \r\n    </table>\r\n    <mat-paginator #tempPaginator hidePageSize [pageSizeOptions]=\"pageSizeOptions\" aria-label=\"Select page of periodic elements\"></mat-paginator>\r\n  </div>\r\n</mat-expansion-panel>", styles: [".mat-elevation-z8{box-shadow:none;width:100%;overflow-x:auto}table{width:100%;font-family:DM Sans}th.mat-header-cell{border:none;font-size:14px!important;font-weight:700;color:var(--color-gray);height:21px}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{border:none;min-width:60px;white-space:nowrap;padding-right:24px}th.mat-header-cell span.alert-danger,td.mat-cell span.alert-danger,td.mat-footer-cell span.alert-danger{color:var(--color-red);font-weight:700;background:transparent;border:none}th.mat-header-cell span.alert-success,td.mat-cell span.alert-success,td.mat-footer-cell span.alert-success{color:var(--color-green);font-weight:700;background:transparent;border:none}td.mat-cell{font-size:16px}tr.mat-row,tr.mat-footer-row{height:88px;border-radius:8px;cursor:pointer}tr.mat-row.upcoming{background:#e6fff3!important}tr.mat-row:nth-child(odd){background:#f7f7fa}td:first-child,th:first-child{border-radius:8px 0 0 8px}td:last-child,th:last-child{border-radius:0 8px 8px 0}.actions-btn-wrap .action-btn{outline:none;border:none;height:36px;min-width:102px;padding:6px 8px;background:#fff;border-radius:4px;color:var(--color-black);font-family:DM Sans;font-size:16px}.actions-btn-wrap .blue-btn{background:var(--color-lightGray);color:var(--color-darkBlue)}.actions-btn-wrap .pink-btn{background:var(--color-lightPink);color:var(--color-red)}.mat-expansion-panel .mat-expansion-panel-header.mat-expanded .input-group{display:flex}.input-group{background:var(--color-white);border:1px solid rgba(127,123,146,.5);border-radius:6px;height:46px;align-items:center;max-width:60vw;width:300px;display:none}.input-group .input-group-text{background:none;border:none;cursor:default}.input-group .form-control{border:none;outline:none;background:transparent;font-size:16px;line-height:150%;padding-left:16px}.input-group .form-control:focus{box-shadow:none}.mat-expansion-panel{background:#fff;box-shadow:0 4px 24px #1f1c3a14;border-radius:20px!important;padding:24px;margin-bottom:24px}.mat-expansion-panel .mat-expansion-panel-header{padding:0}.mat-expansion-panel .mat-expansion-panel-header .mat-content{align-items:center}.mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:48px}.mat-expansion-panel .mat-expansion-panel-header:hover{background:transparent!important}.mat-expansion-panel .intel-accordion-title{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;flex-wrap:wrap;width:100%}.mat-expansion-panel .intel-accordion-title .mat-icon{height:20px;width:20px;font-size:20px;color:#461d90;margin-left:8px}.mat-expansion-panel .intel-accordion-title h6{font-size:18px;font-weight:700;color:#000}.mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body{padding:0;margin-top:24px;position:relative}.mat-expansion-panel .mat-expansion-panel-content .mat-expansion-panel-body:after{content:\"\";position:absolute;top:0;height:1px;left:0;right:0;background:#efe8ff}.anchor-con{position:absolute;top:-120px;left:0}.visit-completed-cell{color:green!important;background-color:#d4edda!important}@media (max-width: 768px){.input-group{width:100%;max-width:100%;margin:10px 0}.mat-expansion-panel .mat-expansion-panel-header,.mat-expansion-panel .mat-expansion-panel-header.mat-expanded{height:fit-content}.info-icon{display:none}.anchor-con{top:-100px}}.matIconButton{border:none;background:transparent}::ng-deep .custom-menu{background:var(--color-white);border-radius:8px!important;padding:16px;width:352px;box-shadow:0 4px 8px #7f7b9229}.mat-expansion-panel.mat-expanded .mat-expansion-panel-header .filter-btn{display:flex!important}.btnResetApSerach{display:none}.filter-btn{background:none;align-items:center;border:1px solid rgba(127,123,146,.5);border-radius:6px;color:#2e1e91;font-weight:500;padding:4px 12px;white-space:nowrap;height:46px;display:none;gap:4px}.toggle-buttons{display:flex;justify-content:space-between;margin-bottom:16px;gap:16px}button.mat-button,.action-buttons button.mat-button{flex:1;color:#2e1e91;background:#fff;border-radius:8px;font-family:DM Sans;font-size:14px;font-weight:500;border:1.33px solid #EFE8FF}.action-buttons button.mat-button.reset-btn{font-size:12px;font-weight:700;margin:0 0 0 20px;width:96px}.action-buttons button.mat-button.apply-btn{color:#fff;background:var(--color-darkBlue);font-size:12px;font-weight:700;width:96px}button.mat-button.active{background:#efe8ff;color:#2e1e91}button.mat-button .reset-btn{color:var(--color-darkBlue)}.action-buttons{display:flex;justify-content:space-between;gap:16px}.reset-btn{color:var(--color-darkBlue);background:#f5f5f5;border-radius:8px}.filter-search-container{display:flex;align-items:center;gap:1rem}.form-date{margin-bottom:16px}.input-wrapper{position:relative;display:flex;align-items:center}.input-wrapper .form-control{width:100%;padding-right:40px;border:1px solid rgba(178,175,190,.2);background:transparent;border-radius:8px;height:48px;font-size:16px;color:var(--color-darkestBlue)}.datepicker-icon{position:absolute;right:4px;top:50%;transform:translateY(-50%);cursor:pointer;background:transparent;border:none}.form-control:focus{box-shadow:none}.label-text{font-size:14px;margin-bottom:8px;color:#7f7b92}.userImage{width:32px;height:32px;border-radius:50%}.red-pill{display:flex;flex-direction:row;align-items:center;background:#ffe8e8;border-radius:4px;height:32px;color:#ea315b;padding:4px 6px;width:fit-content}.left{text-align:left}.chip{display:flex;flex-direction:row;align-items:center;border-radius:4px;height:32px;padding:4px 6px;width:fit-content}.chip.green{color:#0fd197}.chip.blue{color:#2e1e91}.chip-item-blue{background:var(--color-lightGray)}.chip-item-green{background:#e6fff3}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.AppointmentService }, { type: i2.VisitService }, { type: i3.CoreService }, { type: i4.ToastrService }, { type: i5.TranslateService }, { type: i6.MindmapService }, { type: i7.DomSanitizer }, { type: i8.AppConfigService }, { type: i9.NgxRolesService }, { type: i10.NgxUiLoaderService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['environment']
                }] }]; }, propDecorators: { pluginConfigObs: [{
                type: Input
            }], paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }], searchElement: [{
                type: ViewChild,
                args: ['searchInput', { static: true }]
            }], tempPaginator: [{
                type: ViewChild,
                args: ['tempPaginator']
            }], menuTrigger: [{
                type: ViewChild,
                args: [MatMenuTrigger]
            }], tableMatSort: [{
                type: ViewChild,
                args: ['tableMatSort', { static: true }]
            }], visitsCountDate: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtZ3JpZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9paC1saWJyYXJ5L3NyYy9saWIvY29tcG9uZW50cy90YWJsZS1ncmlkL3RhYmxlLWdyaWQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWgtbGlicmFyeS9zcmMvbGliL2NvbXBvbmVudHMvdGFibGUtZ3JpZC90YWJsZS1ncmlkLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFVLFNBQVMsRUFBRSxLQUFLLEVBQWlCLHVCQUF1QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUNwSyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzVELE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLHdCQUF3QixFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekcsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdD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dmNBeVFzQjs7MkZEN09ULGtCQUFrQjtrQkFOOUIsU0FBUzsrQkFDRSxnQkFBZ0IsbUJBR1QsdUJBQXVCLENBQUMsTUFBTTs7MEJBOEQ1QyxNQUFNOzJCQUFDLGFBQWE7NENBMURkLGVBQWU7c0JBQXZCLEtBQUs7Z0JBUW1CLFNBQVM7c0JBQWpDLFNBQVM7dUJBQUMsWUFBWTtnQkFDcUIsYUFBYTtzQkFBeEQsU0FBUzt1QkFBQyxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQUVkLGFBQWE7c0JBQXhDLFNBQVM7dUJBQUMsZUFBZTtnQkFDQyxXQUFXO3NCQUFyQyxTQUFTO3VCQUFDLGNBQWM7Z0JBQ21CLFlBQVk7c0JBQXZELFNBQVM7dUJBQUMsY0FBYyxFQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFlaEMsZUFBZTtzQkFBeEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgT25Jbml0LCBWaWV3Q2hpbGQsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSW5qZWN0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgQWZ0ZXJWaWV3SW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE1hdFBhZ2luYXRvciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3BhZ2luYXRvcic7XHJcbmltcG9ydCB7IE1hdFRhYmxlRGF0YVNvdXJjZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3RhYmxlJztcclxuaW1wb3J0IHsgQXBpUmVzcG9uc2VNb2RlbCwgQXBwb2ludG1lbnRNb2RlbCwgQ3VzdG9tRW5jb3VudGVyTW9kZWwsIEN1c3RvbU9ic01vZGVsLCBDdXN0b21WaXNpdE1vZGVsLCBQcm92aWRlckF0dHJpYnV0ZU1vZGVsLCBSZXNjaGVkdWxlQXBwb2ludG1lbnRNb2RhbFJlc3BvbnNlTW9kZWwsIFBhdGllbnRWaXNpdFN1bW1hcnlDb25maWdNb2RlbCB9IGZyb20gJy4uLy4uL21vZGVsL21vZGVsJztcclxuaW1wb3J0IHsgQXBwb2ludG1lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXBwb2ludG1lbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IFZpc2l0U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3Zpc2l0LnNlcnZpY2UnO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IENvcmVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY29yZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVG9hc3RyU2VydmljZSB9IGZyb20gJ25neC10b2FzdHInO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcbmltcG9ydCB7IGdldENhY2hlRGF0YSwgY2hlY2tJZkRhdGVPbGRUaGFuT25lRGF5LCBpc0ZlYXR1cmVQcmVzZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbGl0eS1mdW5jdGlvbnMnO1xyXG5pbXBvcnQgeyBkb2N0b3JEZXRhaWxzLCBsYW5ndWFnZXMsIHZpc2l0VHlwZXMgfSBmcm9tICcuLi8uLi9jb25maWcvY29uc3RhbnQnO1xyXG5pbXBvcnQgeyBNaW5kbWFwU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL21pbmRtYXAuc2VydmljZSc7XHJcbmltcG9ydCB7IEFwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hcHAtY29uZmlnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBNYXRNZW51VHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL21lbnUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE5neFJvbGVzU2VydmljZSB9IGZyb20gJ25neC1wZXJtaXNzaW9ucyc7XHJcbmltcG9ydCB7IE1hdFNvcnQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zb3J0JztcclxuaW1wb3J0IHsgTmd4VWlMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnbmd4LXVpLWxvYWRlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xpYi10YWJsZS1ncmlkJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdGFibGUtZ3JpZC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vdGFibGUtZ3JpZC5jb21wb25lbnQuc2NzcyddLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYWJsZUdyaWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gIFxyXG4gIEBJbnB1dCgpIHBsdWdpbkNvbmZpZ09iczogYW55O1xyXG4gIGRpc3BsYXllZEFwcG9pbnRtZW50Q29sdW1uczogYW55ID0gW107XHJcbiAgZGlzcGxheWVkQ29sdW1uczogc3RyaW5nW10gPSBbXTtcclxuICBkYXRhU291cmNlID0gbmV3IE1hdFRhYmxlRGF0YVNvdXJjZTxhbnk+KCk7XHJcbiAgcGF0aWVudFJlZ0ZpZWxkczogc3RyaW5nW10gPSBbXTtcclxuICBpc01DQ1VzZXIgPSBmYWxzZTtcclxuICBwYWdlU2l6ZU9wdGlvbnMgPSBbNSwgMTAsIDIwXTtcclxuICBcclxuICBAVmlld0NoaWxkKE1hdFBhZ2luYXRvcikgcGFnaW5hdG9yOiBNYXRQYWdpbmF0b3I7XHJcbiAgQFZpZXdDaGlsZCgnc2VhcmNoSW5wdXQnLCB7IHN0YXRpYzogdHJ1ZSB9KSBzZWFyY2hFbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gIGZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybTogRm9ybUdyb3VwO1xyXG4gIEBWaWV3Q2hpbGQoJ3RlbXBQYWdpbmF0b3InKSB0ZW1wUGFnaW5hdG9yOiBNYXRQYWdpbmF0b3I7XHJcbiAgQFZpZXdDaGlsZChNYXRNZW51VHJpZ2dlcikgbWVudVRyaWdnZXI6IE1hdE1lbnVUcmlnZ2VyO1xyXG4gIEBWaWV3Q2hpbGQoJ3RhYmxlTWF0U29ydCcseyBzdGF0aWM6IHRydWUgfSkgdGFibGVNYXRTb3J0OiBNYXRTb3J0O1xyXG5cclxuXHJcbiAgcGFuZWxFeHBhbmRlZDogYm9vbGVhbiA9IHRydWU7XHJcbiAgbW9kZTogJ2RhdGUnIHwgJ3JhbmdlJyA9ICdkYXRlJztcclxuICBtYXhEYXRlOiBEYXRlO1xyXG5cclxuICBhcHBvaW50bWVudHM6IEFwcG9pbnRtZW50TW9kZWxbXSA9IFtdO1xyXG4gIHByaW9yaXR5VmlzaXRzOiBDdXN0b21WaXNpdE1vZGVsW10gPSBbXTtcclxuICBhd2FpdGluZ1Zpc2l0czogQ3VzdG9tVmlzaXRNb2RlbFtdID0gW107XHJcbiAgaW5Qcm9ncmVzc1Zpc2l0czogQ3VzdG9tVmlzaXRNb2RlbFtdID0gW107XHJcbiAgY29tcGxldGVkVmlzaXRzOiBDdXN0b21WaXNpdE1vZGVsW10gPSBbXTtcclxuICBmb2xsb3dVcFZpc2l0czogQ3VzdG9tVmlzaXRNb2RlbFtdID0gW107XHJcblxyXG4gIHNwZWNpYWxpemF0aW9uOiBzdHJpbmcgPSAnJztcclxuICBAT3V0cHV0KCkgdmlzaXRzQ291bnREYXRlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgdmlzaXRzTGVuZ3RoQ291bnQ6IG51bWJlciA9IDA7XHJcbiAgaXNGaWx0ZXJBcHBsaWVkID0gZmFsc2U7XHJcbiAgcHZzOiBQYXRpZW50VmlzaXRTdW1tYXJ5Q29uZmlnTW9kZWw7XHJcbiAgYmFzZVVSTDogYW55O1xyXG4gIGlzQnJhbmROYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8vIHRvIGFwcGx5IGZpbHRlciB3aXRoIGRhdGUgYW5kIHRleHQgc2VhcmNoXHJcbiAgZGF0ZUZpZWxkOiBzdHJpbmc7XHJcbiAgZGF0ZUZpbHRlcjogc3RyaW5nO1xyXG4gIG9yaWdpbmFsRGF0YTogYW55W107XHJcbiAgZmlsdGVyZWREYXRhQWZ0ZXJEYXRlOiBhbnlbXTtcclxuICB0YWJsZUxvYWRlcjogYm9vbGVhbjtcclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5kYXRhU291cmNlLnBhZ2luYXRvciA9IHRoaXMucGFnaW5hdG9yO1xyXG4gICAgLy8gdGhpcy5kYXRhU291cmNlLnNvcnQgPSB0aGlzLnRhYmxlTWF0U29ydDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBhcHBvaW50bWVudFNlcnZpY2U6IEFwcG9pbnRtZW50U2VydmljZSxcclxuICAgIHByaXZhdGUgdmlzaXRTZXJ2aWNlOiBWaXNpdFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGNvcmVTZXJ2aWNlOiBDb3JlU2VydmljZSxcclxuICAgIHByaXZhdGUgdG9hc3RyOiBUb2FzdHJTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBtaW5kbWFwU2VydmljZTogTWluZG1hcFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyLFxyXG4gICAgcHJpdmF0ZSBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByb2xlc1NlcnZpY2U6IE5neFJvbGVzU2VydmljZSxcclxuICAgIHByaXZhdGUgbmd4TG9hZGVyOiBOZ3hVaUxvYWRlclNlcnZpY2UsXHJcbiAgICBASW5qZWN0KCdlbnZpcm9ubWVudCcpIGVudmlyb25tZW50XHJcbiAgKSB7IFxyXG4gICAgdGhpcy50YWJsZUxvYWRlciA9IGlzRmVhdHVyZVByZXNlbnQoZW52aXJvbm1lbnQuZmVhdHVyZUxpc3QsICd0YWJsZUxvYWRlcicpO1xyXG4gICAgdGhpcy5iYXNlVVJMID0gZW52aXJvbm1lbnQuYmFzZVVSTDtcclxuICAgIHRoaXMuZmlsdGVyZWREYXRlQW5kUmFuZ2VGb3JtID0gdGhpcy5jcmVhdGVGaWx0ZXJlZERhdGVSYW5nZUZvcm0oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBmaWx0ZXJlZCBkYXRlIHJhbmdlIGZvcm0gd2l0aCByZXF1aXJlZCBkYXRlIGZpZWxkc1xyXG4gICAqIEByZXR1cm4ge0Zvcm1Hcm91cH0gLSBUaGUgY3JlYXRlZCBmb3JtIGdyb3VwXHJcbiAgICovXHJcbiAgY3JlYXRlRmlsdGVyZWREYXRlUmFuZ2VGb3JtKCk6IEZvcm1Hcm91cCB7XHJcbiAgICByZXR1cm4gbmV3IEZvcm1Hcm91cCh7XHJcbiAgICAgIGRhdGU6IG5ldyBGb3JtQ29udHJvbCgnJywgW1ZhbGlkYXRvcnMucmVxdWlyZWRdKSxcclxuICAgICAgc3RhcnREYXRlOiBuZXcgRm9ybUNvbnRyb2wobnVsbCwgVmFsaWRhdG9ycy5yZXF1aXJlZCksXHJcbiAgICAgIGVuZERhdGU6IG5ldyBGb3JtQ29udHJvbChudWxsLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzTUNDVXNlciA9ICEhdGhpcy5yb2xlc1NlcnZpY2UuZ2V0Um9sZSgnT1JHQU5JWkFUSU9OQUw6TUNDJyk7XHJcblxyXG4gICAgdGhpcy5hcHBDb25maWdTZXJ2aWNlLmxvYWQoKS50aGVuKCgpID0+IHtcclxuICAgIHRoaXMuZGlzcGxheWVkQ29sdW1ucyA9IHRoaXMuZGlzcGxheWVkQ29sdW1ucy5maWx0ZXIoY29sPT4oY29sIT09J2FnZScgfHwgdGhpcy5jaGVja1BhdGllbnRSZWdGaWVsZCgnQWdlJykpKTtcclxuICAgICAgT2JqZWN0LmtleXModGhpcy5hcHBDb25maWdTZXJ2aWNlLnBhdGllbnRfcmVnaXN0cmF0aW9uKS5mb3JFYWNoKG9iaj0+e1xyXG4gICAgICAgIHRoaXMucGF0aWVudFJlZ0ZpZWxkcy5wdXNoKC4uLnRoaXMuYXBwQ29uZmlnU2VydmljZS5wYXRpZW50X3JlZ2lzdHJhdGlvbltvYmpdLmZpbHRlcigoZTogeyBpc19lbmFibGVkOiBhbnk7IH0pPT5lLmlzX2VuYWJsZWQpLm1hcCgoZTogeyBuYW1lOiBhbnk7IH0pPT5lLm5hbWUpKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucHZzID0geyAuLi50aGlzLmFwcENvbmZpZ1NlcnZpY2UucGF0aWVudF92aXNpdF9zdW1tYXJ5IH07IFxyXG4gICAgICB0aGlzLnB2cy5hcHBvaW50bWVudF9idXR0b24gPSB0aGlzLnB2cy5hcHBvaW50bWVudF9idXR0b247XHJcbiAgICAgIHRoaXMuZGlzcGxheWVkQ29sdW1ucyA9IHRoaXMuZGlzcGxheWVkQ29sdW1ucy5maWx0ZXIoY29sPT4ge1xyXG4gICAgICAgIGlmKGNvbCA9PT0gJ2RyTmFtZScgJiYgIXRoaXMuaXNNQ0NVc2VyKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYoY29sID09PSAnYWdlJykgcmV0dXJuIHRoaXMuY2hlY2tQYXRpZW50UmVnRmllbGQoJ0FnZScpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmKCF0aGlzLnB2cy5hd2FpdGluZ192aXNpdHNfcGF0aWVudF90eXBlX2RlbWFyY2F0aW9uKXtcclxuICAgICAgICB0aGlzLmRpc3BsYXllZENvbHVtbnMgPSB0aGlzLmRpc3BsYXllZENvbHVtbnMuZmlsdGVyKGNvbD0+KGNvbCE9PSdwYXRpZW50X3R5cGUnKSk7XHJcbiAgICAgIH1cclxuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIGFwcCBjb25maWcnLCBlcnJvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UudXNlKGdldENhY2hlRGF0YShmYWxzZSwgbGFuZ3VhZ2VzLlNFTEVDVEVEX0xBTkdVQUdFKSk7XHJcbiAgICBsZXQgcHJvdmlkZXIgPSBnZXRDYWNoZURhdGEodHJ1ZSwgZG9jdG9yRGV0YWlscy5QUk9WSURFUik7XHJcbiAgICBpZiAocHJvdmlkZXIpIHtcclxuICAgICAgaWYgKHByb3ZpZGVyLmF0dHJpYnV0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5zcGVjaWFsaXphdGlvbiA9IHRoaXMuZ2V0U3BlY2lhbGl6YXRpb24ocHJvdmlkZXIuYXR0cmlidXRlcyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYodGhpcy5wbHVnaW5Db25maWdPYnM/LnBsdWdpbkNvbmZpZ09ic0ZsYWcgPT09IFwiQXBwb2ludG1lbnRcIil7XHJcbiAgICAgICAgdGhpcy5nZXRBcHBvaW50bWVudHMoKTtcclxuICAgICAgfVxyXG4gICAgICBpZih0aGlzLnBsdWdpbkNvbmZpZ09icz8ucGx1Z2luQ29uZmlnT2JzRmxhZyA9PT0gXCJBd2FpdGluZ1wiKXtcclxuICAgICAgICB0aGlzLmdldEF3YWl0aW5nVmlzaXRzKDEpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHRoaXMucGx1Z2luQ29uZmlnT2JzPy5wbHVnaW5Db25maWdPYnNGbGFnID09PSBcIlByaW9yaXR5XCIpe1xyXG4gICAgICAgIHRoaXMuZ2V0UHJpb3JpdHlWaXNpdHMoMSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYodGhpcy5wbHVnaW5Db25maWdPYnM/LnBsdWdpbkNvbmZpZ09ic0ZsYWcgPT09IFwiSW5Qcm9ncmVzc1wiKXtcclxuICAgICAgICB0aGlzLmdldEluUHJvZ3Jlc3NWaXNpdHMoMSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYodGhpcy5wbHVnaW5Db25maWdPYnM/LnBsdWdpbkNvbmZpZ09ic0ZsYWcgPT09IFwiQ29tcGxldGVkXCIpe1xyXG4gICAgICAgIHRoaXMuZ2V0Q29tcGxldGVkVmlzaXRzKCk7XHJcbiAgICAgIH1pZih0aGlzLnBsdWdpbkNvbmZpZ09icz8ucGx1Z2luQ29uZmlnT2JzRmxhZyA9PT0gXCJGb2xsb3dVcFwiKXtcclxuICAgICAgICB0aGlzLmdldEZvbGxvd1VwVmlzaXQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5tYXhEYXRlID0gdGhpcy5wbHVnaW5Db25maWdPYnMuZmlsdGVyT2JzLmZpbHRlckRhdGVNYXg7XHJcbiAgICBpZih0aGlzLnBsdWdpbkNvbmZpZ09icy5oYXNPd25Qcm9wZXJ0eShcInBhZ2VTaXplT3B0aW9uc1wiKSl7XHJcbiAgICAgIHRoaXMucGFnZVNpemVPcHRpb25zID0gdGhpcy5wbHVnaW5Db25maWdPYnMucGFnZVNpemVPcHRpb25zXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEeW5tYWljIGxhYmVsIERpc3BsYXlcclxuICAgKiBAcGFyYW0gY2hhbmdlcyBwbHVnaW5Db25maWdPYnMgXHJcbiAgICovXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKGNoYW5nZXNbXCJwbHVnaW5Db25maWdPYnNcIl0gJiYgY2hhbmdlc1tcInBsdWdpbkNvbmZpZ09ic1wiXS5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgdGhpcy5kaXNwbGF5ZWRBcHBvaW50bWVudENvbHVtbnMgPSBbLi4uY2hhbmdlc1tcInBsdWdpbkNvbmZpZ09ic1wiXS5jdXJyZW50VmFsdWU/LnRhYmxlQ29sdW1uc11cclxuICAgICAgdGhpcy5kaXNwbGF5ZWRDb2x1bW5zID0gdGhpcy5kaXNwbGF5ZWRBcHBvaW50bWVudENvbHVtbnMubWFwKGNvbHVtbiA9PiBjb2x1bW4ua2V5KTtcclxuICAgIH1cclxuICAgIGlmKCAoIWNoYW5nZXNbJ3BsdWdpbkNvbmZpZ09icyddLmZpcnN0Q2hhbmdlKSAmJiB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnID09IFwiQXBwb2ludG1lbnRcIiAmJiBjaGFuZ2VzW1wicGx1Z2luQ29uZmlnT2JzXCJdLmN1cnJlbnRWYWx1ZT8udGFibGVIZWFkZXIgIT09IGNoYW5nZXNbXCJwbHVnaW5Db25maWdPYnNcIl0ucHJldmlvdXNWYWx1ZT8udGFibGVIZWFkZXIpe1xyXG4gICAgICB0aGlzLmdldEFwcG9pbnRtZW50cygpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJldiA9IGNoYW5nZXNbJ3BsdWdpbkNvbmZpZ09icyddLnByZXZpb3VzVmFsdWU7XHJcbiAgICBjb25zdCBjdXJyID0gY2hhbmdlc1sncGx1Z2luQ29uZmlnT2JzJ10uY3VycmVudFZhbHVlO1xyXG4gICAgY29uc3QgcHJldlR5cGUgPSBwcmV2Py5maWx0ZXI/LmZpbHRlclR5cGU7XHJcbiAgICBjb25zdCBjdXJyVHlwZSA9IGN1cnI/LmZpbHRlcj8uZmlsdGVyVHlwZTtcclxuICAgIGlmICggcHJldlR5cGUgIT09IGN1cnJUeXBlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwidGFiIGNoYW5nZWRcIik7XHJcbiAgICAgIHRoaXMucmVzZXREYXRlRm9ybSgpOyAvLyBSZXNldCBvbmx5IHdoZW4gdHlwZSBoYXMgY2hhbmdlZFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBSZXNldCB0aGUgZGF0ZSBmb3IgYXBwb2ludG1lbnRzKFRvZGF5J3MsdXBjb21pbmcscGVuZGluZyBhcHBvaW5tZW50cykgIGdcclxuICAqL1xyXG4gIHJlc2V0RGF0ZUZvcm0oKSB7XHJcbiAgICBpZiAodGhpcy5maWx0ZXJlZERhdGVBbmRSYW5nZUZvcm0pIHtcclxuICAgICAgdGhpcy5maWx0ZXJlZERhdGVBbmRSYW5nZUZvcm0ucmVzZXQoe1xyXG4gICAgICAgIGRhdGU6IG51bGwsXHJcbiAgICAgICAgc3RhcnREYXRlOiBudWxsLFxyXG4gICAgICAgIGVuZERhdGU6IG51bGxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLm1vZGUgPSAnZGF0ZSc7IFxyXG4gICAgdGhpcy5zZWFyY2hFbGVtZW50Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgdGhpcy5pc0ZpbHRlckFwcGxpZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXIgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBSZXRyZWl2ZSB0aGUgY2hpZWYgY29tcGxhaW50cyBmb3IgdGhlIHZpc2l0XHJcbiAgKiBAcGFyYW0ge0N1c3RvbVZpc2l0TW9kZWx9IHZpc2l0IC0gVmlzaXRcclxuICAqIEByZXR1cm4ge3N0cmluZ1tdfSAtIENoaWVmIGNvbXBsYWludHMgYXJyYXlcclxuICAqL1xyXG4gIGdldENoZWlmQ29tcGxhaW50KHZpc2l0OiBDdXN0b21WaXNpdE1vZGVsKTogc3RyaW5nW10ge1xyXG4gICAgbGV0IHJlY2VudDogc3RyaW5nW10gPSBbXTtcclxuICAgIGNvbnN0IGVuY291bnRlcnMgPSB2aXNpdC5lbmNvdW50ZXJzO1xyXG4gICAgZW5jb3VudGVycy5mb3JFYWNoKChlbmNvdW50ZXI6IEN1c3RvbUVuY291bnRlck1vZGVsKSA9PiB7XHJcbiAgICAgIGNvbnN0IGRpc3BsYXkgPSBlbmNvdW50ZXIudHlwZT8ubmFtZTtcclxuICAgICAgaWYgKGRpc3BsYXkubWF0Y2godmlzaXRUeXBlcy5BRFVMVElOSVRJQUwpICE9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3Qgb2JzID0gZW5jb3VudGVyLm9icztcclxuICAgICAgICBvYnMuZm9yRWFjaCgoY3VycmVudE9iczogQ3VzdG9tT2JzTW9kZWwpID0+IHtcclxuICAgICAgICAgIGlmIChjdXJyZW50T2JzLmNvbmNlcHRfaWQgPT0gMTYzMjEyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb21wbGFpbnQgPSB0aGlzLnZpc2l0U2VydmljZS5nZXREYXRhMihjdXJyZW50T2JzKT8udmFsdWVfdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAoJ+KWuicsICdnJyksICcnKS5zcGxpdCgnPGI+Jyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY3VycmVudENvbXBsYWludC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IG9iczEgPSBjdXJyZW50Q29tcGxhaW50W2ldLnNwbGl0KCc8Jyk7XHJcbiAgICAgICAgICAgICAgaWYgKCFvYnMxWzBdLm1hdGNoKHZpc2l0VHlwZXMuQVNTT0NJQVRFRF9TWU1QVE9NUykpIHtcclxuICAgICAgICAgICAgICAgIHJlY2VudC5wdXNoKG9iczFbMF0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZWNlbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIENoZWNrIGhvdyBvbGQgdGhlIGRhdGUgaXMgZnJvbSBub3dcclxuICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIC0gRGF0ZSBpbiBzdHJpbmcgZm9ybWF0XHJcbiAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gUmV0dXJucyBob3cgb2xkIHRoZSBkYXRlIGlzIGZyb20gbm93XHJcbiAgKi9cclxuICBjaGVja0lmRGF0ZU9sZFRoYW5PbmVEYXkoZGF0YTogc3RyaW5nKSB7XHJcbiAgICBsZXQgaG91cnMgPSBtb21lbnQoZGF0YSkuZGlmZihtb21lbnQoKSwgJ2hvdXJzJyk7XHJcbiAgICBsZXQgbWludXRlcyA9IG1vbWVudChkYXRhKS5kaWZmKG1vbWVudCgpLCAnbWludXRlcycpO1xyXG4gICAgaWYoaG91cnMgPiAyNCkge1xyXG4gICAgICByZXR1cm4gbW9tZW50KGRhdGEpLmZvcm1hdCgnREQgTU1NLCBZWVlZIGhoOm1tIEEnKTtcclxuICAgIH07XHJcbiAgICBpZiAoaG91cnMgPCAxKSB7XHJcbiAgICAgIGlmKG1pbnV0ZXMgPCAwKSByZXR1cm4gYER1ZSA6ICR7bW9tZW50KGRhdGEpLmZvcm1hdCgnREQgTU1NLCBZWVlZIGhoOm1tIEEnKX1gO1xyXG4gICAgICByZXR1cm4gYCR7bWludXRlc30gbWludXRlc2A7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7aG91cnN9IGhyc2A7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFJlc2NoZWR1bGUgYXBwb2ludG1lbnRcclxuICAqIEBwYXJhbSB7QXBwb2ludG1lbnRNb2RlbH0gYXBwb2ludG1lbnQgLSBBcHBvaW50bWVudCB0byBiZSByZXNjaGVkdWxlZFxyXG4gICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkYXRpb25SZXF1aXJlZCAtIElmIHRydWUsIHZhbGlkYXRpb24gaXMgcmVxdWlyZWRcclxuICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgKi9cclxuICByZXNjaGVkdWxlKGFwcG9pbnRtZW50OiBBcHBvaW50bWVudE1vZGVsLCBpc1ZhbGlkYXRpb25SZXF1aXJlZDogYm9vbGVhbikge1xyXG4gICAgY29uc3QgbGVuID0gYXBwb2ludG1lbnQudmlzaXQuZW5jb3VudGVycy5maWx0ZXIoKGU6IEN1c3RvbUVuY291bnRlck1vZGVsKSA9PiB7XHJcbiAgICAgIHJldHVybiAoZS50eXBlLm5hbWUgPT0gdmlzaXRUeXBlcy5QQVRJRU5UX0VYSVRfU1VSVkVZIHx8IGUudHlwZS5uYW1lID09IHZpc2l0VHlwZXMuVklTSVRfQ09NUExFVEUpO1xyXG4gICAgfSkubGVuZ3RoO1xyXG4gICAgY29uc3QgaXNDb21wbGV0ZWQgPSBCb29sZWFuKGxlbik7XHJcbiAgICBpZiAoaXNDb21wbGV0ZWQpIHtcclxuICAgICAgdGhpcy50b2FzdHIuZXJyb3IodGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXCJWaXNpdCBpcyBhbHJlYWR5IGNvbXBsZXRlZCwgaXQgY2FuJ3QgYmUgcmVzY2hlZHVsZWQuXCIpLCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCgnUmVzY2hlZHVsaW5nIGZhaWxlZCEnKSk7XHJcbiAgICB9IGVsc2UgaWYoYXBwb2ludG1lbnQudmlzaXRTdGF0dXMgPT0gJ1Zpc2l0IEluIFByb2dyZXNzJyAmJiBpc1ZhbGlkYXRpb25SZXF1aXJlZCkge1xyXG4gICAgICB0aGlzLnRvYXN0ci5lcnJvcih0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChcIlZpc2l0IGlzIGluIHByb2dyZXNzLCBpdCBjYW4ndCBiZSByZXNjaGVkdWxlZC5cIiksIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdSZXNjaGVkdWxpbmcgZmFpbGVkIScpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY29yZVNlcnZpY2Uub3BlblJlc2NoZWR1bGVBcHBvaW50bWVudE1vZGFsKGFwcG9pbnRtZW50KS5zdWJzY3JpYmUoKHJlczogUmVzY2hlZHVsZUFwcG9pbnRtZW50TW9kYWxSZXNwb25zZU1vZGVsKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgICAgbGV0IG5ld1Nsb3QgPSByZXM7XHJcbiAgICAgICAgICB0aGlzLmNvcmVTZXJ2aWNlLm9wZW5SZXNjaGVkdWxlQXBwb2ludG1lbnRDb25maXJtTW9kYWwoeyBhcHBvaW50bWVudCwgbmV3U2xvdCB9KS5zdWJzY3JpYmUoKHJlc3VsdDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgYXBwb2ludG1lbnQuYXBwb2ludG1lbnRJZCA9IGFwcG9pbnRtZW50LmlkO1xyXG4gICAgICAgICAgICAgIGFwcG9pbnRtZW50LnNsb3REYXRlID0gbW9tZW50KG5ld1Nsb3QuZGF0ZSwgXCJZWVlZLU1NLUREXCIpLmZvcm1hdCgnREQvTU0vWVlZWScpO1xyXG4gICAgICAgICAgICAgIGFwcG9pbnRtZW50LnNsb3RUaW1lID0gbmV3U2xvdC5zbG90O1xyXG4gICAgICAgICAgICAgIHRoaXMuYXBwb2ludG1lbnRTZXJ2aWNlLnJlc2NoZWR1bGVBcHBvaW50bWVudChhcHBvaW50bWVudCkuc3Vic2NyaWJlKChyZXM6IEFwaVJlc3BvbnNlTW9kZWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSByZXMubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMubWluZG1hcFNlcnZpY2Uubm90aWZ5SHdGb3JSZXNjaGVkdWxlQXBwb2ludG1lbnQoYXBwb2ludG1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmdldEFwcG9pbnRtZW50cygpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnRvYXN0ci5zdWNjZXNzKHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KFwiVGhlIGFwcG9pbnRtZW50IGhhcyBiZWVuIHJlc2NoZWR1bGVkIHN1Y2Nlc3NmdWxseSFcIiksIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdSZXNjaGVkdWxpbmcgc3VjY2Vzc2Z1bCEnKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnRvYXN0ci5zdWNjZXNzKG1lc3NhZ2UsIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdSZXNjaGVkdWxpbmcgZmFpbGVkIScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogQ2FuY2VsIGFwcG9pbnRtZW50XHJcbiAgKiBAcGFyYW0ge0FwcG9pbnRtZW50TW9kZWx9IGFwcG9pbnRtZW50IC0gQXBwb2ludG1lbnQgdG8gYmUgcmVzY2hlZHVsZWRcclxuICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWYWxpZGF0aW9uUmVxdWlyZWQgLSBJZiB0cnVlLCB2YWxpZGF0aW9uIGlzIHJlcXVpcmVkXHJcbiAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICovXHJcbiAgY2FuY2VsKGFwcG9pbnRtZW50OiBBcHBvaW50bWVudE1vZGVsLCBpc1ZhbGlkYXRpb25SZXF1aXJlZDogYm9vbGVhbikge1xyXG4gICAgaWYgKGFwcG9pbnRtZW50LnZpc2l0U3RhdHVzID09ICdWaXNpdCBJbiBQcm9ncmVzcycgJiYgaXNWYWxpZGF0aW9uUmVxdWlyZWQpIHtcclxuICAgICAgdGhpcy50b2FzdHIuZXJyb3IodGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXCJWaXNpdCBpcyBpbiBwcm9ncmVzcywgaXQgY2FuJ3QgYmUgY2FuY2VsbGVkLlwiKSwgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoJ0NhbmNlbGluZyBmYWlsZWQhJykpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvcmVTZXJ2aWNlLm9wZW5Db25maXJtQ2FuY2VsQXBwb2ludG1lbnRNb2RhbChhcHBvaW50bWVudCkuc3Vic2NyaWJlKChyZXM6IGJvb2xlYW4pID0+IHtcclxuICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgIHRoaXMudG9hc3RyLnN1Y2Nlc3ModGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoJ1RoZSBBcHBvaW50bWVudCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgY2FuY2VsZWQuJyksdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoJ0NhbmNlbGluZyBzdWNjZXNzZnVsJykpO1xyXG4gICAgICAgIHRoaXMuZ2V0QXBwb2ludG1lbnRzKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBHZXQgdXNlciB1dWlkIGZyb20gbG9jYWxzdG9yYWdlIHVzZXJcclxuICAqIEByZXR1cm4ge3N0cmluZ30gLSBVc2VyIHV1aWRcclxuICAqL1xyXG4gIGdldCB1c2VySWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBnZXRDYWNoZURhdGEodHJ1ZSwgZG9jdG9yRGV0YWlscy5VU0VSKS51dWlkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBBcHBseSBmaWx0ZXIgb24gYSBkYXRhc291cmNlXHJcbiAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIElucHV0J3MgY2hhbmdlIGV2ZW50XHJcbiAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICovXHJcbiAgYXBwbHlGaWx0ZXIoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUudHJpbSgpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZih0aGlzLnBsdWdpbkNvbmZpZ09icz8ucGx1Z2luQ29uZmlnT2JzRmxhZyA9PT0gXCJBcHBvaW50bWVudFwiKXtcclxuICAgICAgY29uc3QgY3VzdG9tUHJlZGljYXRlID0gKGRhdGE6IGFueSwgZmlsdGVyOiBzdHJpbmcpOiBib29sZWFuID0+IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgZGF0YT8ub3Blbk1yc0lkPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlcikgfHxcclxuICAgICAgICAgIGRhdGE/LnBhdGllbnROYW1lPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlcikgfHxcclxuICAgICAgICAgIGRhdGE/LlRNSF9wYXRpZW50X2lkPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlcilcclxuICAgICAgICApO1xyXG4gICAgICB9O1xyXG4gICAgICAvLyBBbHdheXMgZmlsdGVyIGZyb20gdGhlIGZ1bGwgb3JpZ2luYWwgZGF0YVxyXG4gICAgICB0aGlzLmZpbHRlcmVkRGF0YUFmdGVyRGF0ZSA9IHRoaXMub3JpZ2luYWxEYXRhLmZpbHRlcihpdGVtID0+IGN1c3RvbVByZWRpY2F0ZShpdGVtLCBmaWx0ZXJWYWx1ZSkpO1xyXG4gICAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IHRoaXMuZmlsdGVyZWREYXRhQWZ0ZXJEYXRlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXIgPSBmaWx0ZXJWYWx1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuaXNGaWx0ZXJBcHBsaWVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIENhbGwgdGhpcyBvbmNlIGFmdGVyIGxvYWRpbmcgYXBwb2ludG1lbnRzXHJcbiAgc3RvcmVPcmlnaW5hbERhdGEoKSB7XHJcbiAgICB0aGlzLm9yaWdpbmFsRGF0YSA9IFsuLi50aGlzLmRhdGFTb3VyY2UuZGF0YV07IC8vIEJhY2t1cCBmdWxsIGRhdGFcclxuICB9XHJcbiAgLyoqXHJcbiAgKiBDbGVhciBmaWx0ZXIgZnJvbSBhIGRhdGFzb3VyY2VcclxuICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgKi9cclxuICBjbGVhckZpbHRlcigpIHtcclxuICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXIgPSBudWxsO1xyXG4gICAgdGhpcy5zZWFyY2hFbGVtZW50Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgdGhpcy5pc0ZpbHRlckFwcGxpZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuZmlsdGVyZWREYXRlQW5kUmFuZ2VGb3JtLnJlc2V0KHtcclxuICAgICAgZGF0ZTogbnVsbCxcclxuICAgICAgc3RhcnREYXRlOiBudWxsLFxyXG4gICAgICBlbmREYXRlOiBudWxsXHJcbiAgICB9KTtcclxuICAgIHRoaXMubW9kZSA9ICdkYXRlJzsgXHJcbiAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IFsuLi50aGlzLm9yaWdpbmFsRGF0YV07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgdGhlIGZpZWxkIGlzIGluIHBhdGllbnQgcmVnaXN0cmF0aW9uIGZpZWxkc1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZE5hbWUgLSBUaGUgZmllbGQgbmFtZVxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVHJ1ZSBpZiBwcmVzZW50LCBlbHNlIGZhbHNlXHJcbiAgICovXHJcbiAgY2hlY2tQYXRpZW50UmVnRmllbGQoZmllbGROYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnBhdGllbnRSZWdGaWVsZHMuaW5kZXhPZihmaWVsZE5hbWUpICE9PSAtMTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogUmV0dXJucyB0aGUgV2hhdHNBcHAgbGluayBmb3IgYSBnaXZlbiB0ZWxlcGhvbmUgbnVtYmVyXHJcbiAgKiBAcGFyYW0ge3N0cmluZ30gdGVsZXBob25lTnVtYmVyIC0gVGhlIHRlbGVwaG9uZSBudW1iZXIgdG8gZ2VuZXJhdGUgdGhlIGxpbmsgZm9yXHJcbiAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gVGhlIFdoYXRzQXBwIGxpbmtcclxuICAqL1xyXG4gIGdldFdoYXRzQXBwTGluayh0ZWxlcGhvbmVOdW1iZXI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy52aXNpdFNlcnZpY2UuZ2V0V2hhdHNhcHBMaW5rKHRlbGVwaG9uZU51bWJlcik7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlcyB0aGUgdGVsZXBob25lIG51bWJlciBmcm9tIHRoZSBwZXJzb24ncyBhdHRyaWJ1dGVzXHJcbiAgICogQHBhcmFtIHtBcHBvaW50bWVudE1vZGVsWyd2aXNpdCddWydwZXJzb24nXX0gcGVyc29uIC0gVGhlIHBlcnNvbiBvYmplY3QgY29udGFpbmluZyBhdHRyaWJ1dGVzXHJcbiAgICogQHJldHVybiB7c3RyaW5nIHwgdW5kZWZpbmVkfSAtIFRoZSBwZXJzb24ncyB0ZWxlcGhvbmUgbnVtYmVyIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcclxuICAgKi9cclxuICBnZXRUZWxlcGhvbmVOdW1iZXIocGVyc29uOiBBcHBvaW50bWVudE1vZGVsWyd2aXNpdCddWydwZXJzb24nXSkge1xyXG4gICAgcmV0dXJuIHBlcnNvbj8ucGVyc29uX2F0dHJpYnV0ZS5maW5kKCh2OiB7IHBlcnNvbl9hdHRyaWJ1dGVfdHlwZV9pZDogbnVtYmVyOyB9KSA9PiB2LnBlcnNvbl9hdHRyaWJ1dGVfdHlwZV9pZCA9PSA4KT8udmFsdWU7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xvc2VzIHRoZSBtZW51IGlmIGl0J3Mgb3BlblxyXG4gICAqL1xyXG4gIGNsb3NlTWVudSgpIHtcclxuICAgIGlmICh0aGlzLm1lbnVUcmlnZ2VyKSB7XHJcbiAgICAgIHRoaXMubWVudVRyaWdnZXIuY2xvc2VNZW51KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgbW9kZSBmb3IgdGhlIGNvbXBvbmVudCAoZWl0aGVyICdkYXRlJyBvciAncmFuZ2UnKVxyXG4gICAqIEBwYXJhbSB7J2RhdGUnIHwgJ3JhbmdlJ30gbW9kZSAtIFRoZSBtb2RlIHRvIHNldFxyXG4gICAqL1xyXG4gIHNldE1vZGUobW9kZTogJ2RhdGUnIHwgJ3JhbmdlJykge1xyXG4gICAgdGhpcy5tb2RlID0gbW9kZTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBGb3JtYXRzIGEgZGF0ZSBpbnRvICdZWVlZLU1NLUREJyBmb3JtYXRcclxuICAgKiBAcGFyYW0ge2FueX0gZGF0ZSAtIFRoZSBkYXRlIHRvIGZvcm1hdFxyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSBUaGUgZm9ybWF0dGVkIGRhdGVcclxuICAgKi9cclxuICBmb3JtYXREYXRlKGRhdGU6IGFueSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBsb2NhbERhdGUgPSBuZXcgRGF0ZShkYXRlKTtcclxuICAgIGNvbnN0IHllYXIgPSBsb2NhbERhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgIGNvbnN0IG1vbnRoID0gU3RyaW5nKGxvY2FsRGF0ZS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcclxuICAgIGNvbnN0IGRheSA9IFN0cmluZyhsb2NhbERhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gICAgcmV0dXJuIGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWA7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydHMgYSByZWxhdGl2ZSB0aW1lIHN0cmluZyAoZS5nLiwgXCIyIGhvdXJzXCIsIFwiMSBkYXlcIikgdG8gYSBkYXRlIHN0cmluZ1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVRpbWUgLSBUaGUgcmVsYXRpdmUgdGltZSBzdHJpbmdcclxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gVGhlIHJlc3VsdGluZyBkYXRlIGluICdZWVlZLU1NLUREJyBmb3JtYXRcclxuICAgKiBAdGhyb3dzIHtFcnJvcn0gLSBUaHJvd3MgZXJyb3IgZm9yIGludmFsaWQgdGltZSB1bml0c1xyXG4gICAqL1xyXG4gIGNvbnZlcnRUb0RhdGUocmVsYXRpdmVUaW1lOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcclxuICAgIGNvbnN0IFt2YWx1ZSwgdW5pdF0gPSByZWxhdGl2ZVRpbWUuc3BsaXQoJyAnKTtcclxuICAgIGNvbnN0IGFtb3VudCA9IHBhcnNlSW50KHZhbHVlLCAxMCk7ICAgIFxyXG4gICAgXHJcbiAgICBpZiAoWydob3VyJywgJ2hvdXJzJ10uaW5jbHVkZXModW5pdC50b0xvd2VyQ2FzZSgpKSkgbm93LnNldEhvdXJzKG5vdy5nZXRIb3VycygpIC0gYW1vdW50KTtcclxuICAgIGVsc2UgaWYgKFsnbWludXRlJywgJ21pbnV0ZXMnXS5pbmNsdWRlcyh1bml0LnRvTG93ZXJDYXNlKCkpKSBub3cuc2V0TWludXRlcyhub3cuZ2V0TWludXRlcygpIC0gYW1vdW50KTtcclxuICAgIGVsc2UgaWYgKFsnZGF5JywgJ2RheXMnXS5pbmNsdWRlcyh1bml0LnRvTG93ZXJDYXNlKCkpKSBub3cuc2V0RGF0ZShub3cuZ2V0RGF0ZSgpIC0gYW1vdW50KTtcclxuICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRpbWUgdW5pdC4gT25seSBcImhvdXJzXCIsIFwibWludXRlc1wiLCBvciBcImRheXNcIiBhcmUgc3VwcG9ydGVkLicpO1xyXG5cclxuICAgIHJldHVybiBub3cudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydHMgYSBmb2xsb3ctdXAgZGF0ZSBzdHJpbmcgdG8gSVNPIGZvcm1hdFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb2xsb3dVcCAtIFRoZSBmb2xsb3ctdXAgZGF0ZSBzdHJpbmdcclxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gVGhlIGZvbGxvdy11cCBkYXRlIGluIElTTyBzdHJpbmcgZm9ybWF0XHJcbiAgICovXHJcbiAgY29udmVydFRvSVNPKGZvbGxvd1VwOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGZvbGxvd1VwKTtcclxuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSk7XHJcbiAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiBBcHBsaWVzIGRhdGUgb3IgcmFuZ2UgZmlsdGVyIHRvIHRoZSBkYXRhIHNvdXJjZSBiYXNlZCBvbiBzZWxlY3RlZCBkYXRlKHMpXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGVGaWVsZCAtIFRoZSBmaWVsZCBuYW1lIGZvciB0aGUgZGF0ZSB0byBmaWx0ZXJcclxuICAgKi9cclxuICBhcHBseURhdGVPclJhbmdlRmlsdGVyKGRhdGVGaWVsZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzZWxlY3RlZERhdGUgPSB0aGlzLmZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybS5nZXQoJ2RhdGUnKT8udmFsdWU7XHJcbiAgICBjb25zdCBzdGFydERhdGUgPSB0aGlzLmZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybS5nZXQoJ3N0YXJ0RGF0ZScpPy52YWx1ZTtcclxuICAgIGNvbnN0IGVuZERhdGUgPSB0aGlzLmZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybS5nZXQoJ2VuZERhdGUnKT8udmFsdWU7XHJcblxyXG4gICAgaWYgKHNlbGVjdGVkRGF0ZSkge1xyXG4gICAgICBjb25zdCBmb3JtYXR0ZWREYXRlID0gdGhpcy5mb3JtYXREYXRlKHNlbGVjdGVkRGF0ZSk7XHJcbiAgICAgIHRoaXMuZGF0ZUZpbHRlciA9IHRoaXMuZm9ybWF0RGF0ZShzZWxlY3RlZERhdGUpO1xyXG5cclxuICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlclByZWRpY2F0ZSA9IChkYXRhOiBhbnksIGZpbHRlcjogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgbGV0IGl0ZW1EYXRlO1xyXG4gICAgICAgIGlmKGRhdGVGaWVsZCA9PT0gXCJmb2xsb3dVcFwiKXtcclxuICAgICAgICAgIGl0ZW1EYXRlID0gdGhpcy5mb3JtYXREYXRlKHRoaXMuY29udmVydFRvSVNPKGRhdGEuZm9sbG93VXApKTtcclxuICAgICAgICB9IGVsc2UgaWYoZGF0ZUZpZWxkID09PSBcInNsb3RKc0RhdGVcIil7XHJcbiAgICAgICAgICBpdGVtRGF0ZSA9IHRoaXMuZm9ybWF0RGF0ZShkYXRhW2RhdGVGaWVsZF0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpdGVtRGF0ZSA9IGRhdGFbZGF0ZUZpZWxkXS5pbmNsdWRlcygnLCcpID8gdGhpcy5mb3JtYXREYXRlKGRhdGFbZGF0ZUZpZWxkXSkgOiB0aGlzLmNvbnZlcnRUb0RhdGUoZGF0YVtkYXRlRmllbGRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1EYXRlID09PSBmaWx0ZXI7XHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXIgPSBmb3JtYXR0ZWREYXRlO1xyXG4gICAgfSBlbHNlIGlmIChzdGFydERhdGUgJiYgZW5kRGF0ZSkge1xyXG4gICAgICBjb25zdCBmb3JtYXR0ZWRTdGFydERhdGUgPSB0aGlzLmZvcm1hdERhdGUoc3RhcnREYXRlKTtcclxuICAgICAgY29uc3QgZm9ybWF0dGVkRW5kRGF0ZSA9IHRoaXMuZm9ybWF0RGF0ZShlbmREYXRlKTtcclxuICBcclxuICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlclByZWRpY2F0ZSA9IChkYXRhOiBhbnksIGZpbHRlcjogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgbGV0IGl0ZW1EYXRlO1xyXG4gICAgICAgIGlmKGRhdGVGaWVsZCA9PT0gXCJmb2xsb3dVcFwiKXtcclxuICAgICAgICAgIGl0ZW1EYXRlID0gdGhpcy5mb3JtYXREYXRlKHRoaXMuY29udmVydFRvSVNPKGRhdGEuZm9sbG93VXApKTtcclxuICAgICAgICB9IGVsc2UgaWYoZGF0ZUZpZWxkID09PSBcInNsb3RKc0RhdGVcIil7XHJcbiAgICAgICAgICBpdGVtRGF0ZSA9IHRoaXMuZm9ybWF0RGF0ZShkYXRhW2RhdGVGaWVsZF0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpdGVtRGF0ZSA9IGRhdGFbZGF0ZUZpZWxkXS5pbmNsdWRlcygnLCcpID8gdGhpcy5mb3JtYXREYXRlKGRhdGFbZGF0ZUZpZWxkXSkgOiB0aGlzLmNvbnZlcnRUb0RhdGUoZGF0YVtkYXRlRmllbGRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1EYXRlID49IGZvcm1hdHRlZFN0YXJ0RGF0ZSAmJiBpdGVtRGF0ZSA8PSBmb3JtYXR0ZWRFbmREYXRlO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlciA9IGAke2Zvcm1hdHRlZFN0YXJ0RGF0ZX06JHtmb3JtYXR0ZWRFbmREYXRlfWA7XHJcbiAgICAgIHRoaXMuZGF0ZUZpbHRlciA9IGAke3RoaXMuZm9ybWF0RGF0ZShzdGFydERhdGUpfToke3RoaXMuZm9ybWF0RGF0ZShlbmREYXRlKX1gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlciA9ICcnO1xyXG4gICAgICB0aGlzLmRhdGVGaWx0ZXIgPSAnJztcclxuICAgIH1cclxuICAgIHRoaXMuZGF0ZUZpZWxkID0gZGF0ZUZpZWxkO1xyXG4gICAgLy90aGlzLnVwZGF0ZUNvbWJpbmVkRmlsdGVyKCk7XHJcbiAgICB0aGlzLnRlbXBQYWdpbmF0b3IuZmlyc3RQYWdlKCk7XHJcbiAgICB0aGlzLmNsb3NlTWVudSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXRzIHRoZSBkYXRlIGZpbHRlciBmb3JtIGFuZCBjbGVhcnMgdGhlIGRhdGEgc291cmNlIGZpbHRlclxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmxhZyAtIElmIHRydWUsIGRvZXNuJ3QgY2xvc2UgdGhlIG1lbnVcclxuICAgKi9cclxuICByZXNldERhdGUoZmxhZzogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICB0aGlzLmZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybS5yZXNldCgpO1xyXG4gICAgdGhpcy5kYXRhU291cmNlLmZpbHRlciA9ICcnO1xyXG4gICAgdGhpcy5kYXRhU291cmNlLmZpbHRlclByZWRpY2F0ZSA9IChkYXRhLCBmaWx0ZXI6IHN0cmluZykgPT4gZGF0YT8ub3Blbk1yc0lkLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xIHx8IGRhdGE/LnBhdGllbnROYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xO1xyXG4gICAgaWYgKCFmbGFnKSB7XHJcbiAgICAgIHRoaXMuY2xvc2VNZW51KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIGEgc3BlY2lmaWMgYXR0cmlidXRlIGRhdGEgZnJvbSB0aGUgcGVyc29uJ3MgYXR0cmlidXRlc1xyXG4gICAqIEBwYXJhbSB7YW55fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGNvbnRhaW5pbmcgcGVyc29uIGF0dHJpYnV0ZXNcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gcmV0cmlldmVcclxuICAgKiBAcmV0dXJuIHtPYmplY3QgfCBudWxsfSAtIFRoZSBhdHRyaWJ1dGUgbmFtZSBhbmQgdmFsdWUsIG9yIG51bGwgaWYgbm90IGZvdW5kXHJcbiAgICovXHJcbiAgZ2V0QXR0cmlidXRlRGF0YShkYXRhOiBhbnksIGF0dHJpYnV0ZU5hbWU6IHN0cmluZyk6IHsgbmFtZTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0gfCBudWxsIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEucGVyc29uX2F0dHJpYnV0ZSkpIHtcclxuICAgICAgY29uc3QgYXR0cmlidXRlID0gZGF0YS5wZXJzb25fYXR0cmlidXRlLmZpbmQoXHJcbiAgICAgICAgKGF0dHI6IGFueSkgPT4gYXR0ci5wZXJzb25fYXR0cmlidXRlX3R5cGU/Lm5hbWUgPT09IGF0dHJpYnV0ZU5hbWVcclxuICAgICAgKTtcclxuICAgICAgaWYgKGF0dHJpYnV0ZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBuYW1lOiBhdHRyaWJ1dGUucGVyc29uX2F0dHJpYnV0ZV90eXBlLm5hbWUsXHJcbiAgICAgICAgICB2YWx1ZTogYXR0cmlidXRlLnZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEdldCBib29rZWQgYXBwb2ludG1lbnRzIGZvciBhIGxvZ2dlZC1pbiBkb2N0b3IgaW4gYSBjdXJyZW50IHllYXJcclxuICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgKi9cclxuICBnZXRBcHBvaW50bWVudHMoKSB7XHJcbiAgICB0aGlzLm5neExvYWRlci5zdGFydExvYWRlcigndGFibGUtbG9hZGVyLScgKyB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnKTsgLy8gU3RhcnQgc2VjdGlvbiBsb2FkZXJcclxuICAgIHRoaXMuYXBwb2ludG1lbnRzID0gW107XHJcbiAgICBsZXQgZnJvbURhdGUgPSBtb21lbnQoKS5zdGFydE9mKCd5ZWFyJykuZm9ybWF0KCdERC9NTS9ZWVlZJyk7XHJcbiAgICBsZXQgdG9EYXRlID0gbW9tZW50KCkuZW5kT2YoJ3llYXInKS5mb3JtYXQoJ0REL01NL1lZWVknKTtcclxuICAgIGxldCBwZW5kaW5nX3Zpc2l0cyA9IHRoaXMucGx1Z2luQ29uZmlnT2JzLmZpbHRlcj8uaGFzT3duUHJvcGVydHkoXCJwZW5kaW5nX3Zpc2l0c1wiKSAgPyB0aGlzLnBsdWdpbkNvbmZpZ09icy5maWx0ZXI/LnBlbmRpbmdfdmlzaXRzIDogbnVsbDtcclxuICAgIGlmKHRoaXMucGx1Z2luQ29uZmlnT2JzPy5maWx0ZXIpe1xyXG4gICAgICBmcm9tRGF0ZSA9IHRoaXMucGx1Z2luQ29uZmlnT2JzPy5maWx0ZXI/LmZyb21EYXRlXHJcbiAgICAgIHRvRGF0ZSA9IHRoaXMucGx1Z2luQ29uZmlnT2JzPy5maWx0ZXI/LnRvRGF0ZVxyXG4gICAgfVxyXG4gICAgdGhpcy5hcHBvaW50bWVudFNlcnZpY2UuZ2V0VXNlclNsb3RzKGdldENhY2hlRGF0YSh0cnVlLCBkb2N0b3JEZXRhaWxzLlVTRVIpLnV1aWQsIGZyb21EYXRlLCB0b0RhdGUsIHRoaXMuaXNNQ0NVc2VyID8gdGhpcy5zcGVjaWFsaXphdGlvbiA6IG51bGwsIHBlbmRpbmdfdmlzaXRzKVxyXG4gICAgICAuc3Vic2NyaWJlKHtcclxuICAgICAgICBuZXh0OiAocmVzOiBBcGlSZXNwb25zZU1vZGVsKSA9PiB7ICAgICAgICBcclxuICAgICAgICAgIHRoaXMudmlzaXRzTGVuZ3RoQ291bnQgPSByZXMuZGF0YT8ubGVuZ3RoO1xyXG4gICAgICAgICAgdGhpcy5lbWl0VmlzaXRzQ291bnQodGhpcy52aXNpdHNMZW5ndGhDb3VudCk7XHJcbiAgICAgICAgICBsZXQgYXBwb2ludG1lbnRzZGF0YSA9IHJlcy5kYXRhO1xyXG4gICAgICAgICAgYXBwb2ludG1lbnRzZGF0YS5mb3JFYWNoKChhcHBvaW50bWVudDogQXBwb2ludG1lbnRNb2RlbCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYXBwb2ludG1lbnQuc3RhdHVzID09ICdib29rZWQnICYmIChhcHBvaW50bWVudC52aXNpdFN0YXR1cyA9PSAnQXdhaXRpbmcgQ29uc3VsdCd8fGFwcG9pbnRtZW50LnZpc2l0U3RhdHVzID09ICdWaXNpdCBJbiBQcm9ncmVzcycpKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGFwcG9pbnRtZW50LnZpc2l0KSB7XHJcbiAgICAgICAgICAgICAgICBhcHBvaW50bWVudC5jaGVpZl9jb21wbGFpbnQgPSB0aGlzLmdldENoZWlmQ29tcGxhaW50KGFwcG9pbnRtZW50LnZpc2l0KTtcclxuICAgICAgICAgICAgICAgIGFwcG9pbnRtZW50LnN0YXJ0c19pbiA9IGNoZWNrSWZEYXRlT2xkVGhhbk9uZURheShhcHBvaW50bWVudC5zbG90SnNEYXRlKTtcclxuICAgICAgICAgICAgICAgIGFwcG9pbnRtZW50LnRlbGVwaG9uZSA9IHRoaXMuZ2V0VGVsZXBob25lTnVtYmVyKGFwcG9pbnRtZW50Py52aXNpdD8ucGVyc29uKTtcclxuICAgICAgICAgICAgICAgIGFwcG9pbnRtZW50LlRNSF9wYXRpZW50X2lkID0gdGhpcy5nZXRBdHRyaWJ1dGVEYXRhKGFwcG9pbnRtZW50LnZpc2l0LCBcIlRNSCBDYXNlIE51bWJlclwiKT8udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBhcHBvaW50bWVudC51dWlkID0gYXBwb2ludG1lbnQudmlzaXRVdWlkO1xyXG4gICAgICAgICAgICAgICAgYXBwb2ludG1lbnQubG9jYXRpb24gPSBhcHBvaW50bWVudD8udmlzaXQ/LmxvY2F0aW9uPy5uYW1lO1xyXG4gICAgICAgICAgICAgICAgYXBwb2ludG1lbnQuYWdlID0gYXBwb2ludG1lbnQ/LnBhdGllbnRBZ2UgKyAnICcgKyB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCgneScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBvaW50bWVudHMucHVzaChhcHBvaW50bWVudCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5kYXRhID0gWy4uLnRoaXMuYXBwb2ludG1lbnRzXTtcclxuICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5wYWdpbmF0b3IgPSB0aGlzLnBhZ2luYXRvcjtcclxuICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5zb3J0ID0gdGhpcy50YWJsZU1hdFNvcnQ7XHJcbiAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZmlsdGVyUHJlZGljYXRlID0gKGRhdGEsIGZpbHRlcjogc3RyaW5nKSA9PiBkYXRhPy5vcGVuTXJzSWQudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgIT0gLTEgfHwgZGF0YT8ucGF0aWVudE5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgIT0gLTE7XHJcbiAgICAgICAgICB0aGlzLnN0b3JlT3JpZ2luYWxEYXRhKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5uZ3hMb2FkZXIuc3RvcExvYWRlcigndGFibGUtbG9hZGVyLScgKyB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnKTsgLy8gU3RvcCBzZWN0aW9uIGxvYWRlclxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAqIEdldCBkb2N0b3Igc3BlY2lhbGl0eVxyXG4gICogQHBhcmFtIHtQcm92aWRlckF0dHJpYnV0ZU1vZGVsW119IGF0dHIgLSBBcnJheSBvZiBwcm92aWRlciBhdHRyaWJ1dGVzXHJcbiAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gRG9jdG9yIHNwZWNpYWxpdHlcclxuICAqL1xyXG4gIGdldFNwZWNpYWxpemF0aW9uKGF0dHI6IFByb3ZpZGVyQXR0cmlidXRlTW9kZWxbXSkge1xyXG4gICAgbGV0IHNwZWNpYWxpemF0aW9uID0gJyc7XHJcbiAgICBhdHRyLmZvckVhY2goKGE6IFByb3ZpZGVyQXR0cmlidXRlTW9kZWwpID0+IHtcclxuICAgICAgaWYgKGEuYXR0cmlidXRlVHlwZS51dWlkID09ICdlZDE3MTVmNS05M2UyLTQwNGUtYjNjOS0yYTJkOTYwMGYwNjInICYmICFhLnZvaWRlZCkge1xyXG4gICAgICAgIHNwZWNpYWxpemF0aW9uID0gYS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc3BlY2lhbGl6YXRpb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFJldHVybnMgdGhlIGFnZSBpbiB5ZWFycyBmcm9tIHRoZSBiaXJ0aGRhdGVcclxuICAqIEBwYXJhbSB7c3RyaW5nfSBiaXJ0aGRhdGUgLSBEYXRlIGluIHN0cmluZyBmb3JtYXRcclxuICAqIEByZXR1cm4ge251bWJlcn0gLSBBZ2VcclxuICAqL1xyXG4gIGNhbGN1bGF0ZUFnZShiaXJ0aGRhdGU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIG1vbWVudCgpLmRpZmYoYmlydGhkYXRlLCAneWVhcnMnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogUmV0dXJucyB0aGUgY3JlYXRlZCB0aW1lIGluIHdvcmRzIGZyb20gdGhlIGRhdGVcclxuICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIC0gRGF0ZVxyXG4gICogQHJldHVybiB7c3RyaW5nfSAtIENyZWF0ZWQgdGltZSBpbiB3b3JkcyBmcm9tIHRoZSBkYXRlXHJcbiAgKi9cclxuICBnZXRDcmVhdGVkQXQoZGF0YTogc3RyaW5nKSB7XHJcbiAgICBsZXQgaG91cnMgPSBtb21lbnQoKS5kaWZmKG1vbWVudChkYXRhKSwgJ2hvdXJzJyk7XHJcbiAgICBsZXQgbWludXRlcyA9IG1vbWVudCgpLmRpZmYobW9tZW50KGRhdGEpLCAnbWludXRlcycpO1xyXG4gICAgaWYgKGhvdXJzID4gMjQpIHtcclxuICAgICAgcmV0dXJuIG1vbWVudChkYXRhKS5mb3JtYXQoJ0REIE1NTSwgWVlZWScpO1xyXG4gICAgfTtcclxuICAgIGlmIChob3VycyA8IDEpIHtcclxuICAgICAgcmV0dXJuIGAke21pbnV0ZXN9ICR7dGhpcy50cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXCJNaW51dGVzIGFnb1wiKX1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAke2hvdXJzfSAke3RoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KFwiSG91cnMgYWdvXCIpfWA7XHJcbiAgfVxyXG4gIFxyXG4gIC8qKlxyXG4gICogR2V0IGVuY291bnRlciBkYXRldGltZSBmb3IgYSBnaXZlbiBlbmNvdW50ZXIgdHlwZVxyXG4gICogQHBhcmFtIHtDdXN0b21WaXNpdE1vZGVsfSB2aXNpdCAtIFZpc2l0XHJcbiAgKiBAcGFyYW0ge3N0cmluZ30gZW5jb3VudGVyTmFtZSAtIEVuY291bnRlciB0eXBlXHJcbiAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gRW5jb3VudGVyIGRhdGV0aW1lXHJcbiAgKi9cclxuICBnZXRFbmNvdW50ZXJDcmVhdGVkKHZpc2l0OiBDdXN0b21WaXNpdE1vZGVsLCBlbmNvdW50ZXJOYW1lOiBzdHJpbmcpIHtcclxuICAgIGxldCBjcmVhdGVkX2F0ID0gJyc7XHJcbiAgICBjb25zdCBlbmNvdW50ZXJzID0gdmlzaXQuZW5jb3VudGVycztcclxuICAgIGVuY291bnRlcnMuZm9yRWFjaCgoZW5jb3VudGVyOiBDdXN0b21FbmNvdW50ZXJNb2RlbCkgPT4ge1xyXG4gICAgICBjb25zdCBkaXNwbGF5ID0gZW5jb3VudGVyLnR5cGU/Lm5hbWU7XHJcbiAgICAgIGlmIChkaXNwbGF5Lm1hdGNoKGVuY291bnRlck5hbWUpICE9PSBudWxsKSB7XHJcbiAgICAgICAgY3JlYXRlZF9hdCA9IHRoaXMuZ2V0Q3JlYXRlZEF0KGVuY291bnRlci5lbmNvdW50ZXJfZGF0ZXRpbWUucmVwbGFjZSgnWicsJyswNTMwJykpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjcmVhdGVkX2F0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgZW5jb3VudGVyIGlzIGEgZm9sbG93LXVwIG9yIG5ldyB2aXNpdFxyXG4gICAqIEBwYXJhbSB7YW55fSBlbmMgLSBFbmNvdW50ZXIgZGF0YVxyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSAnRk9MTE9XX1VQJyBvciAnTkVXJ1xyXG4gICAqL1xyXG4gIGdldERlbWFyY2F0aW9uKGVuYzogYW55KSB7XHJcbiAgICBsZXQgaXNGb2xsb3dVcCA9IGZhbHNlO1xyXG4gICAgY29uc3QgYWRsSW50bCA9IGVuYz8uZmluZD8uKGUgPT4gZT8udHlwZT8ubmFtZSA9PT0gdmlzaXRUeXBlcy5BRFVMVElOSVRJQUwpO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWRsSW50bD8ub2JzKSkge1xyXG4gICAgICBhZGxJbnRsPy5vYnMuZm9yRWFjaChvYnMgPT4ge1xyXG4gICAgICAgIGlmICghaXNGb2xsb3dVcClcclxuICAgICAgICAgIGlzRm9sbG93VXAgPSBvYnM/LnZhbHVlX3RleHQ/LnRvTG93ZXJDYXNlPy4oKT8uaW5jbHVkZXM/LihcImZvbGxvdyB1cFwiKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNGb2xsb3dVcCA/IHZpc2l0VHlwZXMuRk9MTE9XX1VQIDogdmlzaXRUeXBlcy5ORVc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEdldCBhd2FpdGluZyB2aXNpdHMgZm9yIGEgZ2l2ZW4gcGFnZSBudW1iZXJcclxuICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlIC0gUGFnZSBudW1iZXJcclxuICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgKi9cclxuICBnZXRBd2FpdGluZ1Zpc2l0cyhwYWdlOiBudW1iZXIgPSAxKSB7XHJcbiAgICB0aGlzLm5neExvYWRlci5zdGFydExvYWRlcigndGFibGUtbG9hZGVyLScgKyB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnKTsgLy8gU3RhcnQgc2VjdGlvbiBsb2FkZXJcclxuICAgIGlmKHBhZ2UgPT0gMSkge1xyXG4gICAgICB0aGlzLmF3YWl0aW5nVmlzaXRzID0gW107XHJcbiAgICB9ICAgIFxyXG4gICAgdGhpcy52aXNpdFNlcnZpY2UuZ2V0QXdhaXRpbmdWaXNpdHModGhpcy5zcGVjaWFsaXphdGlvbiwgcGFnZSkuc3Vic2NyaWJlKHtcclxuICAgICAgbmV4dDoocmVzOiBBcGlSZXNwb25zZU1vZGVsKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7XHJcbiAgICAgICAgICB0aGlzLnZpc2l0c0xlbmd0aENvdW50ID0gcmVzLnRvdGFsQ291bnQ7XHJcbiAgICAgICAgICB0aGlzLmVtaXRWaXNpdHNDb3VudCh0aGlzLnZpc2l0c0xlbmd0aENvdW50KTtcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzLmRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHZpc2l0ID0gcmVzLmRhdGFbaV07XHJcbiAgICAgICAgICAgIHZpc2l0LmNoZWlmX2NvbXBsYWludCA9IHRoaXMuZ2V0Q2hlaWZDb21wbGFpbnQodmlzaXQpO1xyXG4gICAgICAgICAgICB2aXNpdC52aXNpdF9jcmVhdGVkID0gdmlzaXQ/LmRhdGVfY3JlYXRlZCA/IHRoaXMuZ2V0Q3JlYXRlZEF0KHZpc2l0LmRhdGVfY3JlYXRlZC5yZXBsYWNlKCdaJywnKzA1MzAnKSkgOiB0aGlzLmdldEVuY291bnRlckNyZWF0ZWQodmlzaXQsIHZpc2l0VHlwZXMuQURVTFRJTklUSUFMKTtcclxuICAgICAgICAgICAgdmlzaXQucGVyc29uLmFnZSA9IHRoaXMuY2FsY3VsYXRlQWdlKHZpc2l0LnBlcnNvbi5iaXJ0aGRhdGUpO1xyXG4gICAgICAgICAgICB2aXNpdC5wYXRpZW50X3R5cGUgPSB0aGlzLmdldERlbWFyY2F0aW9uKHZpc2l0Py5lbmNvdW50ZXJzKTtcclxuICAgICAgICAgICAgdmlzaXQubG9jYXRpb24gPSB2aXNpdD8ubG9jYXRpb24/Lm5hbWU7XHJcbiAgICAgICAgICAgIHZpc2l0LmFnZSA9IHZpc2l0Py5wZXJzb24/LmFnZSArICcgJyArIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCd5Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuYXdhaXRpbmdWaXNpdHMucHVzaCh2aXNpdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IFsuLi50aGlzLmF3YWl0aW5nVmlzaXRzXTtcclxuICAgICAgICAgIGlmIChwYWdlID09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLnBhZ2luYXRvciA9IHRoaXMudGVtcFBhZ2luYXRvcjtcclxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLnNvcnQgPSB0aGlzLnRhYmxlTWF0U29ydDtcclxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlclByZWRpY2F0ZSA9IChkYXRhLCBmaWx0ZXI6IHN0cmluZykgPT4gZGF0YT8ucGF0aWVudC5pZGVudGlmaWVyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xIHx8IGRhdGE/LnBhdGllbnRfbmFtZS5naXZlbl9uYW1lLmNvbmNhdCgoZGF0YT8ucGF0aWVudF9uYW1lLm1pZGRsZV9uYW1lICYmIHRoaXMuY2hlY2tQYXRpZW50UmVnRmllbGQoJ01pZGRsZSBOYW1lJykgPyAnICcgKyBkYXRhPy5wYXRpZW50X25hbWUubWlkZGxlX25hbWUgOiAnJykgKyAnICcgKyBkYXRhPy5wYXRpZW50X25hbWUuZmFtaWx5X25hbWUpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50ZW1wUGFnaW5hdG9yLmxlbmd0aCA9IHRoaXMuYXdhaXRpbmdWaXNpdHMubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBQYWdpbmF0b3IubmV4dFBhZ2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5uZ3hMb2FkZXIuc3RvcExvYWRlcigndGFibGUtbG9hZGVyLScgKyB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnKTsgLy8gU3RvcCBzZWN0aW9uIGxvYWRlclxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogR2V0IGlucHJvZ3Jlc3MgdmlzaXRzIGZvciBhIGdpdmVuIHBhZ2UgbnVtYmVyXHJcbiAgKiBAcGFyYW0ge251bWJlcn0gcGFnZSAtIFBhZ2UgbnVtYmVyXHJcbiAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICovXHJcbiAgZ2V0SW5Qcm9ncmVzc1Zpc2l0cyhwYWdlOiBudW1iZXIgPSAxKSB7XHJcbiAgICB0aGlzLm5neExvYWRlci5zdGFydExvYWRlcigndGFibGUtbG9hZGVyLScgKyB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnKTsgLy8gU3RhcnQgc2VjdGlvbiBsb2FkZXJcclxuICAgIGlmKHBhZ2UgPT0gMSkge1xyXG4gICAgICB0aGlzLmluUHJvZ3Jlc3NWaXNpdHMgPSBbXTtcclxuICAgIH1cclxuICAgIHRoaXMudmlzaXRTZXJ2aWNlLmdldEluUHJvZ3Jlc3NWaXNpdHModGhpcy5zcGVjaWFsaXphdGlvbiwgcGFnZSkuc3Vic2NyaWJlKHtcclxuICAgICAgbmV4dDoocmVzOiBBcGlSZXNwb25zZU1vZGVsKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7XHJcbiAgICAgICAgICB0aGlzLnZpc2l0c0xlbmd0aENvdW50ID0gcmVzLnRvdGFsQ291bnQ7XHJcbiAgICAgICAgICB0aGlzLmVtaXRWaXNpdHNDb3VudCh0aGlzLnZpc2l0c0xlbmd0aENvdW50KTtcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzLmRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHZpc2l0ID0gcmVzLmRhdGFbaV07XHJcbiAgICAgICAgICAgIHZpc2l0LmNoZWlmX2NvbXBsYWludCA9IHRoaXMuZ2V0Q2hlaWZDb21wbGFpbnQodmlzaXQpO1xyXG4gICAgICAgICAgICB2aXNpdC52aXNpdF9jcmVhdGVkID0gdmlzaXQ/LmRhdGVfY3JlYXRlZCA/IHRoaXMuZ2V0Q3JlYXRlZEF0KHZpc2l0LmRhdGVfY3JlYXRlZC5yZXBsYWNlKCdaJywnKzA1MzAnKSkgOiB0aGlzLmdldEVuY291bnRlckNyZWF0ZWQodmlzaXQsIHZpc2l0VHlwZXMuQURVTFRJTklUSUFMKTtcclxuICAgICAgICAgICAgdmlzaXQucHJlc2NyaXB0aW9uX3N0YXJ0ZWQgPSB0aGlzLmdldEVuY291bnRlckNyZWF0ZWQodmlzaXQsIHZpc2l0VHlwZXMuVklTSVRfTk9URSk7XHJcbiAgICAgICAgICAgIHZpc2l0LnBlcnNvbi5hZ2UgPSB0aGlzLmNhbGN1bGF0ZUFnZSh2aXNpdC5wZXJzb24uYmlydGhkYXRlKTtcclxuICAgICAgICAgICAgdmlzaXQuVE1IX3BhdGllbnRfaWQgPSB0aGlzLmdldEF0dHJpYnV0ZURhdGEodmlzaXQsIFwiVE1IIENhc2UgTnVtYmVyXCIpPy52YWx1ZTtcclxuICAgICAgICAgICAgdmlzaXQubG9jYXRpb24gPSB2aXNpdD8ubG9jYXRpb24/Lm5hbWU7XHJcbiAgICAgICAgICAgIHZpc2l0LmFnZSA9IHZpc2l0Py5wZXJzb24/LmFnZSArICcgJyArIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCd5Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5Qcm9ncmVzc1Zpc2l0cy5wdXNoKHZpc2l0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuaW5Qcm9ncmVzc1Zpc2l0cy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgcGFyc2VUaW1lID0gKHZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmluY2x1ZGVzKFwibWludXRlcyBhZ29cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwibWludXRlc1wiLCB0aW1lOiBwYXJzZUludCh2YWx1ZSkgfTsgLy8gU3RvcmUgb25seSBudW1lcmljIG1pbnV0ZXNcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBpZiAodmFsdWUuaW5jbHVkZXMoXCJIb3VycyBhZ29cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwiaG91cnNcIiwgdGltZTogcGFyc2VJbnQodmFsdWUpICogNjAgfTsgLy8gQ29udmVydCBob3VycyB0byBtaW51dGVzIGZvciBjb3JyZWN0IGNvbXBhcmlzb25cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOiBcImRhdGVcIiwgdGltZTogbW9tZW50KHZhbHVlLCBcIkREIE1NTSwgWVlZWVwiKS52YWx1ZU9mKCkgfTtcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICBjb25zdCB2aXNpdEEgPSBwYXJzZVRpbWUoYS5wcmVzY3JpcHRpb25fc3RhcnRlZCk7XHJcbiAgICAgICAgICAgICAgY29uc3QgdmlzaXRCID0gcGFyc2VUaW1lKGIucHJlc2NyaXB0aW9uX3N0YXJ0ZWQpO1xyXG4gICAgICAgICAgICAgIC8vIFNvcnQgbWludXRlcyBmaXJzdCAoYXNjZW5kaW5nKVxyXG4gICAgICAgICAgICAgIGlmICh2aXNpdEEudHlwZSA9PT0gXCJtaW51dGVzXCIgJiYgdmlzaXRCLnR5cGUgPT09IFwibWludXRlc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdEEudGltZSAtIHZpc2l0Qi50aW1lO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvLyBTb3J0IGhvdXJzIGZpcnN0IChhc2NlbmRpbmcpXHJcbiAgICAgICAgICAgICAgaWYgKHZpc2l0QS50eXBlID09PSBcImhvdXJzXCIgJiYgdmlzaXRCLnR5cGUgPT09IFwiaG91cnNcIikge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRBLnRpbWUgLSB2aXNpdEIudGltZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gU29ydCBkYXRlcyAoZGVzY2VuZGluZylcclxuICAgICAgICAgICAgICBpZiAodmlzaXRBLnR5cGUgPT09IFwiZGF0ZVwiICYmIHZpc2l0Qi50eXBlID09PSBcImRhdGVcIikge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRCLnRpbWUgLSB2aXNpdEEudGltZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gUHJpb3JpdGl6ZSBtaW51dGVzIG92ZXIgaG91cnMsIGFuZCBob3VycyBvdmVyIGRhdGVzXHJcbiAgICAgICAgICAgICAgaWYgKHZpc2l0QS50eXBlID09PSBcIm1pbnV0ZXNcIikgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgIGlmICh2aXNpdEIudHlwZSA9PT0gXCJtaW51dGVzXCIpIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgIGlmICh2aXNpdEEudHlwZSA9PT0gXCJob3Vyc1wiKSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgaWYgKHZpc2l0Qi50eXBlID09PSBcImhvdXJzXCIpIHJldHVybiAxO1xyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5kYXRhID0gWy4uLnRoaXMuaW5Qcm9ncmVzc1Zpc2l0c107XHJcbiAgICAgICAgICBpZiAocGFnZSA9PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5wYWdpbmF0b3IgPSB0aGlzLnRlbXBQYWdpbmF0b3I7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5zb3J0ID0gdGhpcy50YWJsZU1hdFNvcnQ7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXJQcmVkaWNhdGUgPSAoZGF0YSwgZmlsdGVyOiBzdHJpbmcpID0+IGRhdGE/LnBhdGllbnQuaWRlbnRpZmllci50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSAhPSAtMSB8fCBkYXRhPy5wYXRpZW50X25hbWUuZ2l2ZW5fbmFtZS5jb25jYXQoKGRhdGE/LnBhdGllbnRfbmFtZS5taWRkbGVfbmFtZSAmJiB0aGlzLmNoZWNrUGF0aWVudFJlZ0ZpZWxkKCdNaWRkbGUgTmFtZScpID8gJyAnICsgZGF0YT8ucGF0aWVudF9uYW1lLm1pZGRsZV9uYW1lIDogJycpICsgJyAnICsgZGF0YT8ucGF0aWVudF9uYW1lLmZhbWlseV9uYW1lKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSAhPSAtMTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGVtcFBhZ2luYXRvci5sZW5ndGggPSB0aGlzLmluUHJvZ3Jlc3NWaXNpdHMubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBQYWdpbmF0b3IubmV4dFBhZ2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5uZ3hMb2FkZXIuc3RvcExvYWRlcigndGFibGUtbG9hZGVyLScgKyB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnKTsgLy8gU3RvcCBzZWN0aW9uIGxvYWRlclxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogR2V0IHByaW9yaXR5IHZpc2l0cyBmb3IgYSBnaXZlbiBwYWdlIG51bWJlclxyXG4gICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgLSBQYWdlIG51bWJlclxyXG4gICogQHJldHVybiB7dm9pZH1cclxuICAqL1xyXG4gIGdldFByaW9yaXR5VmlzaXRzKHBhZ2U6IG51bWJlciA9IDEpIHtcclxuICAgIHRoaXMubmd4TG9hZGVyLnN0YXJ0TG9hZGVyKCd0YWJsZS1sb2FkZXItJyArIHRoaXMucGx1Z2luQ29uZmlnT2JzLnBsdWdpbkNvbmZpZ09ic0ZsYWcpOyAvLyBTdGFydCBzZWN0aW9uIGxvYWRlclxyXG4gICAgaWYocGFnZSA9PSAxKSB7XHJcbiAgICAgIHRoaXMucHJpb3JpdHlWaXNpdHMgPSBbXTtcclxuICAgIH1cclxuICAgIHRoaXMudmlzaXRTZXJ2aWNlLmdldFByaW9yaXR5VmlzaXRzKHRoaXMuc3BlY2lhbGl6YXRpb24sIHBhZ2UpLnN1YnNjcmliZSh7XHJcbiAgICAgIG5leHQ6KHJlczogQXBpUmVzcG9uc2VNb2RlbCkgPT4ge1xyXG4gICAgICAgIGlmIChyZXMuc3VjY2Vzcykge1xyXG4gICAgICAgICAgdGhpcy52aXNpdHNMZW5ndGhDb3VudCA9IHJlcy50b3RhbENvdW50O1xyXG4gICAgICAgICAgdGhpcy5lbWl0VmlzaXRzQ291bnQodGhpcy52aXNpdHNMZW5ndGhDb3VudCk7XHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcy5kYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB2aXNpdCA9IHJlcy5kYXRhW2ldO1xyXG4gICAgICAgICAgICB2aXNpdC5jaGVpZl9jb21wbGFpbnQgPSB0aGlzLmdldENoZWlmQ29tcGxhaW50KHZpc2l0KTtcclxuICAgICAgICAgICAgdmlzaXQudmlzaXRfY3JlYXRlZCA9IHZpc2l0Py5kYXRlX2NyZWF0ZWQgPyB0aGlzLmdldENyZWF0ZWRBdCh2aXNpdC5kYXRlX2NyZWF0ZWQucmVwbGFjZSgnWicsJyswNTMwJykpIDogdGhpcy5nZXRFbmNvdW50ZXJDcmVhdGVkKHZpc2l0LCB2aXNpdFR5cGVzLkZMQUdHRUQpO1xyXG4gICAgICAgICAgICB2aXNpdC5wZXJzb24uYWdlID0gdGhpcy5jYWxjdWxhdGVBZ2UodmlzaXQucGVyc29uLmJpcnRoZGF0ZSk7XHJcbiAgICAgICAgICAgIHZpc2l0LmxvY2F0aW9uID0gdmlzaXQ/LmxvY2F0aW9uPy5uYW1lO1xyXG4gICAgICAgICAgICB2aXNpdC5hZ2UgPSB2aXNpdD8ucGVyc29uPy5hZ2UgKyAnICcgKyB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCgneScpO1xyXG4gICAgICAgICAgICB0aGlzLnByaW9yaXR5VmlzaXRzLnB1c2godmlzaXQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5kYXRhU291cmNlLmRhdGEgPSBbLi4udGhpcy5wcmlvcml0eVZpc2l0c107XHJcbiAgICAgICAgICBpZiAocGFnZSA9PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5wYWdpbmF0b3IgPSB0aGlzLnRlbXBQYWdpbmF0b3I7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5zb3J0ID0gdGhpcy50YWJsZU1hdFNvcnQ7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5maWx0ZXJQcmVkaWNhdGUgPSAoZGF0YSwgZmlsdGVyOiBzdHJpbmcpID0+IGRhdGE/LnBhdGllbnQuaWRlbnRpZmllci50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSAhPSAtMSB8fCBkYXRhPy5wYXRpZW50X25hbWUuZ2l2ZW5fbmFtZS5jb25jYXQoKGRhdGE/LnBhdGllbnRfbmFtZS5taWRkbGVfbmFtZSAmJiB0aGlzLmNoZWNrUGF0aWVudFJlZ0ZpZWxkKCdNaWRkbGUgTmFtZScpID8gJyAnICsgZGF0YT8ucGF0aWVudF9uYW1lLm1pZGRsZV9uYW1lIDogJycpICsgJyAnICsgZGF0YT8ucGF0aWVudF9uYW1lLmZhbWlseV9uYW1lKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyKSAhPSAtMTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGVtcFBhZ2luYXRvci5sZW5ndGggPSB0aGlzLnByaW9yaXR5VmlzaXRzLmxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy50ZW1wUGFnaW5hdG9yLm5leHRQYWdlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBjb21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubmd4TG9hZGVyLnN0b3BMb2FkZXIoJ3RhYmxlLWxvYWRlci0nICsgdGhpcy5wbHVnaW5Db25maWdPYnMucGx1Z2luQ29uZmlnT2JzRmxhZyk7IC8vIFN0b3Agc2VjdGlvbiBsb2FkZXJcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgY29tcGxldGVkIHZpc2l0cyBjb3VudFxyXG4gICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICovXHJcbiAgZ2V0Q29tcGxldGVkVmlzaXRzKHBhZ2U6IG51bWJlciA9IDEpIHtcclxuICAgIHRoaXMubmd4TG9hZGVyLnN0YXJ0TG9hZGVyKCd0YWJsZS1sb2FkZXItJyArIHRoaXMucGx1Z2luQ29uZmlnT2JzLnBsdWdpbkNvbmZpZ09ic0ZsYWcpOyAvLyBTdGFydCBzZWN0aW9uIGxvYWRlclxyXG4gICAgdGhpcy52aXNpdFNlcnZpY2UuZ2V0RW5kZWRWaXNpdHModGhpcy5zcGVjaWFsaXphdGlvbiwgcGFnZSkuc3Vic2NyaWJlKHtcclxuICAgICAgbmV4dDoocmVzOiBBcGlSZXNwb25zZU1vZGVsKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7XHJcbiAgICAgICAgICB0aGlzLnZpc2l0c0xlbmd0aENvdW50ID0gcmVzLnRvdGFsQ291bnQ7XHJcbiAgICAgICAgICB0aGlzLmVtaXRWaXNpdHNDb3VudCh0aGlzLnZpc2l0c0xlbmd0aENvdW50KTtcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzLmRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHZpc2l0ID0gcmVzLmRhdGFbaV07XHJcbiAgICAgICAgICAgIHZpc2l0LmNoZWlmX2NvbXBsYWludCA9IHRoaXMuZ2V0Q2hlaWZDb21wbGFpbnQodmlzaXQpO1xyXG4gICAgICAgICAgICB2aXNpdC52aXNpdF9jcmVhdGVkID0gdmlzaXQ/LmRhdGVfY3JlYXRlZCA/IHRoaXMuZ2V0Q3JlYXRlZEF0KHZpc2l0LmRhdGVfY3JlYXRlZC5yZXBsYWNlKCdaJywgJyswNTMwJykpIDogdGhpcy5nZXRFbmNvdW50ZXJDcmVhdGVkKHZpc2l0LCB2aXNpdFR5cGVzLkNPTVBMRVRFRF9WSVNJVCk7XHJcbiAgICAgICAgICAgIHZpc2l0LnBlcnNvbi5hZ2UgPSB0aGlzLmNhbGN1bGF0ZUFnZSh2aXNpdC5wZXJzb24uYmlydGhkYXRlKTtcclxuICAgICAgICAgICAgdmlzaXQuY29tcGxldGVkID0gdmlzaXQ/LmRhdGVfY3JlYXRlZCA/IHRoaXMuZ2V0Q3JlYXRlZEF0KHZpc2l0LmRhdGVfY3JlYXRlZC5yZXBsYWNlKCdaJywgJyswNTMwJykpIDogdGhpcy5nZXRFbmNvdW50ZXJDcmVhdGVkKHZpc2l0LCB2aXNpdFR5cGVzLlZJU0lUX0NPTVBMRVRFKTtcclxuICAgICAgICAgICAgdmlzaXQuVE1IX3BhdGllbnRfaWQgPSB0aGlzLmdldEF0dHJpYnV0ZURhdGEodmlzaXQsIFwiVE1IIENhc2UgTnVtYmVyXCIpPy52YWx1ZTtcclxuICAgICAgICAgICAgdmlzaXQubG9jYXRpb24gPSB2aXNpdD8ubG9jYXRpb24/Lm5hbWU7XHJcbiAgICAgICAgICAgIHZpc2l0LmFnZSA9IHZpc2l0Py5wZXJzb24/LmFnZSArICcgJyArIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCd5Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkVmlzaXRzLnB1c2godmlzaXQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5kYXRhU291cmNlLmRhdGEgPSBbLi4udGhpcy5jb21wbGV0ZWRWaXNpdHNdO1xyXG4gICAgICAgICAgaWYgKHBhZ2UgPT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UucGFnaW5hdG9yID0gdGhpcy50ZW1wUGFnaW5hdG9yO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2Uuc29ydCA9IHRoaXMudGFibGVNYXRTb3J0O1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZmlsdGVyUHJlZGljYXRlID0gKGRhdGE6IHsgcGF0aWVudDogeyBpZGVudGlmaWVyOiBzdHJpbmc7IH07IHBhdGllbnRfbmFtZTogeyBnaXZlbl9uYW1lOiBzdHJpbmc7IG1pZGRsZV9uYW1lOiBzdHJpbmc7IGZhbWlseV9uYW1lOiBzdHJpbmc7IH07IH0sIGZpbHRlcjogc3RyaW5nKSA9PiBkYXRhPy5wYXRpZW50LmlkZW50aWZpZXIudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgIT0gLTEgfHwgZGF0YT8ucGF0aWVudF9uYW1lLmdpdmVuX25hbWUuY29uY2F0KChkYXRhPy5wYXRpZW50X25hbWUubWlkZGxlX25hbWUgJiYgdGhpcy5jaGVja1BhdGllbnRSZWdGaWVsZCgnTWlkZGxlIE5hbWUnKSA/ICcgJyArIGRhdGE/LnBhdGllbnRfbmFtZS5taWRkbGVfbmFtZSA6ICcnKSArICcgJyArIGRhdGE/LnBhdGllbnRfbmFtZS5mYW1pbHlfbmFtZSkudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlcikgIT0gLTE7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBQYWdpbmF0b3IubGVuZ3RoID0gdGhpcy5jb21wbGV0ZWRWaXNpdHMubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBQYWdpbmF0b3IubmV4dFBhZ2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbXBsZXRlOiAoKSA9PiB7IFxyXG4gICAgICAgIHRoaXMubmd4TG9hZGVyLnN0b3BMb2FkZXIoJ3RhYmxlLWxvYWRlci0nICsgdGhpcy5wbHVnaW5Db25maWdPYnMucGx1Z2luQ29uZmlnT2JzRmxhZyk7IC8vIFN0b3Agc2VjdGlvbiBsb2FkZXJcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEdldCBmb2xsb3ctdXAgdmlzaXRzIGZvciBhIGxvZ2dlZC1pbiBkb2N0b3JcclxuICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgKi9cclxuICBnZXRGb2xsb3dVcFZpc2l0KHBhZ2U6IG51bWJlciA9IDEpIHtcclxuICAgIHRoaXMubmd4TG9hZGVyLnN0YXJ0TG9hZGVyKCd0YWJsZS1sb2FkZXItJyArIHRoaXMucGx1Z2luQ29uZmlnT2JzLnBsdWdpbkNvbmZpZ09ic0ZsYWcpOyAvLyBTdGFydCBzZWN0aW9uIGxvYWRlclxyXG4gICAgdGhpcy52aXNpdFNlcnZpY2UuZ2V0Rm9sbG93VXBWaXNpdHModGhpcy5zcGVjaWFsaXphdGlvbikuc3Vic2NyaWJlKHtcclxuICAgICAgbmV4dDogKHJlczogQXBpUmVzcG9uc2VNb2RlbCkgPT4ge1xyXG4gICAgICAgIGlmIChyZXMuc3VjY2Vzcykge1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXMuZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdmlzaXQgPSByZXMuZGF0YVtpXTtcclxuICAgICAgICAgICAgaWYgKHZpc2l0Py5lbmNvdW50ZXJzPy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICB0aGlzLnZpc2l0c0xlbmd0aENvdW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgdmlzaXQuY2hlaWZfY29tcGxhaW50ID0gdGhpcy5nZXRDaGVpZkNvbXBsYWludCh2aXNpdCk7XHJcbiAgICAgICAgICAgICAgdmlzaXQudmlzaXRfY3JlYXRlZCA9IHZpc2l0Py5kYXRlX2NyZWF0ZWQgPyB0aGlzLmdldENyZWF0ZWRBdCh2aXNpdC5kYXRlX2NyZWF0ZWQucmVwbGFjZSgnWicsICcrMDUzMCcpKSA6IHRoaXMuZ2V0RW5jb3VudGVyQ3JlYXRlZCh2aXNpdCwgdmlzaXRUeXBlcy5DT01QTEVURURfVklTSVQpO1xyXG4gICAgICAgICAgICAgIHZpc2l0LnBlcnNvbi5hZ2UgPSB0aGlzLmNhbGN1bGF0ZUFnZSh2aXNpdC5wZXJzb24uYmlydGhkYXRlKTtcclxuICAgICAgICAgICAgICB2aXNpdC5jb21wbGV0ZWQgPSB0aGlzLmdldEVuY291bnRlckNyZWF0ZWQodmlzaXQsIHZpc2l0VHlwZXMuVklTSVRfQ09NUExFVEUpO1xyXG4gICAgICAgICAgICAgIHZpc2l0LmZvbGxvd1VwID0gdGhpcy5wcm9jZXNzRm9sbG93VXBEYXRlKHRoaXMuZ2V0RW5jb3VudGVyT2JzKHZpc2l0LmVuY291bnRlcnMsIHZpc2l0VHlwZXMuVklTSVRfTk9URSwgMTYzMzQ1LypGb2xsb3ctdXAqLyk/LnZhbHVlX3RleHQpO1xyXG4gICAgICAgICAgICAgIHZpc2l0LmxvY2F0aW9uID0gdmlzaXQ/LmxvY2F0aW9uPy5uYW1lO1xyXG4gICAgICAgICAgICAgIHZpc2l0LmFnZSA9IHZpc2l0Py5wZXJzb24/LmFnZSArICcgJyArIHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCd5Jyk7XHJcbiAgICAgICAgICAgICAgdGhpcy5mb2xsb3dVcFZpc2l0cy5wdXNoKHZpc2l0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5lbWl0VmlzaXRzQ291bnQodGhpcy52aXNpdHNMZW5ndGhDb3VudCk7XHJcbiAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IFsuLi50aGlzLmZvbGxvd1VwVmlzaXRzXTtcclxuICAgICAgICAgIGlmIChwYWdlID09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLnBhZ2luYXRvciA9IHRoaXMudGVtcFBhZ2luYXRvcjtcclxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLnNvcnQgPSB0aGlzLnRhYmxlTWF0U29ydDtcclxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLmZpbHRlclByZWRpY2F0ZSA9IChkYXRhOiB7IHBhdGllbnQ6IHsgaWRlbnRpZmllcjogc3RyaW5nOyB9OyBwYXRpZW50X25hbWU6IHsgZ2l2ZW5fbmFtZTogc3RyaW5nOyBtaWRkbGVfbmFtZTogc3RyaW5nOyBmYW1pbHlfbmFtZTogc3RyaW5nOyB9OyB9LCBmaWx0ZXI6IHN0cmluZykgPT4gZGF0YT8ucGF0aWVudC5pZGVudGlmaWVyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xIHx8IGRhdGE/LnBhdGllbnRfbmFtZS5naXZlbl9uYW1lLmNvbmNhdCgoZGF0YT8ucGF0aWVudF9uYW1lLm1pZGRsZV9uYW1lICYmIHRoaXMuY2hlY2tQYXRpZW50UmVnRmllbGQoJ01pZGRsZSBOYW1lJykgPyAnICcgKyBkYXRhPy5wYXRpZW50X25hbWUubWlkZGxlX25hbWUgOiAnJykgKyAnICcgKyBkYXRhPy5wYXRpZW50X25hbWUuZmFtaWx5X25hbWUpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIpICE9IC0xO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50ZW1wUGFnaW5hdG9yLmxlbmd0aCA9IHRoaXMuZm9sbG93VXBWaXNpdHMubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBQYWdpbmF0b3IubmV4dFBhZ2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5uZ3hMb2FkZXIuc3RvcExvYWRlcigndGFibGUtbG9hZGVyLScgKyB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnKTsgLy8gU3RvcCBzZWN0aW9uIGxvYWRlclxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogR2V0IGVuY291bnRlciBkYXRldGltZSBmb3IgYSBnaXZlbiBlbmNvdW50ZXIgdHlwZVxyXG4gICogQHBhcmFtIHtDdXN0b21WaXNpdE1vZGVsfSB2aXNpdCAtIFZpc2l0XHJcbiAgKiBAcGFyYW0ge3N0cmluZ30gZW5jb3VudGVyTmFtZSAtIEVuY291bnRlciB0eXBlXHJcbiAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gRW5jb3VudGVyIGRhdGV0aW1lXHJcbiAgKi9cclxuICBnZXRFbmNvdW50ZXJPYnMoZW5jb3VudGVyczogQ3VzdG9tRW5jb3VudGVyTW9kZWxbXSwgZW5jb3VudGVyTmFtZTogc3RyaW5nLCBjb25jZXB0SWQ6IG51bWJlcikge1xyXG4gICAgbGV0IG9iczogQ3VzdG9tT2JzTW9kZWw7XHJcbiAgICBlbmNvdW50ZXJzLmZvckVhY2goKGVuY291bnRlcjogQ3VzdG9tRW5jb3VudGVyTW9kZWwpID0+IHtcclxuICAgICAgaWYgKGVuY291bnRlci50eXBlPy5uYW1lID09PSBlbmNvdW50ZXJOYW1lKSB7XHJcbiAgICAgICAgb2JzID0gZW5jb3VudGVyPy5vYnM/LmZpbmQoKG86IEN1c3RvbU9ic01vZGVsKSA9PiBvLmNvbmNlcHRfaWQgPT0gY29uY2VwdElkKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JzO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiBSZW5kZXJzIEhUTUwgY29udGVudCBmb3IgYSBjb2x1bW4sIHNhbml0aXplZCBmb3Igc2VjdXJpdHlcclxuICAgKiBAcGFyYW0ge2FueX0gY29sdW1uIC0gQ29sdW1uIGRlZmluaXRpb25cclxuICAgKiBAcGFyYW0ge2FueX0gZWxlbWVudCAtIERhdGEgZWxlbWVudCB0byByZW5kZXJcclxuICAgKiBAcmV0dXJuIHtTYWZlSHRtbCB8IHN0cmluZ30gLSBGb3JtYXR0ZWQgSFRNTCBvciBlbGVtZW50IHZhbHVlXHJcbiAgICovXHJcbiAgcmVuZGVySHRtbENvbnRlbnQoY29sdW1uOiBhbnksIGVsZW1lbnQ6IGFueSk6IGltcG9ydCgnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlcicpLlNhZmVIdG1sIHwgc3RyaW5nIHtcclxuICAgIHJldHVybiBjb2x1bW4uZm9ybWF0SHRtbCAmJiB0eXBlb2YgY29sdW1uLmZvcm1hdEh0bWwgPT09ICdmdW5jdGlvbicgPyB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChjb2x1bW4uZm9ybWF0SHRtbChlbGVtZW50KSkgOiBlbGVtZW50W2NvbHVtbi5rZXldO1xyXG4gIH1cclxuICAgIFxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBzdHJpbmcgb2YgQ1NTIGNsYXNzZXMgZm9yIHRoZSBjb2x1bW5cclxuICAgKiBAcGFyYW0ge2FueX0gY29sdW1uIC0gQ29sdW1uIGRlZmluaXRpb25cclxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IC0gU3BhY2Utc2VwYXJhdGVkIGNsYXNzIG5hbWVzXHJcbiAgICovXHJcbiAgZ2V0Q2xhc3Nlcyhjb2x1bW46IGFueSwgZWxlbWVudDogYW55KTogc3RyaW5nIHtcclxuICAgIGxldCBjbGFzc0xpc3QgPSBbXTtcclxuXHJcbiAgICAvLyBJZiBjb2x1bW4gaGFzIGEgc3RhdGljIGNsYXNzTGlzdCAoYXJyYXkgb3Igc3RyaW5nKSwgYWRkIGl0XHJcbiAgICBpZiAoY29sdW1uLmNsYXNzTGlzdCkge1xyXG4gICAgICBjbGFzc0xpc3QgPSB0eXBlb2YgY29sdW1uLmNsYXNzTGlzdCA9PT0gXCJmdW5jdGlvblwiID8gY29sdW1uLmNsYXNzTGlzdChlbGVtZW50KSA6IGNvbHVtbi5jbGFzc0xpc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNsYXNzTGlzdC5qb2luKFwiIFwiKTtcclxuICB9XHJcblxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogRm9ybWF0cyB0aGUgZm9sbG93LXVwIGRhdGUgYnkgY2xlYW5pbmcgdXAgdGltZSBkZXRhaWxzXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gRm9sbG93LXVwIGRhdGUgc3RyaW5nXHJcbiAgICogQHJldHVybiB7c3RyaW5nfSAtIEZvcm1hdHRlZCBkYXRlXHJcbiAgICovXHJcbiAgcHJvY2Vzc0ZvbGxvd1VwRGF0ZSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB2YWx1ZSA/IHZhbHVlLnNwbGl0KCcsJykubGVuZ3RoID4gMSA/IGAke3ZhbHVlLnNwbGl0KCcsJylbMF19ICR7dmFsdWUuc3BsaXQoJywnKVsxXS5yZXBsYWNlKFwiVGltZTpcIiwgXCJcIil9YCA6IHZhbHVlIDogJyc7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRXhlY3V0ZXMgdGhlIGFjdGlvbiBiYXNlZCBvbiBpdHMgbGFiZWwgKFJlc2NoZWR1bGUgb3IgQ2FuY2VsKVxyXG4gICAqIEBwYXJhbSB7YW55fSBhY3Rpb24gLSBBY3Rpb24gb2JqZWN0XHJcbiAgICogQHBhcmFtIHthbnl9IGVsZW1lbnQgLSBFbGVtZW50IHRvIHBlcmZvcm0gdGhlIGFjdGlvbiBvblxyXG4gICAqL1xyXG4gIGhhbmRsZUFjdGlvbihhY3Rpb246IGFueSwgZWxlbWVudDogYW55KSB7XHJcbiAgICBjb25zdCBpc1ZhbGlkYXRpb25SZXF1aXJlZCA9IGFjdGlvbi52YWxpZGF0aW9uUmVxdWlyZWQgIT09IHVuZGVmaW5lZCA/IGFjdGlvbi52YWxpZGF0aW9uUmVxdWlyZWQgOiB0cnVlO1xyXG4gICAgXHJcbiAgICBpZiAoYWN0aW9uLmxhYmVsID09PSAnUmVzY2hlZHVsZScpIHtcclxuICAgICAgdGhpcy5yZXNjaGVkdWxlKGVsZW1lbnQsIGlzVmFsaWRhdGlvblJlcXVpcmVkKTtcclxuICAgIH0gZWxzZSBpZiAoYWN0aW9uLmxhYmVsID09PSAnQ2FuY2VsJykge1xyXG4gICAgICB0aGlzLmNhbmNlbChlbGVtZW50LCBpc1ZhbGlkYXRpb25SZXF1aXJlZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPcGVucyBhIFdoYXRzQXBwIGNoYXQgd2l0aCB0aGUgZ2l2ZW4gcGhvbmUgbnVtYmVyXHJcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCAtIFRoZSBjbGljayBldmVudCB0byBwcmV2ZW50IHJvdyBuYXZpZ2F0aW9uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRlbGVwaG9uZSAtIFBob25lIG51bWJlciBmb3IgV2hhdHNBcHBcclxuICAgKi9cclxuICBvcGVuV2hhdHNBcHAoZXZlbnQ6IE1vdXNlRXZlbnQsIHRlbGVwaG9uZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgLy8gUHJldmVudCByb3cgbmF2aWdhdGlvblxyXG4gICAgY29uc3Qgd2hhdHNhcHBMaW5rID0gYGh0dHBzOi8vd2EubWUvJHt0ZWxlcGhvbmV9YDtcclxuICAgIHdpbmRvdy5vcGVuKHdoYXRzYXBwTGluaywgJ19ibGFuaycsICdub29wZW5lcixub3JlZmVycmVyJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbWl0cyB0aGUgdmlzaXRzIGNvdW50IGRhdGEgd2l0aCB0aGUgZ2l2ZW4gdGFibGUgdGFnIG5hbWUgYW5kIGNvdW50XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZpc2l0c0NvdW50IC0gVGhlIHRvdGFsIHZpc2l0cyBjb3VudCBmb3IgdGhlIHNwZWNpZmljIHRhYmxlXHJcbiAgICovXHJcbiAgZW1pdFZpc2l0c0NvdW50KHZpc2l0c0NvdW50OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHZpc2l0c0NvdW50RGF0YSA9IHtcclxuICAgICAgdGFibGVUYWdOYW1lOiB0aGlzLnBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnLFxyXG4gICAgICB2aXNpdHNDb3VudDogdmlzaXRzQ291bnRcclxuICAgIH07XHJcbiAgICB0aGlzLnZpc2l0c0NvdW50RGF0ZS5lbWl0KHZpc2l0c0NvdW50RGF0YSk7XHJcbiAgfVxyXG59XHJcblxyXG4iLCI8bWF0LWV4cGFuc2lvbi1wYW5lbCBbZXhwYW5kZWRdPVwidHJ1ZVwiIGRhdGEtdGVzdC1pZD1cIm1hdEV4cEFwcG9pbnRtZW50XCI+XHJcbiAgPG1hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyIGRhdGEtdGVzdC1pZD1cIm1hdEV4cEhlYWRlckFwcG9pbnRtZW50XCI+XHJcbiAgICA8bWF0LXBhbmVsLXRpdGxlIGRhdGEtdGVzdC1pZD1cIm1hdFBhbmVsVGl0bGVBcHBvaW50bWVudFwiPlxyXG4gICAgICA8ZGl2IGlkPVwie3twbHVnaW5Db25maWdPYnMuYW5jaG9ySWR9fVwiIGNsYXNzPVwiYW5jaG9yLWNvblwiIGRhdGEtdGVzdC1pZD1cImRpdkFuY2hvckFwcG9pbnRtZW50XCI+PC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJpbnRlbC1hY2NvcmRpb24tdGl0bGVcIiBkYXRhLXRlc3QtaWQ9XCJkaXZBY2NvcmRpb25UaXRsZUFwcG9pbnRtZW50XCI+XHJcbiAgICAgICAgPGltZyBzcmM9XCJ7eyBwbHVnaW5Db25maWdPYnMudGFibGVIZWFkZXJJY29uIH19XCIgYWx0PVwiXCIgd2lkdGg9XCI0NHB4XCIgZGF0YS10ZXN0LWlkPVwiaW1nVGFibGVIZWFkZXJJY29uQXBwb2ludG1lbnRcIj5cclxuICAgICAgICA8aDYgY2xhc3M9XCJtYi0wIG1sLTJcIiBbYXR0ci5kYXRhLXRlc3QtaWRdPVwicGx1Z2luQ29uZmlnT2JzLnRhYmxlSGVhZGVyXCI+IFxyXG4gICAgICAgICAge3sgcGx1Z2luQ29uZmlnT2JzLnRhYmxlSGVhZGVyICB8IHRyYW5zbGF0ZSB9fSAoe3sgdmlzaXRzTGVuZ3RoQ291bnQgfX0pXHJcbiAgICAgICAgPC9oNj5cclxuICAgICAgICA8bWF0LWljb24gXHJcbiAgICAgICAgICBhcmlhLWhpZGRlbj1cImZhbHNlXCIgXHJcbiAgICAgICAgICBhcmlhLWxhYmVsPVwiaGVscCBpY29uXCIgXHJcbiAgICAgICAgICBtYXRUb29sdGlwPVwie3sgKHBsdWdpbkNvbmZpZ09icy50b29sdGlwTGFiZWwgfCB0cmFuc2xhdGUpIH19XCIgXHJcbiAgICAgICAgICBtYXRUb29sdGlwUG9zaXRpb249XCJyaWdodFwiIFxyXG4gICAgICAgICAgZGF0YS10ZXN0LWlkPVwiaWNvSGVscEFwcG9pbnRtZW50XCI+XHJcbiAgICAgICAgICBoZWxwX291dGxpbmVcclxuICAgICAgICA8L21hdC1pY29uPlxyXG5cclxuICAgICAgICA8IS0tIEZpbHRlciBidXR0b24gLS0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm1sLWF1dG8gZmlsdGVyLXNlYXJjaC1jb250YWluZXJcIiBkYXRhLXRlc3QtaWQ9XCJkaXZGaWx0ZXJDb250YWluZXJBcHBvaW50bWVudFwiPlxyXG4gICAgICAgICAgPGJ1dHRvbiBcclxuICAgICAgICAgICAgKm5nSWY9XCJwbHVnaW5Db25maWdPYnMuZmlsdGVyT2JzLmZpbHRlckZsYWdcIiBcclxuICAgICAgICAgICAgY2xhc3M9XCJtYXQtc3Ryb2tlZC1idXR0b24gZmlsdGVyLWJ0blwiIFxyXG4gICAgICAgICAgICBbbWF0TWVudVRyaWdnZXJGb3JdPVwiZmlsdGVyTWVudTFcIiBcclxuICAgICAgICAgICAgKGNsaWNrKT1cIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcIiBcclxuICAgICAgICAgICAgZGF0YS10ZXN0LWlkPVwiYnRuRmlsdGVyQXBwb2ludG1lbnRcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9XCJ7e3BsdWdpbkNvbmZpZ09icy5maWx0ZXJPYnMuZmlsdGVySWNvbn19XCIgYWx0PVwiXCIgZGF0YS10ZXN0LWlkPVwiaW1nRmlsdGVySWNvbkFwcG9pbnRtZW50XCI+IFxyXG4gICAgICAgICAgICB7eyggcGx1Z2luQ29uZmlnT2JzLmZpbHRlck9icy5maWx0ZXJMYWJlbHwgdHJhbnNsYXRlKX19XHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICA8IS0tIEZpbHRlciBNZW51IC0tPlxyXG4gICAgICAgICAgPG1hdC1tZW51ICNmaWx0ZXJNZW51MT1cIm1hdE1lbnVcIiBjbGFzcz1cImN1c3RvbS1tZW51XCIgW2hhc0JhY2tkcm9wXT1cInRydWVcIiB4UG9zaXRpb249XCJiZWZvcmVcIiBkYXRhLXRlc3QtaWQ9XCJtZW51RmlsdGVyQXBwb2ludG1lbnRcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvZ2dsZS1idXR0b25zXCIgZGF0YS10ZXN0LWlkPVwiZGl2VG9nZ2xlQnV0dG9uc0FwcG9pbnRtZW50XCI+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiBcclxuICAgICAgICAgICAgICAgIG1hdC1idXR0b24gXHJcbiAgICAgICAgICAgICAgICBbY2xhc3MuYWN0aXZlXT1cIm1vZGUgPT09ICdkYXRlJ1wiIFxyXG4gICAgICAgICAgICAgICAgKGNsaWNrKT1cInNldE1vZGUoJ2RhdGUnKTsgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyByZXNldERhdGUodHJ1ZSlcIiBcclxuICAgICAgICAgICAgICAgIGRhdGEtdGVzdC1pZD1cImJ0bkRhdGVNb2RlQXBwb2ludG1lbnRcIj5cclxuICAgICAgICAgICAgICAgIHt7J0RhdGUnIHwgdHJhbnNsYXRlfX1cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8YnV0dG9uIFxyXG4gICAgICAgICAgICAgICAgbWF0LWJ1dHRvbiBcclxuICAgICAgICAgICAgICAgIFtjbGFzcy5hY3RpdmVdPVwibW9kZSA9PT0gJ3JhbmdlJ1wiIFxyXG4gICAgICAgICAgICAgICAgKGNsaWNrKT1cInNldE1vZGUoJ3JhbmdlJyk7ICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgcmVzZXREYXRlKHRydWUpXCIgXHJcbiAgICAgICAgICAgICAgICBkYXRhLXRlc3QtaWQ9XCJidG5SYW5nZU1vZGVBcHBvaW50bWVudFwiPlxyXG4gICAgICAgICAgICAgICAge3snUmFuZ2UnIHwgdHJhbnNsYXRlfX1cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8IS0tIERhdGUgTW9kZSAtLT5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cIm1vZGUgPT09ICdkYXRlJ1wiIGNsYXNzPVwiZGF0ZS12aWV3XCIgKGNsaWNrKT1cIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKVwiIGRhdGEtdGVzdC1pZD1cImRpdkRhdGVNb2RlQXBwb2ludG1lbnRcIj5cclxuICAgICAgICAgICAgICA8Zm9ybSBbZm9ybUdyb3VwXT1cImZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZGF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZGF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImxhYmVsLXRleHRcIj57eyAnU2VsZWN0IGRhdGUnIHwgdHJhbnNsYXRlfX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFttYXhdPVwibWF4RGF0ZVwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJkYXRlXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFttYXREYXRlcGlja2VyXT1cImRvYmRwXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3snU2VsZWN0IGRhdGUnIHwgdHJhbnNsYXRlfX1cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkRhdGVcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdC1pZD1cImV0RGF0ZVwiLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZGF0ZXBpY2tlciAjZG9iZHA+PC9tYXQtZGF0ZXBpY2tlcj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxtYXQtZGF0ZXBpY2tlci10b2dnbGUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdFN1ZmZpeCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2Zvcl09XCJkb2JkcFwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3QtaWQ9XCJkcERhdGVcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJkYXRlcGlja2VyLWljb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBtYXREYXRlcGlja2VyVG9nZ2xlSWNvbiBzcmM9XCJhc3NldHMvc3Zncy9jYWxlbmRhci1kYXRlLnN2Z1wiIGFsdD1cIlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9tYXQtZGF0ZXBpY2tlci10b2dnbGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDwhLS0gUmFuZ2UgTW9kZSAtLT5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cIm1vZGUgPT09ICdyYW5nZSdcIiBjbGFzcz1cInJhbmdlLXZpZXdcIiAoY2xpY2spPVwiICRldmVudC5zdG9wUHJvcGFnYXRpb24oKVwiIGRhdGEtdGVzdC1pZD1cImRpdlJhbmdlTW9kZUFwcG9pbnRtZW50XCI+XHJcbiAgICAgICAgICAgICAgPGZvcm0gW2Zvcm1Hcm91cF09XCJmaWx0ZXJlZERhdGVBbmRSYW5nZUZvcm1cIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWRhdGVcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWRhdGVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJsYWJlbC10ZXh0XCI+e3sgJ1N0YXJ0IGRhdGUnIHwgdHJhbnNsYXRlIH19PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtd3JhcHBlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbWF4XT1cImZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybS52YWx1ZS5lbmREYXRlID8gZmlsdGVyZWREYXRlQW5kUmFuZ2VGb3JtLnZhbHVlLmVuZERhdGUgOiBtYXhEYXRlXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cInN0YXJ0RGF0ZVwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbWF0RGF0ZXBpY2tlcl09XCJwaWNrZXIxXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3snU2VsZWN0IHN0YXJ0IGRhdGUnfHRyYW5zbGF0ZX19XCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3QtaWQ9XCJldFNlbFN0YXJ0RGF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPG1hdC1kYXRlcGlja2VyICNwaWNrZXIxPjwvbWF0LWRhdGVwaWNrZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bWF0LWRhdGVwaWNrZXItdG9nZ2xlIG1hdFN1ZmZpeCBbZm9yXT1cInBpY2tlcjFcIiBjbGFzcz1cImRhdGVwaWNrZXItaWNvblwiIGRhdGEtdGVzdC1pZD1cImRwU3RhcnREYXRlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgbWF0RGF0ZXBpY2tlclRvZ2dsZUljb24gc3JjPVwiYXNzZXRzL3N2Z3MvY2FsZW5kYXItZGF0ZS5zdmdcIiBhbHQ9XCJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbWF0LWRhdGVwaWNrZXItdG9nZ2xlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZGF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZGF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImxhYmVsLXRleHRcIj57eyAnRW5kIGRhdGUnIHwgdHJhbnNsYXRlIH19PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtd3JhcHBlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbWluXT1cImZpbHRlcmVkRGF0ZUFuZFJhbmdlRm9ybS52YWx1ZS5zdGFydERhdGVcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgW21heF09XCJtYXhEYXRlXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cImVuZERhdGVcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgW21hdERhdGVwaWNrZXJdPVwicGlja2VyMlwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7J1NlbGVjdCBlbmQgZGF0ZSd8dHJhbnNsYXRlfX1cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdC1pZD1cImV0U2VsRW5kRGF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPG1hdC1kYXRlcGlja2VyICNwaWNrZXIyPjwvbWF0LWRhdGVwaWNrZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bWF0LWRhdGVwaWNrZXItdG9nZ2xlIG1hdFN1ZmZpeCBbZm9yXT1cInBpY2tlcjJcIiBjbGFzcz1cImRhdGVwaWNrZXItaWNvblwiIGRhdGEtdGVzdC1pZD1cImRwRW5kRGF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIG1hdERhdGVwaWNrZXJUb2dnbGVJY29uIHNyYz1cImFzc2V0cy9zdmdzL2NhbGVuZGFyLWRhdGUuc3ZnXCIgYWx0PVwiXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L21hdC1kYXRlcGlja2VyLXRvZ2dsZT5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbi1idXR0b25zXCIgZGF0YS10ZXN0LWlkPVwiZGl2RmlsdGVyQWN0aW9uQnRuc0FwcG9pbnRtZW50XCI+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiBtYXQtYnV0dG9uIGNsYXNzPVwicmVzZXQtYnRuXCIgKGNsaWNrKT1cInJlc2V0RGF0ZSgpO1wiIGRhdGEtdGVzdC1pZD1cImJ0blJlc2V0RmlsdGVyQXBwb2ludG1lbnRcIj57eyAnUmVzZXQnfCB0cmFuc2xhdGUgfX08L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8YnV0dG9uIG1hdC1idXR0b24gY2xhc3M9XCJhcHBseS1idG5cIiAoY2xpY2spPVwiYXBwbHlEYXRlT3JSYW5nZUZpbHRlcihwbHVnaW5Db25maWdPYnMuZmlsdGVyT2JzLmZpbHRlckRhdGVGaWVsZClcIiBkYXRhLXRlc3QtaWQ9XCJidG5BcHBseUZpbHRlckFwcG9pbnRtZW50XCI+e3sgJ0FwcGx5J3wgdHJhbnNsYXRlIH19PC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9tYXQtbWVudT5cclxuXHJcbiAgICAgICAgICA8IS0tIFNlYXJjaCAtLT5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBzZWFyY2gtYmFyIG1sLWF1dG9cIiAoY2xpY2spPVwiJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1wiIGRhdGEtdGVzdC1pZD1cImRpdlNlYXJjaEFwcG9pbnRtZW50XCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgICAgICAgICNzZWFyY2hJbnB1dCBcclxuICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiIFxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3sgcGx1Z2luQ29uZmlnT2JzLnNlYXJjaFBsYWNlSG9sZGVyIHwgdHJhbnNsYXRlIH19XCIgXHJcbiAgICAgICAgICAgICAgKGtleXVwKT1cImFwcGx5RmlsdGVyKCRldmVudClcIiBcclxuICAgICAgICAgICAgICAoa2V5ZG93bi5TcGFjZSk9XCIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcIiBcclxuICAgICAgICAgICAgICAoa2V5ZG93bi5FbnRlcik9XCIkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcIiBcclxuICAgICAgICAgICAgICBkYXRhLXRlc3QtaWQ9XCJldFNlYXJjaEFwcG9pbnRtZW50RGFzaGJvYXJkXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1hcHBlbmRcIj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIiAqbmdJZj1cIiFpc0ZpbHRlckFwcGxpZWRcIiBkYXRhLXRlc3QtaWQ9XCJpY29TZWFyY2hBcHBvaW50bWVudFwiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCJhc3NldHMvc3Zncy9zZWFyY2gtaWNvbi5zdmdcIiBhbHQ9XCJcIiB3aWR0aD1cIjIwcHhcIiBoZWlnaHQ9XCIyMHB4XCI+XHJcbiAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDxidXR0b24gXHJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImJ0blJlc2V0QXBTZXJhY2ggbWF0LWljb24tYnV0dG9uXCIgXHJcbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiUmVzZXQgYXBwb2ludG1lbnQgc2VhcmNoXCIgIFxyXG4gICAgICAgICAgICAgICAgKGNsaWNrKT1cImNsZWFyRmlsdGVyKClcIiAgXHJcbiAgICAgICAgICAgICAgICAqbmdJZj1cImlzRmlsdGVyQXBwbGllZFwiIFxyXG4gICAgICAgICAgICAgICAgZGF0YS10ZXN0LWlkPVwiYnRuUmVzZXRTZWFyY2hBcHBvaW50bWVudFwiPlxyXG4gICAgICAgICAgICAgICAgPG1hdC1pY29uIGNsYXNzPVwibWwtMFwiPmNsb3NlPC9tYXQtaWNvbj5cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L21hdC1wYW5lbC10aXRsZT5cclxuICA8L21hdC1leHBhbnNpb24tcGFuZWwtaGVhZGVyPlxyXG5cclxuICA8ZGl2IGNsYXNzPVwibWF0LWVsZXZhdGlvbi16OFwiIGRhdGEtdGVzdC1pZD1cImRpdlRhYmxlV3JhcHBlckFwcG9pbnRtZW50XCI+XHJcbiAgICA8c3BhbiAqbmdJZj1cInRhYmxlTG9hZGVyXCI+XHJcbiAgICAgIDxuZ3gtdWktbG9hZGVyIFxyXG4gICAgICAgIFtsb2FkZXJJZF09XCIndGFibGUtbG9hZGVyLScgKyBwbHVnaW5Db25maWdPYnMucGx1Z2luQ29uZmlnT2JzRmxhZ1wiIFxyXG4gICAgICAgIFtmZ3NUeXBlXT1cIidiYWxsLXNwaW4tY2xvY2t3aXNlJ1wiIFxyXG4gICAgICAgIFtmZ3NDb2xvcl09XCInI2FiYTRhNCdcIiBcclxuICAgICAgICBbZmdzUG9zaXRpb25dPVwiJ2NlbnRlci1jZW50ZXInXCIgXHJcbiAgICAgICAgW2Znc1NpemVdPVwiNTBcIiBcclxuICAgICAgICBbb3ZlcmxheUNvbG9yXT1cIidyZ2IoMjU1LCAyNTUsIDI1NSknXCIgXHJcbiAgICAgICAgW2hhc1Byb2dyZXNzQmFyXT1cImZhbHNlXCJcclxuICAgICAgICBbdGV4dF09XCIoJ0xvYWRpbmcnfHRyYW5zbGF0ZSkgKyAnICcgKyAocGx1Z2luQ29uZmlnT2JzLnBsdWdpbkNvbmZpZ09ic0ZsYWd8dHJhbnNsYXRlKSArICcgJyArICgnZGF0YSd8dHJhbnNsYXRlKSArICcuLi4nXCJcclxuICAgICAgICBbdGV4dENvbG9yXT1cIicjMzMzJ1wiXHJcbiAgICAgICAgW3RleHRQb3NpdGlvbl09XCInY2VudGVyLWNlbnRlcidcIlxyXG4gICAgICAgIGRhdGEtdGVzdC1pZD1cImxvYWRlckFwcG9pbnRtZW50XCJcclxuICAgICAgPjwvbmd4LXVpLWxvYWRlcj5cclxuICAgIDwvc3Bhbj5cclxuICAgIDx0YWJsZSBtYXQtdGFibGUgW2RhdGFTb3VyY2VdPVwiZGF0YVNvdXJjZVwiICN0YWJsZU1hdFNvcnQ9XCJtYXRTb3J0XCIgbWF0U29ydD5cclxuXHJcbiAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGNvbHVtbiBvZiBkaXNwbGF5ZWRBcHBvaW50bWVudENvbHVtbnNcIiBbbWF0Q29sdW1uRGVmXT1cImNvbHVtbi5rZXlcIj5cclxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29sdW1uLmlzU29ydGFibGU7IGVsc2Ugbm9Tb3J0XCI+XHJcbiAgICAgICAgICA8dGggbWF0LWhlYWRlci1jZWxsICptYXRIZWFkZXJDZWxsRGVmIG1hdC1zb3J0LWhlYWRlciBtYXRTb3J0RGlyZWN0aW9uPVwiYXNjXCIgW2F0dHIuZGF0YS10ZXN0LWlkXT1cIid0aC0nICsgY29sdW1uLmtleSArICctJyArIHBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnXCI+XHJcbiAgICAgICAgICAgIHt7IGNvbHVtbi5sYWJlbCB8IHRyYW5zbGF0ZSB9fVxyXG4gICAgICAgICAgPC90aD5cclxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICA8bmctdGVtcGxhdGUgI25vU29ydD5cclxuICAgICAgICAgIDx0aCBtYXQtaGVhZGVyLWNlbGwgKm1hdEhlYWRlckNlbGxEZWYgIFthdHRyLmRhdGEtdGVzdC1pZF09XCIndGgtJyArIGNvbHVtbi5rZXkrICctJyArIHBsdWdpbkNvbmZpZ09icy5wbHVnaW5Db25maWdPYnNGbGFnXCI+XHJcbiAgICAgICAgICAgIHt7IGNvbHVtbi5sYWJlbCB8IHRyYW5zbGF0ZSB9fVxyXG4gICAgICAgICAgPC90aD5cclxuICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG5cclxuICAgICAgICA8dGQgbWF0LWNlbGwgKm1hdENlbGxEZWY9XCJsZXQgZWxlbWVudDsgbGV0IGogPSBpbmRleDtcIiBbYXR0ci5kYXRhLXRlc3QtaWRdPVwiJ3RkLScgKyBjb2x1bW4ua2V5ICsgJy0nICsgalwiPlxyXG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbHVtbi5rZXkgIT09ICdwYXRpZW50X25hbWUnICYmIGNvbHVtbi5rZXkgIT09ICd2aXNpdF9jb21wbGV0ZWQnXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbG9hdC1sZWZ0XCIgXHJcbiAgICAgICAgICAgICAgICBbaW5uZXJIVE1MXT1cInJlbmRlckh0bWxDb250ZW50KGNvbHVtbiwgZWxlbWVudClcIiBcclxuICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImdldENsYXNzZXMoY29sdW1uLCBlbGVtZW50KVwiPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICA8IS0tIFRoaXMgaXMgZm9yIHZpc2l0X2NvbXBsZXRlZCBjb2x1bW4gLS0+XHJcbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29sdW1uLmtleSA9PT0gJ3Zpc2l0X2NvbXBsZXRlZCdcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgdmlzaXQtY29tcGxldGVkLWNlbGxcIiAgW2F0dHIuZGF0YS10ZXN0LWlkXT1cIid0ZC12aXNpdF9jb21wbGV0ZWQtJyArIGpcIj5cclxuICAgICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9zdmdzL2dyZWVuLXBhZC5zdmdcIiBhbHQ9XCJDb21wbGV0ZWRcIiBjbGFzcz1cIm1yLTJcIiAvPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1zdWNjZXNzXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBlbGVtZW50LmNvbXBsZXRlZCB9fVxyXG4gICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgICAgICAgICA8IS0tIFBhdGllbnQgTmFtZSBDb2x1bW4gLS0+XHJcbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29sdW1uLmtleSA9PT0gJ3BhdGllbnRfbmFtZSdcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIiAgIFthdHRyLmRhdGEtdGVzdC1pZF09XCIndGQtcGF0aWVudF9uYW1lLScgKyBqXCI+XHJcbiAgICAgICAgICAgICAgPGltZyAqbmdJZj1cImVsZW1lbnQucGF0aWVudElkXCIgc3JjPVwie3sgY2hlY2tQYXRpZW50UmVnRmllbGQoJ1Byb2ZpbGUgUGhvdG8nKSA/IGJhc2VVUkwgKyAnL3BlcnNvbmltYWdlLycgKyBlbGVtZW50LnBhdGllbnRJZCA6ICcnIH19XCIgYWx0PVwiXCIgd2lkdGg9XCIzMnB4XCIgaGVpZ2h0PVwiMzJweFwiIHN0eWxlPVwiYm9yZGVyLXJhZGl1czogNTAlO1wiPlxyXG4gICAgICAgICAgICAgIDxpbWcgKm5nSWY9XCJwbHVnaW5Db25maWdPYnMucGx1Z2luQ29uZmlnT2JzRmxhZyAhPT0gJ0FwcG9pbnRtZW50J1wiIHNyYz1cInt7IGNoZWNrUGF0aWVudFJlZ0ZpZWxkKCdQcm9maWxlIFBob3RvJykgPyBiYXNlVVJMICsgJy9wZXJzb25pbWFnZS8nICsgZWxlbWVudC5wZXJzb24udXVpZCA6ICcnIH19XCIgYWx0PVwiXCIgd2lkdGg9XCIzMnB4XCIgaGVpZ2h0PVwiMzJweFwiIHN0eWxlPVwiYm9yZGVyLXJhZGl1czogNTAlO1wiIFthdHRyLmRhdGEtdGVzdC1pZF09XCIndGQtcGF0aWVudF9pbWctJyArIGpcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxvYXQtbGVmdFwiIFxyXG4gICAgICAgICAgICAgICAgW2lubmVySFRNTF09XCJyZW5kZXJIdG1sQ29udGVudChjb2x1bW4sIGVsZW1lbnQpXCIgXHJcbiAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJnZXRDbGFzc2VzKGNvbHVtbiwgZWxlbWVudClcIj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgICAgICAgICA8IS0tIFRlbGVwaG9uZSBDb2x1bW4gLS0+XHJcbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29sdW1uLmtleSA9PT0gJ3RlbGVwaG9uZScgJiYgZWxlbWVudC50ZWxlcGhvbmVcIj5cclxuICAgICAgICAgICAgPGEgKGNsaWNrKT1cIm9wZW5XaGF0c0FwcCgkZXZlbnQsIGVsZW1lbnQudGVsZXBob25lKVwiIGNsYXNzPVwiZmxvYXQtbGVmdCBpY29uLWJ0biBtLTBcIiBbYXR0ci5kYXRhLXRlc3QtaWRdPVwiJ2xpbmtQYXRpZW50V2hhdHNBcHAnICsgalwiPlxyXG4gICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL3N2Z3Mvd2hhdHNhcHAtZ3JlZW4uc3ZnXCIgYWx0PVwiV2hhdHNBcHBcIiAvPlxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgICAgICAgICA8IS0tIEFjdGlvbnMgQ29sdW1uIC0tPlxyXG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbHVtbi5rZXkgPT09ICdhY3Rpb25zJ1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWN0aW9ucy1idG4td3JhcCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGFjdGlvbiBvZiBjb2x1bW4uYWN0aW9uQnV0dG9uczsgbGV0IGsgPSBpbmRleFwiXHJcbiAgICAgICAgICAgICAgICBbbmdTdHlsZV09XCJ7XHJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiBhY3Rpb24uc3R5bGU/LmNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFjdGlvbi5zdHlsZT8uYmFja2dyb3VuZENvbG9yXHJcbiAgICAgICAgICAgICAgICB9XCJcclxuICAgICAgICAgICAgICAgIGNsYXNzPVwiYWN0aW9uLWJ0biBtci0yXCJcclxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICAgICAgKGNsaWNrKT1cIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgaGFuZGxlQWN0aW9uKGFjdGlvbiwgZWxlbWVudClcIlxyXG4gICAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLXRlc3QtaWRdPVwiJ2J0bi1hY3Rpb24tJyArIGFjdGlvbi5sYWJlbCsnLScrIGtcIiA+XHJcbiAgICAgICAgICAgICAgICB7eyBhY3Rpb24ubGFiZWwgfCB0cmFuc2xhdGUgfX1cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICA8L3RkPlxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgIFxyXG5cclxuICAgICAgPCEtLSBObyBEYXRhIFJvdyAtLT5cclxuICAgICAgPHRyIGNsYXNzPVwibWF0LXJvd1wiICptYXROb0RhdGFSb3c+XHJcbiAgICAgICAgPHRkIGNsYXNzPVwibWF0LWNlbGwgdGV4dC1jZW50ZXJcIiBbYXR0ci5jb2xzcGFuXT1cImRpc3BsYXllZENvbHVtbnMubGVuZ3RoXCI+XHJcbiAgICAgICAgICB7eyBwbHVnaW5Db25maWdPYnMubm9SZWNvcmRGb3VuZCB8IHRyYW5zbGF0ZSB9fVxyXG4gICAgICAgIDwvdGQ+XHJcbiAgICAgIDwvdHI+XHJcblxyXG4gICAgICA8IS0tIFJvdyBEZWZpbml0aW9ucyAtLT5cclxuICAgICAgPHRyIG1hdC1oZWFkZXItcm93ICptYXRIZWFkZXJSb3dEZWY9XCJkaXNwbGF5ZWRDb2x1bW5zXCI+PC90cj5cclxuICAgICAgPHRyIG1hdC1yb3cgKm1hdFJvd0RlZj1cImxldCByb3c7IGxldCB4ID0gaW5kZXg7IGNvbHVtbnM6IGRpc3BsYXllZENvbHVtbnM7XCIgW2F0dHIuZGF0YS10ZXN0LWlkXT1cIid0cicgKyB4XCIgW3JvdXRlckxpbmtdPVwiWycvZGFzaGJvYXJkL3Zpc2l0LXN1bW1hcnknLCByb3cudXVpZF1cIj48L3RyPlxyXG4gICAgICBcclxuICAgIDwvdGFibGU+XHJcbiAgICA8bWF0LXBhZ2luYXRvciAjdGVtcFBhZ2luYXRvciBoaWRlUGFnZVNpemUgW3BhZ2VTaXplT3B0aW9uc109XCJwYWdlU2l6ZU9wdGlvbnNcIiBhcmlhLWxhYmVsPVwiU2VsZWN0IHBhZ2Ugb2YgcGVyaW9kaWMgZWxlbWVudHNcIj48L21hdC1wYWdpbmF0b3I+XHJcbiAgPC9kaXY+XHJcbjwvbWF0LWV4cGFuc2lvbi1wYW5lbD4iXX0=